{
  "version": 3,
  "file": "ui-router-core.min.js",
  "sources": [
    "@uirouter/core/common/hof.ts",
    "@uirouter/core/common/predicates.ts",
    "@uirouter/core/common/coreservices.ts",
    "@uirouter/core/common/common.ts",
    "@uirouter/core/transition/rejectFactory.ts",
    "@uirouter/core/common/glob.ts",
    "@uirouter/core/common/queue.ts",
    "@uirouter/core/common/strings.ts",
    "@uirouter/core/common/safeConsole.ts",
    "@uirouter/core/common/trace.ts",
    "@uirouter/core/params/paramType.ts",
    "@uirouter/core/params/param.ts",
    "@uirouter/core/params/paramTypes.ts",
    "@uirouter/core/params/stateParams.ts",
    "@uirouter/core/path/pathNode.ts",
    "@uirouter/core/state/targetState.ts",
    "@uirouter/core/path/pathUtils.ts",
    "@uirouter/core/resolve/interface.ts",
    "@uirouter/core/resolve/resolvable.ts",
    "@uirouter/core/resolve/resolveContext.ts",
    "@uirouter/core/state/stateBuilder.ts",
    "@uirouter/core/transition/interface.ts",
    "@uirouter/core/state/stateObject.ts",
    "@uirouter/core/state/stateMatcher.ts",
    "@uirouter/core/state/stateQueueManager.ts",
    "@uirouter/core/state/stateRegistry.ts",
    "@uirouter/core/transition/transitionHook.ts",
    "@uirouter/core/transition/hookRegistry.ts",
    "@uirouter/core/transition/hookBuilder.ts",
    "@uirouter/core/transition/transition.ts",
    "@uirouter/core/url/urlMatcher.ts",
    "@uirouter/core/url/urlMatcherFactory.ts",
    "@uirouter/core/url/urlRule.ts",
    "@uirouter/core/url/urlRules.ts",
    "@uirouter/core/url/urlRouter.ts",
    "@uirouter/core/view/view.ts",
    "@uirouter/core/globals.ts",
    "@uirouter/core/url/urlConfig.ts",
    "@uirouter/core/url/urlService.ts",
    "@uirouter/core/router.ts",
    "@uirouter/core/hooks/coreResolvables.ts",
    "@uirouter/core/hooks/redirectTo.ts",
    "@uirouter/core/hooks/onEnterExitRetain.ts",
    "@uirouter/core/hooks/resolve.ts",
    "@uirouter/core/hooks/views.ts",
    "@uirouter/core/hooks/updateGlobals.ts",
    "@uirouter/core/hooks/url.ts",
    "@uirouter/core/hooks/lazyLoad.ts",
    "@uirouter/core/transition/transitionEventType.ts",
    "@uirouter/core/hooks/ignoredTransition.ts",
    "@uirouter/core/hooks/invalidTransition.ts",
    "@uirouter/core/transition/transitionService.ts",
    "@uirouter/core/state/stateService.ts",
    "@uirouter/core/vanilla/q.ts",
    "@uirouter/core/vanilla/injector.ts",
    "@uirouter/core/vanilla/utils.ts",
    "@uirouter/core/vanilla/baseLocationService.ts",
    "@uirouter/core/vanilla/hashLocationService.ts",
    "@uirouter/core/vanilla/memoryLocationService.ts",
    "@uirouter/core/vanilla/pushStateLocationService.ts",
    "@uirouter/core/vanilla/memoryLocationConfig.ts",
    "@uirouter/core/vanilla/browserLocationConfig.ts",
    "@uirouter/core/vanilla/plugins.ts",
    "@uirouter/core/interface.ts"
  ],
  "sourcesContent": [
    "/**\n * Higher order functions\n *\n * These utility functions are exported, but are subject to change without notice.\n *\n * @packageDocumentation\n */\n\nimport { Predicate } from './common';\n/**\n * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.\n *\n * Given a function with N parameters, returns a new function that supports partial application.\n * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,\n * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to\n * accept more parameters until all N parameters have been supplied.\n *\n *\n * This contrived example uses a partially applied function as an predicate, which returns true\n * if an object is found in both arrays.\n * @example\n * ```\n * // returns true if an object is in both of the two arrays\n * function inBoth(array1, array2, object) {\n *   return array1.indexOf(object) !== -1 &&\n *          array2.indexOf(object) !== 1;\n * }\n * let obj1, obj2, obj3, obj4, obj5, obj6, obj7\n * let foos = [obj1, obj3]\n * let bars = [obj3, obj4, obj5]\n *\n * // A curried \"copy\" of inBoth\n * let curriedInBoth = curry(inBoth);\n * // Partially apply both the array1 and array2\n * let inFoosAndBars = curriedInBoth(foos, bars);\n *\n * // Supply the final argument; since all arguments are\n * // supplied, the original inBoth function is then called.\n * let obj1InBoth = inFoosAndBars(obj1); // false\n *\n * // Use the inFoosAndBars as a predicate.\n * // Filter, on each iteration, supplies the final argument\n * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];\n * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]\n *\n * ```\n *\n * @param fn\n * @returns {*|function(): (*|any)}\n */\nexport function curry(fn: Function): Function {\n  return function curried() {\n    if (arguments.length >= fn.length) {\n      return fn.apply(this, arguments);\n    }\n    const args = Array.prototype.slice.call(arguments);\n    return curried.bind(this, ...args);\n  };\n}\n\n/**\n * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left\n * given: f(x), g(x), h(x)\n * let composed = compose(f,g,h)\n * then, composed is: f(g(h(x)))\n */\nexport function compose() {\n  const args = arguments;\n  const start = args.length - 1;\n  return function () {\n    let i = start,\n      result = args[start].apply(this, arguments);\n    while (i--) result = args[i].call(this, result);\n    return result;\n  };\n}\n\n/**\n * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right\n * given: f(x), g(x), h(x)\n * let piped = pipe(f,g,h);\n * then, piped is: h(g(f(x)))\n */\nexport function pipe(...funcs: Function[]): (obj: any) => any {\n  return compose.apply(null, [].slice.call(arguments).reverse());\n}\n\n/**\n * Given a property name, returns a function that returns that property from an object\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = prop(\"name\");\n * getName(obj) === \"blarg\"\n */\nexport const prop = (name: string) => (obj: any) => obj && obj[name];\n\n/**\n * Given a property name and a value, returns a function that returns a boolean based on whether\n * the passed object has a property that matches the value\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = propEq(\"name\", \"blarg\");\n * getName(obj) === true\n */\nexport const propEq = curry((name: string, _val: any, obj: any) => obj && obj[name] === _val);\n\n/**\n * Given a dotted property name, returns a function that returns a nested property from an object, or undefined\n * let obj = { id: 1, nestedObj: { foo: 1, name: \"blarg\" }, };\n * let getName = prop(\"nestedObj.name\");\n * getName(obj) === \"blarg\"\n * let propNotFound = prop(\"this.property.doesnt.exist\");\n * propNotFound(obj) === undefined\n */\nexport const parse = (name: string) => pipe.apply(null, name.split('.').map(prop));\n\n/**\n * Given a function that returns a truthy or falsey value, returns a\n * function that returns the opposite (falsey or truthy) value given the same inputs\n */\nexport const not: (fn: Predicate<any>) => Predicate<any> = (fn: Predicate<any>) => (...args: any[]) =>\n  !fn.apply(null, args);\n\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if both functions return truthy for the given arguments\n */\nexport function and(fn1: Predicate<any>, fn2: Predicate<any>): Predicate<any> {\n  return (...args: any[]) => fn1.apply(null, args) && fn2.apply(null, args);\n}\n\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if at least one of the functions returns truthy for the given arguments\n */\nexport function or(fn1: Predicate<any>, fn2: Predicate<any>): Predicate<any> {\n  return (...args: any[]) => fn1.apply(null, args) || fn2.apply(null, args);\n}\n\n/**\n * Check if all the elements of an array match a predicate function\n *\n * @param fn1 a predicate function `fn1`\n * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array\n */\nexport const all = (fn1: Predicate<any>) => (arr: any[]) => arr.reduce((b, x) => b && !!fn1(x), true) as boolean;\n\n// tslint:disable-next-line:variable-name\nexport const any = (fn1: Predicate<any>) => (arr: any[]) => arr.reduce((b, x) => b || !!fn1(x), false) as boolean;\n\n/** Given a class, returns a Predicate function that returns true if the object is of that class */\nexport const is = <T>(ctor: { new (...args): T }) => (obj: any): obj is T =>\n  (obj != null && obj.constructor === ctor) || obj instanceof ctor;\n\n/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */\nexport const eq: (comp: any) => Predicate<any> = (value: any) => (other: any) => value === other;\n\n/** Given a value, returns a function which returns the value */\nexport const val = <T>(v: T) => () => v;\n\nexport function invoke(fnName: string): Function;\nexport function invoke(fnName: string, args: any[]): Function;\nexport function invoke(fnName: string, args?: any[]): Function {\n  return (obj: any) => obj[fnName].apply(obj, args);\n}\n\n/**\n * Sorta like Pattern Matching (a functional programming conditional construct)\n *\n * See http://c2.com/cgi/wiki?PatternMatching\n *\n * This is a conditional construct which allows a series of predicates and output functions\n * to be checked and then applied.  Each predicate receives the input.  If the predicate\n * returns truthy, then its matching output function (mapping function) is provided with\n * the input and, then the result is returned.\n *\n * Each combination (2-tuple) of predicate + output function should be placed in an array\n * of size 2: [ predicate, mapFn ]\n *\n * These 2-tuples should be put in an outer array.\n *\n * @example\n * ```\n *\n * // Here's a 2-tuple where the first element is the isString predicate\n * // and the second element is a function that returns a description of the input\n * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];\n *\n * // Second tuple: predicate \"isNumber\", mapfn returns a description\n * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];\n *\n * let third = [ (input) => input === null,  (input) => `Oh, null...` ];\n *\n * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];\n *\n * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);\n *\n * console.log(descriptionOf(undefined)); // 'notdefined'\n * console.log(descriptionOf(55)); // '(55) That's a number!'\n * console.log(descriptionOf(\"foo\")); // 'Here's your string foo'\n * ```\n *\n * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,\n * with a Predicate and a mapping/output function\n * @returns {function(any): *}\n */\nexport function pattern(struct: Function[][]): Function {\n  return function (x: any) {\n    for (let i = 0; i < struct.length; i++) {\n      if (struct[i][0](x)) return struct[i][1](x);\n    }\n  };\n}\n",
    "/**\n * Predicates\n *\n * These predicates return true/false based on the input.\n * Although these functions are exported, they are subject to change without notice.\n *\n * @packageDocumentation\n */\nimport { and, not, pipe, prop, or } from './hof';\nimport { Predicate } from './common'; // has or is using\nimport { StateObject } from '../state/stateObject';\n\nconst toStr = Object.prototype.toString;\nconst tis = (t: string) => (x: any) => typeof x === t;\nexport const isUndefined = tis('undefined');\nexport const isDefined = not(isUndefined);\nexport const isNull = (o: any) => o === null;\nexport const isNullOrUndefined = or(isNull, isUndefined);\nexport const isFunction: (x: any) => x is Function = <any>tis('function');\nexport const isNumber: (x: any) => x is number = <any>tis('number');\nexport const isString = <(x: any) => x is string>tis('string');\nexport const isObject = (x: any) => x !== null && typeof x === 'object';\nexport const isArray = Array.isArray;\nexport const isDate: (x: any) => x is Date = <any>((x: any) => toStr.call(x) === '[object Date]');\nexport const isRegExp: (x: any) => x is RegExp = <any>((x: any) => toStr.call(x) === '[object RegExp]');\n\n/**\n * Predicate which checks if a value is injectable\n *\n * A value is \"injectable\" if it is a function, or if it is an ng1 array-notation-style array\n * where all the elements in the array are Strings, except the last one, which is a Function\n */\nexport function isInjectable(val: any) {\n  if (isArray(val) && val.length) {\n    const head = val.slice(0, -1),\n      tail = val.slice(-1);\n    return !(head.filter(not(isString)).length || tail.filter(not(isFunction)).length);\n  }\n  return isFunction(val);\n}\n\n/**\n * Predicate which checks if a value looks like a Promise\n *\n * It is probably a Promise if it's an object, and it has a `then` property which is a Function\n */\nexport const isPromise = <(x: any) => x is Promise<any>>and(isObject, pipe(prop('then'), isFunction));\n",
    "/**\n * This module is a stub for core services such as Dependency Injection or Browser Location.\n * Core services may be implemented by a specific framework, such as ng1 or ng2, or be pure javascript.\n *\n * @packageDocumentation\n */\nimport { IInjectable, Obj } from './common';\nimport { Disposable } from '../interface';\nimport { UrlConfig, UrlService } from '../url';\n\nconst noImpl = (fnname: string) => () => {\n  throw new Error(`No implementation for ${fnname}. The framework specific code did not implement this method.`);\n};\n\nexport const makeStub = <T>(service: string, methods: (keyof T)[]): T =>\n  methods.reduce((acc, key) => ((acc[key] = noImpl(`${service}.${key}()`) as any), acc), {} as T);\n\nconst services: CoreServices = {\n  $q: undefined,\n  $injector: undefined,\n};\n\nexport interface $QLikeDeferred {\n  resolve: (val?: any) => void;\n  reject: (reason?: any) => void;\n  promise: Promise<any>;\n}\n\nexport interface $QLike {\n  when<T>(value?: T | PromiseLike<T>): Promise<T>;\n  reject<T>(reason: any): Promise<T>;\n  defer(): $QLikeDeferred;\n  all(promises: { [key: string]: Promise<any> }): Promise<any>;\n  all(promises: Promise<any>[]): Promise<any[]>;\n}\n\nexport interface $InjectorLike {\n  strictDi?: boolean;\n  get(token: any): any;\n  get<T>(token: any): T;\n  has(token: any): boolean;\n  invoke(fn: IInjectable, context?: any, locals?: Obj): any;\n  annotate(fn: IInjectable, strictDi?: boolean): any[];\n}\n\nexport interface CoreServices {\n  $q: $QLike;\n  $injector: $InjectorLike;\n}\n\n/**\n * Handles low level URL read/write\n *\n * This service handles low level reads and updates of the URL and listens for url changes.\n * Implementors should pass these through to the underlying URL mechanism.\n * The underlying URL mechanism might be browser APIs, framework APIs, or some 3rd party URL management library.\n *\n * UI-Router Core includes three basic implementations:\n *\n * - [[PushStateLocationService]]\n * - [[HashLocationService]]\n * - [[MemoryLocationService]]\n */\nexport interface LocationServices extends Disposable {\n  /** See: [[UrlService.url]] */ url: UrlService['url'];\n  /** See: [[UrlService.path]] */ path: UrlService['path'];\n  /** See: [[UrlService.search]] */ search: UrlService['search'];\n  /** See: [[UrlService.hash]] */ hash: UrlService['hash'];\n  /** See: [[UrlService.onChange]] */ onChange: UrlService['onChange'];\n}\n\n/**\n * Returns low level URL configuration and metadata\n *\n * This service returns information about the location configuration.\n * This service is primarily used when building URLs (e.g., for `hrefs`)\n *\n * Implementors should pass these through to the underlying URL APIs.\n * The underlying URL mechanism might be browser APIs, framework APIs, or some 3rd party URL management library.\n *\n * UI-Router Core includes two basic implementations:\n *\n * - [[BrowserLocationConfig]]\n * - [[MemoryLocationConfig]]\n */\nexport interface LocationConfig extends Disposable {\n  /** See: [[UrlConfig.port]] */ port: UrlConfig['port'];\n  /** See: [[UrlConfig.protocol]] */ protocol: UrlConfig['protocol'];\n  /** See: [[UrlConfig.host]] */ host: UrlConfig['host'];\n  /** See: [[UrlConfig.baseHref]] */ baseHref: UrlConfig['baseHref'];\n  /** See: [[UrlConfig.html5Mode]] */ html5Mode: UrlConfig['html5Mode'];\n  /** See: [[UrlConfig.hashPrefix]] */ hashPrefix: UrlConfig['hashPrefix'];\n}\n\nexport { services };\n",
    "/**\n * Random utility functions used in the UI-Router code\n *\n * These functions are exported, but are subject to change without notice.\n *\n * @packageDocumentation\n * @preferred\n */\nimport { isFunction, isString, isArray, isRegExp, isDate } from './predicates';\nimport { all, any, prop, curry, not } from './hof';\nimport { services } from './coreservices';\nimport { StateObject } from '../state/stateObject';\n\ndeclare const global;\nexport const root: any =\n  (typeof self === 'object' && self.self === self && self) ||\n  (typeof global === 'object' && global.global === global && global) ||\n  this;\nconst angular = root.angular || {};\n\nexport const fromJson = angular.fromJson || JSON.parse.bind(JSON);\nexport const toJson = angular.toJson || JSON.stringify.bind(JSON);\nexport const forEach = angular.forEach || _forEach;\nexport const extend = Object.assign || _extend;\nexport const equals = angular.equals || _equals;\nexport function identity(x: any) {\n  return x;\n}\nexport function noop(): any {}\n\nexport type Mapper<X, T> = (x: X, key?: string | number) => T;\nexport interface TypedMap<T> {\n  [key: string]: T;\n}\nexport type Predicate<X> = (x?: X) => boolean;\nexport type PredicateBinary<X, Y> = (x?: X, y?: Y) => boolean;\n/**\n * An ng1-style injectable\n *\n * This could be a (non-minified) function such as:\n * ```js\n * function injectableFunction(SomeDependency) {\n *\n * }\n * ```\n *\n * or an explicitly annotated function (minify safe)\n * ```js\n * injectableFunction.$inject = [ 'SomeDependency' ];\n * function injectableFunction(SomeDependency) {\n *\n * }\n * ```\n *\n * or an array style annotated function (minify safe)\n * ```js\n * ['SomeDependency', function injectableFunction(SomeDependency) {\n *\n * }];\n * ```\n */\nexport type IInjectable = Function | any[];\n\nexport interface Obj extends Object {\n  [key: string]: any;\n}\n\n/**\n * Builds proxy functions on the `to` object which pass through to the `from` object.\n *\n * For each key in `fnNames`, creates a proxy function on the `to` object.\n * The proxy function calls the real function on the `from` object.\n *\n *\n * #### Example:\n * This example creates an new class instance whose functions are prebound to the new'd object.\n * ```js\n * class Foo {\n *   constructor(data) {\n *     // Binds all functions from Foo.prototype to 'this',\n *     // then copies them to 'this'\n *     bindFunctions(Foo.prototype, this, this);\n *     this.data = data;\n *   }\n *\n *   log() {\n *     console.log(this.data);\n *   }\n * }\n *\n * let myFoo = new Foo([1,2,3]);\n * var logit = myFoo.log;\n * logit(); // logs [1, 2, 3] from the myFoo 'this' instance\n * ```\n *\n * #### Example:\n * This example creates a bound version of a service function, and copies it to another object\n * ```\n *\n * var SomeService = {\n *   this.data = [3, 4, 5];\n *   this.log = function() {\n *     console.log(this.data);\n *   }\n * }\n *\n * // Constructor fn\n * function OtherThing() {\n *   // Binds all functions from SomeService to SomeService,\n *   // then copies them to 'this'\n *   bindFunctions(SomeService, this, SomeService);\n * }\n *\n * let myOtherThing = new OtherThing();\n * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'\n * ```\n *\n * @param source A function that returns the source object which contains the original functions to be bound\n * @param target A function that returns the target object which will receive the bound functions\n * @param bind A function that returns the object which the functions will be bound to\n * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)\n * @param latebind If true, the binding of the function is delayed until the first time it's invoked\n */\nexport function createProxyFunctions(\n  source: Function,\n  target: Obj,\n  bind: Function,\n  fnNames?: string[],\n  latebind = false\n): Obj {\n  const bindFunction = (fnName) => source()[fnName].bind(bind());\n\n  const makeLateRebindFn = (fnName) =>\n    function lateRebindFunction() {\n      target[fnName] = bindFunction(fnName);\n      return target[fnName].apply(null, arguments);\n    };\n\n  fnNames = fnNames || Object.keys(source());\n\n  return fnNames.reduce((acc, name) => {\n    acc[name] = latebind ? makeLateRebindFn(name) : bindFunction(name);\n    return acc;\n  }, target);\n}\n\n/**\n * prototypal inheritance helper.\n * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it\n */\nexport const inherit = (parent: Obj, extra?: Obj) => extend(Object.create(parent), extra);\n\n/** Given an array, returns true if the object is found in the array, (using indexOf) */\nexport const inArray: typeof _inArray = curry(_inArray) as any;\nexport function _inArray(array: any[], obj: any): boolean;\nexport function _inArray(array: any[]): (obj: any) => boolean;\nexport function _inArray(array, obj?): any {\n  return array.indexOf(obj) !== -1;\n}\n\n/**\n * Given an array, and an item, if the item is found in the array, it removes it (in-place).\n * The same array is returned\n */\nexport const removeFrom: typeof _removeFrom = curry(_removeFrom) as any;\nexport function _removeFrom<T>(array: T[], obj: T): T[];\nexport function _removeFrom<T>(array: T[]): (obj: T) => T[];\nexport function _removeFrom(array, obj?) {\n  const idx = array.indexOf(obj);\n  if (idx >= 0) array.splice(idx, 1);\n  return array;\n}\n\n/** pushes a values to an array and returns the value */\nexport const pushTo: typeof _pushTo = curry(_pushTo) as any;\nexport function _pushTo<T>(arr: T[], val: T): T;\nexport function _pushTo<T>(arr: T[]): (val: T) => T;\nexport function _pushTo(arr, val?): any {\n  return arr.push(val), val;\n}\n\n/** Given an array of (deregistration) functions, calls all functions and removes each one from the source array */\nexport const deregAll = (functions: Function[]) =>\n  functions.slice().forEach((fn) => {\n    typeof fn === 'function' && fn();\n    removeFrom(functions, fn);\n  });\n/**\n * Applies a set of defaults to an options object.  The options object is filtered\n * to only those properties of the objects in the defaultsList.\n * Earlier objects in the defaultsList take precedence when applying defaults.\n */\nexport function defaults(opts, ...defaultsList: Obj[]) {\n  const defaultVals = extend({}, ...defaultsList.reverse());\n  return extend(defaultVals, pick(opts || {}, Object.keys(defaultVals)));\n}\n\n/** Reduce function that merges each element of the list into a single object, using extend */\nexport const mergeR = (memo: Obj, item: Obj) => extend(memo, item);\n\n/**\n * Finds the common ancestor path between two states.\n *\n * @param {Object} first The first state.\n * @param {Object} second The second state.\n * @return {Array} Returns an array of state names in descending order, not including the root.\n */\nexport function ancestors(first: StateObject, second: StateObject) {\n  const path: StateObject[] = [];\n\n  // tslint:disable-next-line:forin\n  for (const n in first.path) {\n    if (first.path[n] !== second.path[n]) break;\n    path.push(first.path[n]);\n  }\n  return path;\n}\n\n/**\n * Return a copy of the object only containing the whitelisted properties.\n *\n * #### Example:\n * ```\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = pick(foo, ['a', 'b']); // { a: 1, b: 2 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the whitelisted property names\n */\nexport function pick(obj: Obj, propNames: string[]): Obj {\n  const objCopy = {};\n  for (const _prop in obj) {\n    if (propNames.indexOf(_prop) !== -1) {\n      objCopy[_prop] = obj[_prop];\n    }\n  }\n  return objCopy;\n}\n\n/**\n * Return a copy of the object omitting the blacklisted properties.\n *\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = omit(foo, ['a', 'b']); // { c: 3 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the blacklisted property names\n */\nexport function omit(obj: Obj, propNames: string[]): Obj {\n  return Object.keys(obj)\n    .filter(not(inArray(propNames)))\n    .reduce((acc, key) => ((acc[key] = obj[key]), acc), {});\n}\n\n/** Given an array of objects, maps each element to a named property of the element. */\nexport function pluck<T>(collection: Obj[], propName: string): T[];\n/** Given an object, maps each property of the object to a named property of the property. */\nexport function pluck(collection: { [key: string]: any }, propName: string): { [key: string]: any };\n/**\n * Maps an array, or object to a property (by name)\n */\nexport function pluck(collection: any, propName: string): any {\n  return map(collection, <Mapper<any, string>>prop(propName));\n}\n\n/** Given an array of objects, returns a new array containing only the elements which passed the callback predicate */\nexport function filter<T>(collection: T[], callback: (t: T, key?: number) => boolean): T[];\n/** Given an object, returns a new object with only those properties that passed the callback predicate */\nexport function filter<T>(collection: TypedMap<T>, callback: (t: T, key?: string) => boolean): TypedMap<T>;\n/** Filters an Array or an Object's properties based on a predicate */\nexport function filter<T>(collection: any, callback: Function): T {\n  const arr = isArray(collection),\n    result: any = arr ? [] : {};\n  const accept = arr ? (x) => result.push(x) : (x, key) => (result[key] = x);\n  forEach(collection, function (item, i) {\n    if (callback(item, i)) accept(item, i);\n  });\n  return <T>result;\n}\n\n/** Given an object, return the first property of that object which passed the callback predicate */\nexport function find<T>(collection: TypedMap<T>, callback: Predicate<T>): T;\n/** Given an array of objects, returns the first object which passed the callback predicate */\nexport function find<T>(collection: T[], callback: Predicate<T>): T;\n/** Finds an object from an array, or a property of an object, that matches a predicate */\nexport function find(collection: any, callback: any) {\n  let result;\n\n  forEach(collection, function (item, i) {\n    if (result) return;\n    if (callback(item, i)) result = item;\n  });\n\n  return result;\n}\n\n/** Given an object, returns a new object, where each property is transformed by the callback function */\nexport let mapObj: <T, U>(\n  collection: { [key: string]: T },\n  callback: Mapper<T, U>,\n  target?: typeof collection\n) => { [key: string]: U } = map;\n/** Given an array, returns a new array, where each element is transformed by the callback function */\nexport function map<T, U>(collection: T[], callback: Mapper<T, U>, target?: typeof collection): U[];\nexport function map<T, U>(\n  collection: { [key: string]: T },\n  callback: Mapper<T, U>,\n  target?: typeof collection\n): { [key: string]: U };\n/** Maps an array or object properties using a callback function */\nexport function map(collection: any, callback: any, target: typeof collection): any {\n  target = target || (isArray(collection) ? [] : {});\n  forEach(collection, (item, i) => (target[i] = callback(item, i)));\n  return target;\n}\n\n/**\n * Given an object, return its enumerable property values\n *\n * @example\n * ```\n *\n * let foo = { a: 1, b: 2, c: 3 }\n * let vals = values(foo); // [ 1, 2, 3 ]\n * ```\n */\nexport const values: <T>(obj: TypedMap<T>) => T[] = (obj: Obj) => Object.keys(obj).map((key) => obj[key]);\n\n/**\n * Reduce function that returns true if all of the values are truthy.\n *\n * @example\n * ```\n *\n * let vals = [ 1, true, {}, \"hello world\"];\n * vals.reduce(allTrueR, true); // true\n *\n * vals.push(0);\n * vals.reduce(allTrueR, true); // false\n * ```\n */\nexport const allTrueR = (memo: boolean, elem: any) => memo && elem;\n\n/**\n * Reduce function that returns true if any of the values are truthy.\n *\n *  * @example\n * ```\n *\n * let vals = [ 0, null, undefined ];\n * vals.reduce(anyTrueR, true); // false\n *\n * vals.push(\"hello world\");\n * vals.reduce(anyTrueR, true); // true\n * ```\n */\nexport const anyTrueR = (memo: boolean, elem: any) => memo || elem;\n\n/**\n * Reduce function which un-nests a single level of arrays\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexport const unnestR = (memo: any[], elem: any[]) => memo.concat(elem);\n\n/**\n * Reduce function which recursively un-nests all arrays\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexport const flattenR = (memo: any[], elem: any) =>\n  isArray(elem) ? memo.concat(elem.reduce(flattenR, [])) : pushR(memo, elem);\n\n/**\n * Reduce function that pushes an object to an array, then returns the array.\n * Mostly just for [[flattenR]] and [[uniqR]]\n */\nexport function pushR(arr: any[], obj: any) {\n  arr.push(obj);\n  return arr;\n}\n\n/** Reduce function that filters out duplicates */\nexport const uniqR = <T>(acc: T[], token: T): T[] => (inArray(acc, token) ? acc : pushR(acc, token));\n\n/**\n * Return a new array with a single level of arrays unnested.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * unnest(input) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexport const unnest = (arr: any[]) => arr.reduce(unnestR, []);\n/**\n * Return a completely flattened version of an array.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * flatten(input) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexport const flatten = (arr: any[]) => arr.reduce(flattenR, []);\n\n/**\n * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.\n * @example\n * ```\n *\n * let isNumber = (obj) => typeof(obj) === 'number';\n * let allNumbers = [ 1, 2, 3, 4, 5 ];\n * allNumbers.filter(assertPredicate(isNumber)); //OK\n *\n * let oneString = [ 1, 2, 3, 4, \"5\" ];\n * oneString.filter(assertPredicate(isNumber, \"Not all numbers\")); // throws Error(\"\"Not all numbers\"\");\n * ```\n */\nexport const assertPredicate: <T>(predicate: Predicate<T>, errMsg: string | Function) => Predicate<T> = assertFn;\n/**\n * Given a .map function, builds a .map function which throws an error if any mapped elements do not pass a truthyness test.\n * @example\n * ```\n *\n * var data = { foo: 1, bar: 2 };\n *\n * let keys = [ 'foo', 'bar' ]\n * let values = keys.map(assertMap(key => data[key], \"Key not found\"));\n * // values is [1, 2]\n *\n * let keys = [ 'foo', 'bar', 'baz' ]\n * let values = keys.map(assertMap(key => data[key], \"Key not found\"));\n * // throws Error(\"Key not found\")\n * ```\n */\nexport const assertMap: <T, U>(mapFn: (t: T) => U, errMsg: string | Function) => (t: T) => U = assertFn;\nexport function assertFn(predicateOrMap: Function, errMsg: string | Function = 'assert failure'): any {\n  return (obj) => {\n    const result = predicateOrMap(obj);\n    if (!result) {\n      throw new Error(isFunction(errMsg) ? (<Function>errMsg)(obj) : errMsg);\n    }\n    return result;\n  };\n}\n\n/**\n * Like _.pairs: Given an object, returns an array of key/value pairs\n *\n * @example\n * ```\n *\n * pairs({ foo: \"FOO\", bar: \"BAR }) // [ [ \"foo\", \"FOO\" ], [ \"bar\": \"BAR\" ] ]\n * ```\n */\nexport const pairs = (obj: Obj) => Object.keys(obj).map((key) => [key, obj[key]]);\n\n/**\n * Given two or more parallel arrays, returns an array of tuples where\n * each tuple is composed of [ a[i], b[i], ... z[i] ]\n *\n * @example\n * ```\n *\n * let foo = [ 0, 2, 4, 6 ];\n * let bar = [ 1, 3, 5, 7 ];\n * let baz = [ 10, 30, 50, 70 ];\n * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]\n * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]\n * ```\n */\nexport function arrayTuples(...args: any[]): any[] {\n  if (args.length === 0) return [];\n  const maxArrayLen = args.reduce((min, arr) => Math.min(arr.length, min), 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER\n  const result = [];\n\n  for (let i = 0; i < maxArrayLen; i++) {\n    // This is a hot function\n    // Unroll when there are 1-4 arguments\n    switch (args.length) {\n      case 1:\n        result.push([args[0][i]]);\n        break;\n      case 2:\n        result.push([args[0][i], args[1][i]]);\n        break;\n      case 3:\n        result.push([args[0][i], args[1][i], args[2][i]]);\n        break;\n      case 4:\n        result.push([args[0][i], args[1][i], args[2][i], args[3][i]]);\n        break;\n      default:\n        result.push(args.map((array) => array[i]));\n        break;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Reduce function which builds an object from an array of [key, value] pairs.\n *\n * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.\n *\n * Each keyValueTuple should be an array with values [ key: string, value: any ]\n *\n * @example\n * ```\n *\n * var pairs = [ [\"fookey\", \"fooval\"], [\"barkey\", \"barval\"] ]\n *\n * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n *\n * // Or, more simply:\n * var pairsToObj = pairs.reduce(applyPairs, {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n * ```\n */\nexport function applyPairs(memo: TypedMap<any>, keyValTuple: any[]) {\n  let key: string, value: any;\n  if (isArray(keyValTuple)) [key, value] = keyValTuple;\n  if (!isString(key)) throw new Error('invalid parameters to applyPairs');\n  memo[key] = value;\n  return memo;\n}\n\n/** Get the last element of an array */\nexport function tail<T>(arr: T[]): T {\n  return (arr.length && arr[arr.length - 1]) || undefined;\n}\n\n/**\n * shallow copy from src to dest\n */\nexport function copy(src: Obj, dest?: Obj) {\n  if (dest) Object.keys(dest).forEach((key) => delete dest[key]);\n  if (!dest) dest = {};\n  return extend(dest, src);\n}\n\n/** Naive forEach implementation works with Objects or Arrays */\nfunction _forEach(obj: any[] | any, cb: (el, idx?) => void, _this: Obj) {\n  if (isArray(obj)) return obj.forEach(cb, _this);\n  Object.keys(obj).forEach((key) => cb(obj[key], key));\n}\n\n/** Like Object.assign() */\nexport function _extend(toObj: Obj, ...fromObjs: Obj[]): any;\nexport function _extend(toObj: Obj): any {\n  for (let i = 1; i < arguments.length; i++) {\n    const obj = arguments[i];\n    if (!obj) continue;\n    const keys = Object.keys(obj);\n\n    for (let j = 0; j < keys.length; j++) {\n      toObj[keys[j]] = obj[keys[j]];\n    }\n  }\n\n  return toObj;\n}\n\nfunction _equals(o1: any, o2: any): boolean {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  const t1 = typeof o1,\n    t2 = typeof o2;\n  if (t1 !== t2 || t1 !== 'object') return false;\n\n  const tup = [o1, o2];\n  if (all(isArray)(tup)) return _arraysEq(o1, o2);\n  if (all(isDate)(tup)) return o1.getTime() === o2.getTime();\n  if (all(isRegExp)(tup)) return o1.toString() === o2.toString();\n  if (all(isFunction)(tup)) return true; // meh\n\n  const predicates = [isFunction, isArray, isDate, isRegExp];\n  if (predicates.map(any).reduce((b, fn) => b || !!fn(tup), false)) return false;\n\n  const keys: { [i: string]: boolean } = {};\n  // tslint:disable-next-line:forin\n  for (const key in o1) {\n    if (!_equals(o1[key], o2[key])) return false;\n    keys[key] = true;\n  }\n  for (const key in o2) {\n    if (!keys[key]) return false;\n  }\n\n  return true;\n}\n\nfunction _arraysEq(a1: any[], a2: any[]) {\n  if (a1.length !== a2.length) return false;\n  return arrayTuples(a1, a2).reduce((b, t) => b && _equals(t[0], t[1]), true);\n}\n\n// issue #2676\nexport const silenceUncaughtInPromise = (promise: Promise<any>) => promise.catch((e) => 0) && promise;\nexport const silentRejection = (error: any) => silenceUncaughtInPromise(services.$q.reject(error));\n",
    "'use strict';\nimport { extend, silentRejection } from '../common/common';\nimport { stringify } from '../common/strings';\nimport { is } from '../common/hof';\n\n/** An enum for Transition Rejection reasons */\nenum RejectType {\n  /**\n   * A new transition superseded this one.\n   *\n   * While this transition was running, a new transition started.\n   * This transition is cancelled because it was superseded by new transition.\n   */\n  SUPERSEDED = 2,\n\n  /**\n   * The transition was aborted\n   *\n   * The transition was aborted by a hook which returned `false`\n   */\n  ABORTED = 3,\n\n  /**\n   * The transition was invalid\n   *\n   * The transition was never started because it was invalid\n   */\n  INVALID = 4,\n\n  /**\n   * The transition was ignored\n   *\n   * The transition was ignored because it would have no effect.\n   *\n   * Either:\n   *\n   * - The transition is targeting the current state and parameter values\n   * - The transition is targeting the same state and parameter values as the currently running transition.\n   */\n  IGNORED = 5,\n\n  /**\n   * The transition errored.\n   *\n   * This generally means a hook threw an error or returned a rejected promise\n   */\n  ERROR = 6,\n}\n\nexport { RejectType };\n\n/** @internal */\nlet id = 0;\n\nexport class Rejection {\n  /** @internal */\n  $id = id++;\n  /**\n   * The type of the rejection.\n   *\n   * This value is an number representing the type of transition rejection.\n   * If using Typescript, this is a Typescript enum.\n   *\n   * - [[RejectType.SUPERSEDED]] (`2`)\n   * - [[RejectType.ABORTED]] (`3`)\n   * - [[RejectType.INVALID]] (`4`)\n   * - [[RejectType.IGNORED]] (`5`)\n   * - [[RejectType.ERROR]] (`6`)\n   *\n   */\n  type: RejectType;\n\n  /**\n   * A message describing the rejection\n   */\n  message: string;\n\n  /**\n   * A detail object\n   *\n   * This value varies based on the mechanism for rejecting the transition.\n   * For example, if an error was thrown from a hook, the `detail` will be the `Error` object.\n   * If a hook returned a rejected promise, the `detail` will be the rejected value.\n   */\n  detail: any;\n\n  /**\n   * Indicates if the transition was redirected.\n   *\n   * When a transition is redirected, the rejection [[type]] will be [[RejectType.SUPERSEDED]] and this flag will be true.\n   */\n  redirected: boolean;\n\n  /** Returns true if the obj is a rejected promise created from the `asPromise` factory */\n  static isRejectionPromise(obj: any): boolean {\n    return obj && typeof obj.then === 'function' && is(Rejection)(obj._transitionRejection);\n  }\n\n  /** Returns a Rejection due to transition superseded */\n  static superseded(detail?: any, options?: any): Rejection {\n    const message = 'The transition has been superseded by a different transition';\n    const rejection = new Rejection(RejectType.SUPERSEDED, message, detail);\n    if (options && options.redirected) {\n      rejection.redirected = true;\n    }\n    return rejection;\n  }\n\n  /** Returns a Rejection due to redirected transition */\n  static redirected(detail?: any): Rejection {\n    return Rejection.superseded(detail, { redirected: true });\n  }\n\n  /** Returns a Rejection due to invalid transition */\n  static invalid(detail?: any): Rejection {\n    const message = 'This transition is invalid';\n    return new Rejection(RejectType.INVALID, message, detail);\n  }\n\n  /** Returns a Rejection due to ignored transition */\n  static ignored(detail?: any): Rejection {\n    const message = 'The transition was ignored';\n    return new Rejection(RejectType.IGNORED, message, detail);\n  }\n\n  /** Returns a Rejection due to aborted transition */\n  static aborted(detail?: any): Rejection {\n    const message = 'The transition has been aborted';\n    return new Rejection(RejectType.ABORTED, message, detail);\n  }\n\n  /** Returns a Rejection due to aborted transition */\n  static errored(detail?: any): Rejection {\n    const message = 'The transition errored';\n    return new Rejection(RejectType.ERROR, message, detail);\n  }\n\n  /**\n   * Returns a Rejection\n   *\n   * Normalizes a value as a Rejection.\n   * If the value is already a Rejection, returns it.\n   * Otherwise, wraps and returns the value as a Rejection (Rejection type: ERROR).\n   *\n   * @returns `detail` if it is already a `Rejection`, else returns an ERROR Rejection.\n   */\n  static normalize(detail?: Rejection | Error | any): Rejection {\n    return is(Rejection)(detail) ? detail : Rejection.errored(detail);\n  }\n\n  constructor(type: number, message?: string, detail?: any) {\n    this.type = type;\n    this.message = message;\n    this.detail = detail;\n  }\n\n  toString() {\n    const detailString = (d: any) => (d && d.toString !== Object.prototype.toString ? d.toString() : stringify(d));\n    const detail = detailString(this.detail);\n    const { $id, type, message } = this;\n    return `Transition Rejection($id: ${$id} type: ${type}, message: ${message}, detail: ${detail})`;\n  }\n\n  toPromise(): Promise<any> {\n    return extend(silentRejection(this), { _transitionRejection: this });\n  }\n}\n",
    "/**\n * Matches state names using glob-like pattern strings.\n *\n * Globs can be used in specific APIs including:\n *\n * - [[StateService.is]]\n * - [[StateService.includes]]\n * - The first argument to Hook Registration functions like [[TransitionService.onStart]]\n *    - [[HookMatchCriteria]] and [[HookMatchCriterion]]\n *\n * A `Glob` string is a pattern which matches state names.\n * Nested state names are split into segments (separated by a dot) when processing.\n * The state named `foo.bar.baz` is split into three segments ['foo', 'bar', 'baz']\n *\n * Globs work according to the following rules:\n *\n * ### Exact match:\n *\n * The glob `'A.B'` matches the state named exactly `'A.B'`.\n *\n * | Glob        |Matches states named|Does not match state named|\n * |:------------|:--------------------|:---------------------|\n * | `'A'`       | `'A'`               | `'B'` , `'A.C'`      |\n * | `'A.B'`     | `'A.B'`             | `'A'` , `'A.B.C'`    |\n * | `'foo'`     | `'foo'`             | `'FOO'` , `'foo.bar'`|\n *\n * ### Single star (`*`)\n *\n * A single star (`*`) is a wildcard that matches exactly one segment.\n *\n * | Glob        |Matches states named  |Does not match state named |\n * |:------------|:---------------------|:--------------------------|\n * | `'*'`       | `'A'` , `'Z'`        | `'A.B'` , `'Z.Y.X'`       |\n * | `'A.*'`     | `'A.B'` , `'A.C'`    | `'A'` , `'A.B.C'`         |\n * | `'A.*.*'`   | `'A.B.C'` , `'A.X.Y'`| `'A'`, `'A.B'` , `'Z.Y.X'`|\n *\n * ### Double star (`**`)\n *\n * A double star (`'**'`) is a wildcard that matches *zero or more segments*\n *\n * | Glob        |Matches states named                           |Does not match state named         |\n * |:------------|:----------------------------------------------|:----------------------------------|\n * | `'**'`      | `'A'` , `'A.B'`, `'Z.Y.X'`                    | (matches all states)              |\n * | `'A.**'`    | `'A'` , `'A.B'` , `'A.C.X'`                   | `'Z.Y.X'`                         |\n * | `'**.X'`    | `'X'` , `'A.X'` , `'Z.Y.X'`                   | `'A'` , `'A.login.Z'`             |\n * | `'A.**.X'`  | `'A.X'` , `'A.B.X'` , `'A.B.C.X'`             | `'A'` , `'A.B.C'`                 |\n *\n * @packageDocumentation\n */\nexport class Glob {\n  text: string;\n  glob: Array<string>;\n  regexp: RegExp;\n\n  /** Returns true if the string has glob-like characters in it */\n  static is(text: string) {\n    return !!/[!,*]+/.exec(text);\n  }\n\n  /** Returns a glob from the string, or null if the string isn't Glob-like */\n  static fromString(text: string) {\n    return Glob.is(text) ? new Glob(text) : null;\n  }\n\n  constructor(text: string) {\n    this.text = text;\n    this.glob = text.split('.');\n\n    const regexpString = this.text\n      .split('.')\n      .map((seg) => {\n        if (seg === '**') return '(?:|(?:\\\\.[^.]*)*)';\n        if (seg === '*') return '\\\\.[^.]*';\n        return '\\\\.' + seg;\n      })\n      .join('');\n\n    this.regexp = new RegExp('^' + regexpString + '$');\n  }\n\n  matches(name: string) {\n    return this.regexp.test('.' + name);\n  }\n}\n",
    "import { pushTo } from './common';\n\nexport class Queue<T> {\n  private _evictListeners: ((item: T) => void)[] = [];\n  public onEvict = pushTo(this._evictListeners);\n\n  constructor(private _items: T[] = [], private _limit: number = null) {}\n\n  enqueue(item: T) {\n    const items = this._items;\n    items.push(item);\n    if (this._limit && items.length > this._limit) this.evict();\n    return item;\n  }\n\n  evict(): T {\n    const item: T = this._items.shift();\n    this._evictListeners.forEach((fn) => fn(item));\n    return item;\n  }\n\n  dequeue(): T {\n    if (this.size()) return this._items.splice(0, 1)[0];\n  }\n\n  clear(): Array<T> {\n    const current = this._items;\n    this._items = [];\n    return current;\n  }\n\n  size(): number {\n    return this._items.length;\n  }\n\n  remove(item: T) {\n    const idx = this._items.indexOf(item);\n    return idx > -1 && this._items.splice(idx, 1)[0];\n  }\n\n  peekTail(): T {\n    return this._items[this._items.length - 1];\n  }\n\n  peekHead(): T {\n    if (this.size()) return this._items[0];\n  }\n}\n",
    "/**\n * Functions that manipulate strings\n *\n * Although these functions are exported, they are subject to change without notice.\n *\n * @packageDocumentation\n */\n\nimport { isArray, isFunction, isInjectable, isNull, isObject, isPromise, isString, isUndefined } from './predicates';\nimport { Rejection } from '../transition/rejectFactory';\nimport { identity, IInjectable, pushR, tail } from './common';\nimport { pattern, val } from './hof';\n\n/**\n * Returns a string shortened to a maximum length\n *\n * If the string is already less than the `max` length, return the string.\n * Else return the string, shortened to `max - 3` and append three dots (\"...\").\n *\n * @param max the maximum length of the string to return\n * @param str the input string\n */\nexport function maxLength(max: number, str: string) {\n  if (str.length <= max) return str;\n  return str.substr(0, max - 3) + '...';\n}\n\n/**\n * Returns a string, with spaces added to the end, up to a desired str length\n *\n * If the string is already longer than the desired length, return the string.\n * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\n *\n * @param length the desired length of the string to return\n * @param str the input string\n */\nexport function padString(length: number, str: string) {\n  while (str.length < length) str += ' ';\n  return str;\n}\n\nexport function kebobString(camelCase: string) {\n  return camelCase\n    .replace(/^([A-Z])/, ($1) => $1.toLowerCase()) // replace first char\n    .replace(/([A-Z])/g, ($1) => '-' + $1.toLowerCase()); // replace rest\n}\n\nexport function functionToString(fn: Function) {\n  const fnStr = fnToString(fn);\n  const namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\n  const toStr = namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\n\n  const fnName = fn['name'] || '';\n  if (fnName && toStr.match(/function \\(/)) {\n    return 'function ' + fnName + toStr.substr(9);\n  }\n  return toStr;\n}\n\nexport function fnToString(fn: IInjectable) {\n  const _fn = isArray(fn) ? fn.slice(-1)[0] : fn;\n  return (_fn && _fn.toString()) || 'undefined';\n}\n\nconst isRejection = Rejection.isRejectionPromise;\nconst hasToString = (obj: any) =>\n  isObject(obj) && !isArray(obj) && obj.constructor !== Object && isFunction(obj.toString);\n\nconst stringifyPattern = pattern([\n  [isUndefined, val('undefined')],\n  [isNull, val('null')],\n  [isPromise, val('[Promise]')],\n  [isRejection, (x: any) => x._transitionRejection.toString()],\n  [hasToString, (x: object) => x.toString()],\n  [isInjectable, functionToString],\n  [val(true), identity],\n]) as (val: any) => string;\n\nexport function stringify(o: any) {\n  const seen: any[] = [];\n\n  function format(value: any) {\n    if (isObject(value)) {\n      if (seen.indexOf(value) !== -1) return '[circular ref]';\n      seen.push(value);\n    }\n    return stringifyPattern(value);\n  }\n\n  if (isUndefined(o)) {\n    // Workaround for IE & Edge Spec incompatibility where replacer function would not be called when JSON.stringify\n    // is given `undefined` as value. To work around that, we simply detect `undefined` and bail out early by\n    // manually stringifying it.\n    return format(o);\n  }\n\n  return JSON.stringify(o, (key, value) => format(value)).replace(/\\\\\"/g, '\"');\n}\n\n/** Returns a function that splits a string on a character or substring */\nexport const beforeAfterSubstr = (char: string) => (str: string): string[] => {\n  if (!str) return ['', ''];\n  const idx = str.indexOf(char);\n  if (idx === -1) return [str, ''];\n  return [str.substr(0, idx), str.substr(idx + 1)];\n};\n\nexport const hostRegex = new RegExp('^(?:[a-z]+:)?//[^/]+/');\nexport const stripLastPathElement = (str: string) => str.replace(/\\/[^/]*$/, '');\nexport const splitHash = beforeAfterSubstr('#');\nexport const splitQuery = beforeAfterSubstr('?');\nexport const splitEqual = beforeAfterSubstr('=');\nexport const trimHashVal = (str: string) => (str ? str.replace(/^#/, '') : '');\n\n/**\n * Splits on a delimiter, but returns the delimiters in the array\n *\n * #### Example:\n * ```js\n * var splitOnSlashes = splitOnDelim('/');\n * splitOnSlashes(\"/foo\"); // [\"/\", \"foo\"]\n * splitOnSlashes(\"/foo/\"); // [\"/\", \"foo\", \"/\"]\n * ```\n */\nexport function splitOnDelim(delim: string) {\n  const re = new RegExp('(' + delim + ')', 'g');\n  return (str: string) => str.split(re).filter(identity);\n}\n\n/**\n * Reduce fn that joins neighboring strings\n *\n * Given an array of strings, returns a new array\n * where all neighboring strings have been joined.\n *\n * #### Example:\n * ```js\n * let arr = [\"foo\", \"bar\", 1, \"baz\", \"\", \"qux\" ];\n * arr.reduce(joinNeighborsR, []) // [\"foobar\", 1, \"bazqux\" ]\n * ```\n */\nexport function joinNeighborsR(acc: any[], x: any) {\n  if (isString(tail(acc)) && isString(x)) return acc.slice(0, -1).concat(tail(acc) + x);\n  return pushR(acc, x);\n}\n",
    "/**\n * workaround for missing console object in IE9 when dev tools haven't been opened o_O\n * @packageDocumentation\n */\n/* tslint:disable:no-console */\nimport { noop } from './common';\n\nconst noopConsoleStub = { log: noop, error: noop, table: noop };\n\nfunction ie9Console(console) {\n  const bound = (fn: Function) => Function.prototype.bind.call(fn, console);\n  return {\n    log: bound(console.log),\n    error: bound(console.log),\n    table: bound(console.log),\n  };\n}\n\nfunction fallbackConsole(console) {\n  const log = console.log.bind(console);\n  const error = console.error ? console.error.bind(console) : log;\n  const table = console.table ? console.table.bind(console) : log;\n  return { log, error, table };\n}\n\nfunction getSafeConsole() {\n  // @ts-ignore\n  const isIE9 = typeof document !== 'undefined' && document.documentMode && document.documentMode === 9;\n  if (isIE9) {\n    return window && window.console ? ie9Console(window.console) : noopConsoleStub;\n  } else if (!console.table || !console.error) {\n    return fallbackConsole(console);\n  } else {\n    return console;\n  }\n}\n\nexport const safeConsole = getSafeConsole();\n",
    "/**\n * # Transition tracing (debug)\n *\n * Enable transition tracing to print transition information to the console,\n * in order to help debug your application.\n * Tracing logs detailed information about each Transition to your console.\n *\n * To enable tracing, import the [[Trace]] singleton and enable one or more categories.\n *\n * ### ES6\n * ```js\n * import {trace} from \"@uirouter/core\";\n * trace.enable(1, 5); // TRANSITION and VIEWCONFIG\n * ```\n *\n * ### CJS\n * ```js\n * let trace = require(\"@uirouter/core\").trace;\n * trace.enable(\"TRANSITION\", \"VIEWCONFIG\");\n * ```\n *\n * ### Globals\n * ```js\n * let trace = window[\"@uirouter/core\"].trace;\n * trace.enable(); // Trace everything (very verbose)\n * ```\n *\n * ### Angular 1:\n * ```js\n * app.run($trace => $trace.enable());\n * ```\n *\n * @packageDocumentation\n */\nimport { parse } from '../common/hof';\nimport { isNumber } from '../common/predicates';\nimport { Transition } from '../transition/transition';\nimport { ViewTuple } from '../view';\nimport { ActiveUIView, ViewConfig, ViewContext } from '../view/interface';\nimport { stringify, functionToString, maxLength, padString } from './strings';\nimport { safeConsole } from './safeConsole';\nimport { Resolvable } from '../resolve/resolvable';\nimport { PathNode } from '../path/pathNode';\nimport { PolicyWhen } from '../resolve/interface';\nimport { TransitionHook } from '../transition/transitionHook';\nimport { HookResult } from '../transition/interface';\nimport { StateObject } from '../state/stateObject';\n\nfunction uiViewString(uiview: ActiveUIView) {\n  if (!uiview) return 'ui-view (defunct)';\n  const state = uiview.creationContext ? uiview.creationContext.name || '(root)' : '(none)';\n  return `[ui-view#${uiview.id} ${uiview.$type}:${uiview.fqn} (${uiview.name}@${state})]`;\n}\n\nconst viewConfigString = (viewConfig: ViewConfig) => {\n  const view = viewConfig.viewDecl;\n  const state = view.$context.name || '(root)';\n  return `[View#${viewConfig.$id} from '${state}' state]: target ui-view: '${view.$uiViewName}@${view.$uiViewContextAnchor}'`;\n};\n\nfunction normalizedCat(input: Category | string): string {\n  return isNumber(input) ? Category[input] : Category[Category[input]];\n}\n\n/**\n * Trace categories Enum\n *\n * Enable or disable a category using [[Trace.enable]] or [[Trace.disable]]\n *\n * `trace.enable(Category.TRANSITION)`\n *\n * These can also be provided using a matching string, or position ordinal\n *\n * `trace.enable(\"TRANSITION\")`\n *\n * `trace.enable(1)`\n */\nenum Category {\n  RESOLVE,\n  TRANSITION,\n  HOOK,\n  UIVIEW,\n  VIEWCONFIG,\n}\n\nexport { Category };\n\nconst _tid = parse('$id');\nconst _rid = parse('router.$id');\n\nconst transLbl = (trans) => `Transition #${_tid(trans)}-${_rid(trans)}`;\n\n/**\n * Prints UI-Router Transition trace information to the console.\n */\nexport class Trace {\n  /** @internal */\n  approximateDigests: number;\n\n  /** @internal */\n  private _enabled: { [key: string]: boolean } = {};\n\n  /** @internal */\n  constructor() {\n    this.approximateDigests = 0;\n  }\n\n  /** @internal */\n  private _set(enabled: boolean, categories: Category[]) {\n    if (!categories.length) {\n      categories = <any>Object.keys(Category)\n        .map((k) => parseInt(k, 10))\n        .filter((k) => !isNaN(k))\n        .map((key) => Category[key]);\n    }\n    categories.map(normalizedCat).forEach((category) => (this._enabled[category] = enabled));\n  }\n\n  /**\n   * Enables a trace [[Category]]\n   *\n   * ```js\n   * trace.enable(\"TRANSITION\");\n   * ```\n   *\n   * @param categories categories to enable. If `categories` is omitted, all categories are enabled.\n   *        Also takes strings (category name) or ordinal (category position)\n   */\n  enable(...categories: (Category | string | number)[]);\n  enable(...categories: any[]) {\n    this._set(true, categories);\n  }\n  /**\n   * Disables a trace [[Category]]\n   *\n   * ```js\n   * trace.disable(\"VIEWCONFIG\");\n   * ```\n   *\n   * @param categories categories to disable. If `categories` is omitted, all categories are disabled.\n   *        Also takes strings (category name) or ordinal (category position)\n   */\n  disable(...categories: (Category | string | number)[]);\n  disable(...categories: any[]) {\n    this._set(false, categories);\n  }\n\n  /**\n   * Retrieves the enabled stateus of a [[Category]]\n   *\n   * ```js\n   * trace.enabled(\"VIEWCONFIG\"); // true or false\n   * ```\n   *\n   * @returns boolean true if the category is enabled\n   */\n  enabled(category: Category | string | number): boolean {\n    return !!this._enabled[normalizedCat(category)];\n  }\n\n  /** @internal called by ui-router code */\n  traceTransitionStart(trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    safeConsole.log(`${transLbl(trans)}: Started  -> ${stringify(trans)}`);\n  }\n\n  /** @internal called by ui-router code */\n  traceTransitionIgnored(trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    safeConsole.log(`${transLbl(trans)}: Ignored  <> ${stringify(trans)}`);\n  }\n\n  /** @internal called by ui-router code */\n  traceHookInvocation(step: TransitionHook, trans: Transition, options: any) {\n    if (!this.enabled(Category.HOOK)) return;\n    const event = parse('traceData.hookType')(options) || 'internal',\n      context = parse('traceData.context.state.name')(options) || parse('traceData.context')(options) || 'unknown',\n      name = functionToString((step as any).registeredHook.callback);\n    safeConsole.log(`${transLbl(trans)}:   Hook -> ${event} context: ${context}, ${maxLength(200, name)}`);\n  }\n\n  /** @internal called by ui-router code */\n  traceHookResult(hookResult: HookResult, trans: Transition, transitionOptions: any) {\n    if (!this.enabled(Category.HOOK)) return;\n    safeConsole.log(`${transLbl(trans)}:   <- Hook returned: ${maxLength(200, stringify(hookResult))}`);\n  }\n\n  /** @internal called by ui-router code */\n  traceResolvePath(path: PathNode[], when: PolicyWhen, trans?: Transition) {\n    if (!this.enabled(Category.RESOLVE)) return;\n    safeConsole.log(`${transLbl(trans)}:         Resolving ${path} (${when})`);\n  }\n\n  /** @internal called by ui-router code */\n  traceResolvableResolved(resolvable: Resolvable, trans?: Transition) {\n    if (!this.enabled(Category.RESOLVE)) return;\n    safeConsole.log(\n      `${transLbl(trans)}:               <- Resolved  ${resolvable} to: ${maxLength(200, stringify(resolvable.data))}`\n    );\n  }\n\n  /** @internal called by ui-router code */\n  traceError(reason: any, trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    safeConsole.log(`${transLbl(trans)}: <- Rejected ${stringify(trans)}, reason: ${reason}`);\n  }\n\n  /** @internal called by ui-router code */\n  traceSuccess(finalState: StateObject, trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    safeConsole.log(`${transLbl(trans)}: <- Success  ${stringify(trans)}, final state: ${finalState.name}`);\n  }\n\n  /** @internal called by ui-router code */\n  traceUIViewEvent(event: string, viewData: ActiveUIView, extra = '') {\n    if (!this.enabled(Category.UIVIEW)) return;\n    safeConsole.log(`ui-view: ${padString(30, event)} ${uiViewString(viewData)}${extra}`);\n  }\n\n  /** @internal called by ui-router code */\n  traceUIViewConfigUpdated(viewData: ActiveUIView, context: ViewContext) {\n    if (!this.enabled(Category.UIVIEW)) return;\n    this.traceUIViewEvent('Updating', viewData, ` with ViewConfig from context='${context}'`);\n  }\n\n  /** @internal called by ui-router code */\n  traceUIViewFill(viewData: ActiveUIView, html: string) {\n    if (!this.enabled(Category.UIVIEW)) return;\n    this.traceUIViewEvent('Fill', viewData, ` with: ${maxLength(200, html)}`);\n  }\n\n  /** @internal called by ui-router code */\n  traceViewSync(pairs: ViewTuple[]) {\n    if (!this.enabled(Category.VIEWCONFIG)) return;\n    const uivheader = 'uiview component fqn';\n    const cfgheader = 'view config state (view name)';\n    const mapping = pairs\n      .map(({ uiView, viewConfig }) => {\n        const uiv = uiView && uiView.fqn;\n        const cfg = viewConfig && `${viewConfig.viewDecl.$context.name}: (${viewConfig.viewDecl.$name})`;\n        return { [uivheader]: uiv, [cfgheader]: cfg };\n      })\n      .sort((a, b) => (a[uivheader] || '').localeCompare(b[uivheader] || ''));\n\n    safeConsole.table(mapping);\n  }\n\n  /** @internal called by ui-router code */\n  traceViewServiceEvent(event: string, viewConfig: ViewConfig) {\n    if (!this.enabled(Category.VIEWCONFIG)) return;\n    safeConsole.log(`VIEWCONFIG: ${event} ${viewConfigString(viewConfig)}`);\n  }\n\n  /** @internal called by ui-router code */\n  traceViewServiceUIViewEvent(event: string, viewData: ActiveUIView) {\n    if (!this.enabled(Category.VIEWCONFIG)) return;\n    safeConsole.log(`VIEWCONFIG: ${event} ${uiViewString(viewData)}`);\n  }\n}\n\n/**\n * The [[Trace]] singleton\n *\n * #### Example:\n * ```js\n * import {trace} from \"@uirouter/core\";\n * trace.enable(1, 5);\n * ```\n */\nconst trace = new Trace();\nexport { trace };\n",
    "import { extend, filter, map } from '../common/common';\nimport { isArray, isDefined } from '../common/predicates';\nimport { ParamTypeDefinition } from './interface';\n\n/**\n * An internal class which implements [[ParamTypeDefinition]].\n *\n * A [[ParamTypeDefinition]] is a plain javascript object used to register custom parameter types.\n * When a param type definition is registered, an instance of this class is created internally.\n *\n * This class has naive implementations for all the [[ParamTypeDefinition]] methods.\n *\n * Used by [[UrlMatcher]] when matching or formatting URLs, or comparing and validating parameter values.\n *\n * #### Example:\n * ```js\n * var paramTypeDef = {\n *   decode: function(val) { return parseInt(val, 10); },\n *   encode: function(val) { return val && val.toString(); },\n *   equals: function(a, b) { return this.is(a) && a === b; },\n *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },\n *   pattern: /\\d+/\n * }\n *\n * var paramType = new ParamType(paramTypeDef);\n * ```\n */\nexport class ParamType implements ParamTypeDefinition {\n  /** @inheritdoc */\n  pattern: RegExp = /.*/;\n  /** The name/id of the parameter type */\n  name: string;\n  /** @inheritdoc */\n  raw: boolean;\n  /** @inheritdoc */\n  dynamic: boolean;\n  /** @inheritdoc */\n  inherit = true;\n\n  /**\n   * @param def  A configuration object which contains the custom type definition.  The object's\n   *        properties will override the default methods and/or pattern in `ParamType`'s public interface.\n   * @returns a new ParamType object\n   */\n  constructor(def: ParamTypeDefinition) {\n    extend(this, def);\n  }\n\n  // consider these four methods to be \"abstract methods\" that should be overridden\n  /** @inheritdoc */\n  is(val: any, key?: string): boolean {\n    return true;\n  }\n  /** @inheritdoc */\n  encode(val: any, key?: string): string | string[] {\n    return val;\n  }\n  /** @inheritdoc */\n  decode(val: string, key?: string): any {\n    return val;\n  }\n  /** @inheritdoc */\n  equals(a: any, b: any): boolean {\n    // tslint:disable-next-line:triple-equals\n    return a == b;\n  }\n\n  $subPattern() {\n    const sub = this.pattern.toString();\n    return sub.substr(1, sub.length - 2);\n  }\n\n  toString() {\n    return `{ParamType:${this.name}}`;\n  }\n\n  /** Given an encoded string, or a decoded object, returns a decoded object */\n  $normalize(val: any) {\n    return this.is(val) ? val : this.decode(val);\n  }\n\n  /**\n   * Wraps an existing custom ParamType as an array of ParamType, depending on 'mode'.\n   * e.g.:\n   * - urlmatcher pattern \"/path?{queryParam[]:int}\"\n   * - url: \"/path?queryParam=1&queryParam=2\n   * - $stateParams.queryParam will be [1, 2]\n   * if `mode` is \"auto\", then\n   * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1\n   * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\n   */\n  $asArray(mode: boolean | 'auto', isSearch: boolean) {\n    if (!mode) return this;\n    if (mode === 'auto' && !isSearch) throw new Error(\"'auto' array mode is for query parameters only\");\n    return new (<any>ArrayType)(this, mode);\n  }\n}\n\n/** Wraps up a `ParamType` object to handle array values. */\nfunction ArrayType(type: ParamType, mode: boolean | 'auto') {\n  // Wrap non-array value as array\n  function arrayWrap(val: any): any[] {\n    return isArray(val) ? val : isDefined(val) ? [val] : [];\n  }\n\n  // Unwrap array value for \"auto\" mode. Return undefined for empty array.\n  function arrayUnwrap(val: any) {\n    switch (val.length) {\n      case 0:\n        return undefined;\n      case 1:\n        return mode === 'auto' ? val[0] : val;\n      default:\n        return val;\n    }\n  }\n\n  // Wraps type (.is/.encode/.decode) functions to operate on each value of an array\n  function arrayHandler(callback: (x: any) => any, allTruthyMode?: boolean) {\n    return function handleArray(val: any) {\n      if (isArray(val) && val.length === 0) return val;\n      const arr = arrayWrap(val);\n      const result = map(arr, callback);\n      return allTruthyMode === true ? filter(result, (x) => !x).length === 0 : arrayUnwrap(result);\n    };\n  }\n\n  // Wraps type (.equals) functions to operate on each value of an array\n  function arrayEqualsHandler(callback: (l: any, r: any) => boolean) {\n    return function handleArray(val1: any, val2: any) {\n      const left = arrayWrap(val1),\n        right = arrayWrap(val2);\n      if (left.length !== right.length) return false;\n      for (let i = 0; i < left.length; i++) {\n        if (!callback(left[i], right[i])) return false;\n      }\n      return true;\n    };\n  }\n\n  ['encode', 'decode', 'equals', '$normalize'].forEach((name) => {\n    const paramTypeFn = type[name].bind(type);\n    const wrapperFn: Function = name === 'equals' ? arrayEqualsHandler : arrayHandler;\n    this[name] = wrapperFn(paramTypeFn);\n  });\n\n  extend(this, {\n    dynamic: type.dynamic,\n    name: type.name,\n    pattern: type.pattern,\n    inherit: type.inherit,\n    raw: type.raw,\n    is: arrayHandler(type.is.bind(type), true),\n    $arrayMode: mode,\n  });\n}\n",
    "import { extend, filter, map, allTrueR, find } from '../common/common';\nimport { prop } from '../common/hof';\nimport { isInjectable, isDefined, isString, isArray, isUndefined } from '../common/predicates';\nimport { RawParams, ParamDeclaration } from '../params/interface';\nimport { services } from '../common/coreservices';\nimport { ParamType } from './paramType';\nimport { ParamTypes } from './paramTypes';\nimport { StateDeclaration } from '../state';\nimport { UrlConfig } from '../url';\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nconst isShorthand = (cfg: ParamDeclaration) =>\n  ['value', 'type', 'squash', 'array', 'dynamic'].filter(hasOwn.bind(cfg || {})).length === 0;\n\nenum DefType {\n  PATH,\n  SEARCH,\n  CONFIG,\n}\nexport { DefType };\n\nfunction getParamDeclaration(paramName: string, location: DefType, state: StateDeclaration): ParamDeclaration {\n  const noReloadOnSearch = (state.reloadOnSearch === false && location === DefType.SEARCH) || undefined;\n  const dynamic = find([state.dynamic, noReloadOnSearch], isDefined);\n  const defaultConfig = isDefined(dynamic) ? { dynamic } : {};\n  const paramConfig = unwrapShorthand(state && state.params && state.params[paramName]);\n  return extend(defaultConfig, paramConfig);\n}\n\nfunction unwrapShorthand(cfg: ParamDeclaration): ParamDeclaration {\n  cfg = isShorthand(cfg) ? ({ value: cfg } as ParamDeclaration) : cfg;\n\n  getStaticDefaultValue['__cacheable'] = true;\n  function getStaticDefaultValue() {\n    return cfg.value;\n  }\n\n  const $$fn = isInjectable(cfg.value) ? cfg.value : getStaticDefaultValue;\n  return extend(cfg, { $$fn });\n}\n\nfunction getType(cfg: ParamDeclaration, urlType: ParamType, location: DefType, id: string, paramTypes: ParamTypes) {\n  if (cfg.type && urlType && urlType.name !== 'string') throw new Error(`Param '${id}' has two type configurations.`);\n  if (cfg.type && urlType && urlType.name === 'string' && paramTypes.type(cfg.type as string))\n    return paramTypes.type(cfg.type as string);\n  if (urlType) return urlType;\n  if (!cfg.type) {\n    const type =\n      location === DefType.CONFIG\n        ? 'any'\n        : location === DefType.PATH\n        ? 'path'\n        : location === DefType.SEARCH\n        ? 'query'\n        : 'string';\n    return paramTypes.type(type);\n  }\n  return cfg.type instanceof ParamType ? cfg.type : paramTypes.type(cfg.type as string);\n}\n\n/** returns false, true, or the squash value to indicate the \"default parameter url squash policy\". */\nfunction getSquashPolicy(config: ParamDeclaration, isOptional: boolean, defaultPolicy: boolean | string) {\n  const squash = config.squash;\n  if (!isOptional || squash === false) return false;\n  if (!isDefined(squash) || squash == null) return defaultPolicy;\n  if (squash === true || isString(squash)) return squash;\n  throw new Error(`Invalid squash policy: '${squash}'. Valid policies: false, true, or arbitrary string`);\n}\n\nfunction getReplace(config: ParamDeclaration, arrayMode: boolean, isOptional: boolean, squash: string | boolean) {\n  const defaultPolicy = [\n    { from: '', to: isOptional || arrayMode ? undefined : '' },\n    { from: null, to: isOptional || arrayMode ? undefined : '' },\n  ];\n\n  const replace = isArray(config.replace) ? config.replace : [];\n  if (isString(squash)) replace.push({ from: squash, to: undefined });\n\n  const configuredKeys = map(replace, prop('from'));\n  return filter(defaultPolicy, (item) => configuredKeys.indexOf(item.from) === -1).concat(replace);\n}\n\nexport class Param {\n  id: string;\n  type: ParamType;\n  location: DefType;\n  isOptional: boolean;\n  dynamic: boolean;\n  raw: boolean;\n  squash: boolean | string;\n  replace: [{ to: any; from: any }];\n  inherit: boolean;\n  array: boolean;\n  config: any;\n  /** Cache the default value if it is a static value */\n  _defaultValueCache: {\n    defaultValue: any;\n  };\n\n  static values(params: Param[], values: RawParams = {}): RawParams {\n    const paramValues = {} as RawParams;\n    for (const param of params) {\n      paramValues[param.id] = param.value(values[param.id]);\n    }\n    return paramValues;\n  }\n\n  /**\n   * Finds [[Param]] objects which have different param values\n   *\n   * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects\n   *\n   * @param params: The list of Param objects to filter\n   * @param values1: The first set of parameter values\n   * @param values2: the second set of parameter values\n   *\n   * @returns any Param objects whose values were different between values1 and values2\n   */\n  static changed(params: Param[], values1: RawParams = {}, values2: RawParams = {}): Param[] {\n    return params.filter((param) => !param.type.equals(values1[param.id], values2[param.id]));\n  }\n\n  /**\n   * Checks if two param value objects are equal (for a set of [[Param]] objects)\n   *\n   * @param params The list of [[Param]] objects to check\n   * @param values1 The first set of param values\n   * @param values2 The second set of param values\n   *\n   * @returns true if the param values in values1 and values2 are equal\n   */\n  static equals(params: Param[], values1 = {}, values2 = {}): boolean {\n    return Param.changed(params, values1, values2).length === 0;\n  }\n\n  /** Returns true if a the parameter values are valid, according to the Param definitions */\n  static validates(params: Param[], values: RawParams = {}): boolean {\n    return params.map((param) => param.validates(values[param.id])).reduce(allTrueR, true);\n  }\n\n  constructor(id: string, type: ParamType, location: DefType, urlConfig: UrlConfig, state: StateDeclaration) {\n    const config: ParamDeclaration = getParamDeclaration(id, location, state);\n    type = getType(config, type, location, id, urlConfig.paramTypes);\n    const arrayMode = getArrayMode();\n    type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;\n    const isOptional = config.value !== undefined || location === DefType.SEARCH;\n    const dynamic = isDefined(config.dynamic) ? !!config.dynamic : !!type.dynamic;\n    const raw = isDefined(config.raw) ? !!config.raw : !!type.raw;\n    const squash = getSquashPolicy(config, isOptional, urlConfig.defaultSquashPolicy());\n    const replace = getReplace(config, arrayMode, isOptional, squash);\n    const inherit = isDefined(config.inherit) ? !!config.inherit : !!type.inherit;\n\n    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\n    function getArrayMode() {\n      const arrayDefaults = { array: location === DefType.SEARCH ? 'auto' : false };\n      const arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\n      return extend(arrayDefaults, arrayParamNomenclature, config).array;\n    }\n\n    extend(this, { id, type, location, isOptional, dynamic, raw, squash, replace, inherit, array: arrayMode, config });\n  }\n\n  isDefaultValue(value: any): boolean {\n    return this.isOptional && this.type.equals(this.value(), value);\n  }\n\n  /**\n   * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\n   * default value, which may be the result of an injectable function.\n   */\n  value(value?: any): any {\n    /**\n     * [Internal] Get the default value of a parameter, which may be an injectable function.\n     */\n    const getDefaultValue = () => {\n      if (this._defaultValueCache) return this._defaultValueCache.defaultValue;\n\n      if (!services.$injector) throw new Error('Injectable functions cannot be called at configuration time');\n\n      const defaultValue = services.$injector.invoke(this.config.$$fn);\n\n      if (defaultValue !== null && defaultValue !== undefined && !this.type.is(defaultValue))\n        throw new Error(\n          `Default value (${defaultValue}) for parameter '${this.id}' is not an instance of ParamType (${this.type.name})`\n        );\n\n      if (this.config.$$fn['__cacheable']) {\n        this._defaultValueCache = { defaultValue };\n      }\n\n      return defaultValue;\n    };\n\n    const replaceSpecialValues = (val: any) => {\n      for (const tuple of this.replace) {\n        if (tuple.from === val) return tuple.to;\n      }\n      return val;\n    };\n\n    value = replaceSpecialValues(value);\n\n    return isUndefined(value) ? getDefaultValue() : this.type.$normalize(value);\n  }\n\n  isSearch(): boolean {\n    return this.location === DefType.SEARCH;\n  }\n\n  validates(value: any): boolean {\n    // There was no parameter value, but the param is optional\n    if ((isUndefined(value) || value === null) && this.isOptional) return true;\n\n    // The value was not of the correct ParamType, and could not be decoded to the correct ParamType\n    const normalized = this.type.$normalize(value);\n    if (!this.type.is(normalized)) return false;\n\n    // The value was of the correct type, but when encoded, did not match the ParamType's regexp\n    const encoded = this.type.encode(normalized);\n    return !(isString(encoded) && !this.type.pattern.exec(<string>encoded));\n  }\n\n  toString() {\n    return `{Param:${this.id} ${this.type} squash: '${this.squash}' optional: ${this.isOptional}}`;\n  }\n}\n",
    "import { fromJson, toJson, identity, equals, inherit, map, extend, pick } from '../common/common';\nimport { isDefined, isNullOrUndefined } from '../common/predicates';\nimport { is } from '../common/hof';\nimport { services } from '../common/coreservices';\nimport { ParamType } from './paramType';\nimport { ParamTypeDefinition } from './interface';\n\n/**\n * A registry for parameter types.\n *\n * This registry manages the built-in (and custom) parameter types.\n *\n * The built-in parameter types are:\n *\n * - [[string]]\n * - [[path]]\n * - [[query]]\n * - [[hash]]\n * - [[int]]\n * - [[bool]]\n * - [[date]]\n * - [[json]]\n * - [[any]]\n *\n * To register custom parameter types, use [[UrlConfig.type]], i.e.,\n *\n * ```js\n * router.urlService.config.type(customType)\n * ```\n */\nexport class ParamTypes {\n  /**\n   * Built-in parameter type: `string`\n   *\n   * This parameter type coerces values to strings.\n   * It matches anything (`new RegExp(\".*\")`) in the URL\n   */\n  static string: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `path`\n   *\n   * This parameter type is the default type for path parameters.\n   * A path parameter is any parameter declared in the path portion of a url\n   *\n   * - `/foo/:param1/:param2`: two path parameters\n   *\n   * This parameter type behaves exactly like the [[string]] type with one exception.\n   * When matching parameter values in the URL, the `path` type does not match forward slashes `/`.\n   *\n   * #### Angular 1 note:\n   * In ng1, this type is overridden with one that pre-encodes slashes as `~2F` instead of `%2F`.\n   * For more details about this angular 1 behavior, see: https://github.com/angular-ui/ui-router/issues/2598\n   */\n  static path: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `query`\n   *\n   * This parameter type is the default type for query/search parameters.\n   * It behaves the same as the [[string]] parameter type.\n   *\n   * A query parameter is any parameter declared in the query/search portion of a url\n   *\n   * - `/bar?param2`: a query parameter\n   */\n  static query: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `hash`\n   *\n   * This parameter type is used for the `#` parameter (the hash)\n   * It behaves the same as the [[string]] parameter type.\n   */\n  static hash: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `int`\n   *\n   * This parameter type serializes javascript integers (`number`s which represent an integer) to the URL.\n   *\n   * #### Example:\n   * ```js\n   * .state({\n   *   name: 'user',\n   *   url: '/user/{id:int}'\n   * });\n   * ```\n   * ```js\n   * $state.go('user', { id: 1298547 });\n   * ```\n   *\n   * The URL will serialize to: `/user/1298547`.\n   *\n   * When the parameter value is read, it will be the `number` `1298547`, not the string `\"1298547\"`.\n   */\n  static int: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `bool`\n   *\n   * This parameter type serializes `true`/`false` as `1`/`0`\n   *\n   * #### Example:\n   * ```js\n   * .state({\n   *   name: 'inbox',\n   *   url: '/inbox?{unread:bool}'\n   * });\n   * ```\n   * ```js\n   * $state.go('inbox', { unread: true });\n   * ```\n   *\n   * The URL will serialize to: `/inbox?unread=1`.\n   *\n   * Conversely, if the url is `/inbox?unread=0`, the value of the `unread` parameter will be a `false`.\n   */\n  static bool: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `date`\n   *\n   * This parameter type can be used to serialize Javascript dates as parameter values.\n   *\n   * #### Example:\n   * ```js\n   * .state({\n   *   name: 'search',\n   *   url: '/search?{start:date}'\n   * });\n   * ```\n   * ```js\n   * $state.go('search', { start: new Date(2000, 0, 1) });\n   * ```\n   *\n   * The URL will serialize to: `/search?start=2000-01-01`.\n   *\n   * Conversely, if the url is `/search?start=2016-12-25`, the value of the `start` parameter will be a `Date` object where:\n   *\n   * - `date.getFullYear() === 2016`\n   * - `date.getMonth() === 11` (month is 0-based)\n   * - `date.getDate() === 25`\n   */\n  static date: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `json`\n   *\n   * This parameter type can be used to serialize javascript objects into the URL using JSON serialization.\n   *\n   * #### Example:\n   * This example serializes an plain javascript object to the URL\n   * ```js\n   * .state({\n   *   name: 'map',\n   *   url: '/map/{coords:json}'\n   * });\n   * ```\n   * ```js\n   * $state.go('map', { coords: { x: 10399.2, y: 49071 });\n   * ```\n   *\n   * The URL will serialize to: `/map/%7B%22x%22%3A10399.2%2C%22y%22%3A49071%7D`\n   */\n  static json: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `any`\n   *\n   * This parameter type is used by default for url-less parameters (parameters that do not appear in the URL).\n   * This type does not encode or decode.\n   * It is compared using a deep `equals` comparison.\n   *\n   * #### Example:\n   * This example defines a non-url parameter on a [[StateDeclaration]].\n   * ```js\n   * .state({\n   *   name: 'new',\n   *   url: '/new',\n   *   params: {\n   *     inrepyto: null\n   *   }\n   * });\n   * ```\n   * ```js\n   * $state.go('new', { inreplyto: currentMessage });\n   * ```\n   */\n  static any: ParamTypeDefinition;\n\n  types: any;\n  enqueue = true;\n  typeQueue: any[] = [];\n\n  private defaultTypes: any = pick(ParamTypes.prototype, [\n    'hash',\n    'string',\n    'query',\n    'path',\n    'int',\n    'bool',\n    'date',\n    'json',\n    'any',\n  ]);\n\n  constructor() {\n    // Register default types. Store them in the prototype of this.types.\n    const makeType = (definition: ParamTypeDefinition, name: string) => new ParamType(extend({ name }, definition));\n    this.types = inherit(map(this.defaultTypes, makeType), {});\n  }\n\n  dispose() {\n    this.types = {};\n  }\n\n  /**\n   * Registers a parameter type\n   *\n   * End users should call [[UrlMatcherFactory.type]], which delegates to this method.\n   */\n  type(name: string, definition?: ParamTypeDefinition, definitionFn?: () => ParamTypeDefinition) {\n    if (!isDefined(definition)) return this.types[name];\n    if (this.types.hasOwnProperty(name)) throw new Error(`A type named '${name}' has already been defined.`);\n\n    this.types[name] = new ParamType(extend({ name }, definition));\n\n    if (definitionFn) {\n      this.typeQueue.push({ name, def: definitionFn });\n      if (!this.enqueue) this._flushTypeQueue();\n    }\n\n    return this;\n  }\n\n  _flushTypeQueue() {\n    while (this.typeQueue.length) {\n      const type = this.typeQueue.shift();\n      if (type.pattern) throw new Error(\"You cannot override a type's .pattern at runtime.\");\n      extend(this.types[type.name], services.$injector.invoke(type.def));\n    }\n  }\n}\n\nfunction initDefaultTypes() {\n  const makeDefaultType = (def) => {\n    const valToString = (val: any) => (val != null ? val.toString() : val);\n\n    const defaultTypeBase = {\n      encode: valToString,\n      decode: valToString,\n      is: is(String),\n      pattern: /.*/,\n      // tslint:disable-next-line:triple-equals\n      equals: (a: any, b: any) => a == b, // allow coersion for null/undefined/\"\"\n    };\n\n    return extend({}, defaultTypeBase, def) as ParamTypeDefinition;\n  };\n\n  // Default Parameter Type Definitions\n  extend(ParamTypes.prototype, {\n    string: makeDefaultType({}),\n\n    path: makeDefaultType({\n      pattern: /[^/]*/,\n    }),\n\n    query: makeDefaultType({}),\n\n    hash: makeDefaultType({\n      inherit: false,\n    }),\n\n    int: makeDefaultType({\n      decode: (val: string) => parseInt(val, 10),\n      is: function (val: any) {\n        return !isNullOrUndefined(val) && this.decode(val.toString()) === val;\n      },\n      pattern: /-?\\d+/,\n    }),\n\n    bool: makeDefaultType({\n      encode: (val: any) => (val && 1) || 0,\n      decode: (val: string) => parseInt(val, 10) !== 0,\n      is: is(Boolean),\n      pattern: /0|1/,\n    }),\n\n    date: makeDefaultType({\n      encode: function (val: any) {\n        return !this.is(val)\n          ? undefined\n          : [val.getFullYear(), ('0' + (val.getMonth() + 1)).slice(-2), ('0' + val.getDate()).slice(-2)].join('-');\n      },\n      decode: function (val: string) {\n        if (this.is(val)) return (<any>val) as Date;\n        const match = this.capture.exec(val);\n        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n      },\n      is: (val: any) => val instanceof Date && !isNaN(val.valueOf()),\n      equals(l: any, r: any) {\n        return ['getFullYear', 'getMonth', 'getDate'].reduce((acc, fn) => acc && l[fn]() === r[fn](), true);\n      },\n      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/,\n    }),\n\n    json: makeDefaultType({\n      encode: toJson,\n      decode: fromJson,\n      is: is(Object),\n      equals: equals,\n      pattern: /[^/]*/,\n    }),\n\n    // does not encode/decode\n    any: makeDefaultType({\n      encode: identity,\n      decode: identity,\n      is: () => true,\n      equals: equals,\n    }),\n  });\n}\n\ninitDefaultTypes();\n",
    "import { extend, ancestors, Obj } from '../common/common';\nimport { StateObject } from '../state/stateObject';\n\nexport class StateParams {\n  [key: string]: any;\n\n  constructor(params: Obj = {}) {\n    extend(this, params);\n  }\n\n  /**\n   * Merges a set of parameters with all parameters inherited between the common parents of the\n   * current state and a given destination state.\n   *\n   * @param {Object} newParams The set of parameters which will be composited with inherited params.\n   * @param {Object} $current Internal definition of object representing the current state.\n   * @param {Object} $to Internal definition of object representing state to transition to.\n   */\n  $inherit(newParams: Obj, $current: StateObject, $to: StateObject) {\n    let parentParams: string[];\n    const parents = ancestors($current, $to),\n      inherited: Obj = {},\n      inheritList: string[] = [];\n\n    for (const i in parents) {\n      if (!parents[i] || !parents[i].params) continue;\n      parentParams = Object.keys(parents[i].params);\n      if (!parentParams.length) continue;\n\n      for (const j in parentParams) {\n        if (inheritList.indexOf(parentParams[j]) >= 0) continue;\n        inheritList.push(parentParams[j]);\n        inherited[parentParams[j]] = this[parentParams[j]];\n      }\n    }\n    return extend({}, inherited, newParams);\n  }\n}\n",
    "import { extend, applyPairs, find, allTrueR, pairs, arrayTuples } from '../common/common';\nimport { propEq } from '../common/hof';\nimport { StateObject } from '../state/stateObject';\nimport { RawParams } from '../params/interface';\nimport { Param } from '../params/param';\nimport { Resolvable } from '../resolve/resolvable';\nimport { ViewConfig } from '../view/interface';\n\n/**\n * A node in a [[TreeChanges]] path\n *\n * For a [[TreeChanges]] path, this class holds the stateful information for a single node in the path.\n * Each PathNode corresponds to a state being entered, exited, or retained.\n * The stateful information includes parameter values and resolve data.\n */\nexport class PathNode {\n  /** The state being entered, exited, or retained */\n  public state: StateObject;\n  /** The parameters declared on the state */\n  public paramSchema: Param[];\n  /** The parameter values that belong to the state */\n  public paramValues: { [key: string]: any };\n  /** The individual (stateful) resolvable objects that belong to the state */\n  public resolvables: Resolvable[];\n  /** The state's declared view configuration objects */\n  public views: ViewConfig[];\n\n  /**\n   * Returns a clone of the PathNode\n   * @deprecated use instance method `node.clone()`\n   */\n  static clone = (node: PathNode) => node.clone();\n\n  /** Creates a copy of a PathNode */\n  constructor(node: PathNode);\n  /** Creates a new (empty) PathNode for a State */\n  constructor(state: StateObject);\n  constructor(stateOrNode: any) {\n    if (stateOrNode instanceof PathNode) {\n      const node: PathNode = stateOrNode;\n      this.state = node.state;\n      this.paramSchema = node.paramSchema.slice();\n      this.paramValues = extend({}, node.paramValues);\n      this.resolvables = node.resolvables.slice();\n      this.views = node.views && node.views.slice();\n    } else {\n      const state: StateObject = stateOrNode;\n      this.state = state;\n      this.paramSchema = state.parameters({ inherit: false });\n      this.paramValues = {};\n      this.resolvables = state.resolvables.map((res) => res.clone());\n    }\n  }\n\n  clone() {\n    return new PathNode(this);\n  }\n\n  /** Sets [[paramValues]] for the node, from the values of an object hash */\n  applyRawParams(params: RawParams): PathNode {\n    const getParamVal = (paramDef: Param) => [paramDef.id, paramDef.value(params[paramDef.id])];\n    this.paramValues = this.paramSchema.reduce((memo, pDef) => applyPairs(memo, getParamVal(pDef)), {});\n    return this;\n  }\n\n  /** Gets a specific [[Param]] metadata that belongs to the node */\n  parameter(name: string): Param {\n    return find(this.paramSchema, propEq('id', name));\n  }\n\n  /**\n   * @returns true if the state and parameter values for another PathNode are\n   * equal to the state and param values for this PathNode\n   */\n  equals(node: PathNode, paramsFn?: GetParamsFn): boolean {\n    const diff = this.diff(node, paramsFn);\n    return diff && diff.length === 0;\n  }\n\n  /**\n   * Finds Params with different parameter values on another PathNode.\n   *\n   * Given another node (of the same state), finds the parameter values which differ.\n   * Returns the [[Param]] (schema objects) whose parameter values differ.\n   *\n   * Given another node for a different state, returns `false`\n   *\n   * @param node The node to compare to\n   * @param paramsFn A function that returns which parameters should be compared.\n   * @returns The [[Param]]s which differ, or null if the two nodes are for different states\n   */\n  diff(node: PathNode, paramsFn?: GetParamsFn): Param[] | false {\n    if (this.state !== node.state) return false;\n\n    const params: Param[] = paramsFn ? paramsFn(this) : this.paramSchema;\n    return Param.changed(params, this.paramValues, node.paramValues);\n  }\n}\n\n/** @internal */\nexport type GetParamsFn = (pathNode: PathNode) => Param[];\n",
    "import { StateDeclaration, StateOrName, TargetStateDef } from './interface';\nimport { TransitionOptions } from '../transition/interface';\nimport { StateObject } from './stateObject';\nimport { isObject, isString } from '../common/predicates';\nimport { stringify } from '../common/strings';\nimport { extend } from '../common';\nimport { StateRegistry } from './stateRegistry';\nimport { RawParams } from '../params';\n\n/**\n * Encapsulate the target (destination) state/params/options of a [[Transition]].\n *\n * This class is frequently used to redirect a transition to a new destination.\n *\n * See:\n *\n * - [[HookResult]]\n * - [[TransitionHookFn]]\n * - [[TransitionService.onStart]]\n *\n * To create a `TargetState`, use [[StateService.target]].\n *\n * ---\n *\n * This class wraps:\n *\n * 1) an identifier for a state\n * 2) a set of parameters\n * 3) and transition options\n * 4) the registered state object (the [[StateDeclaration]])\n *\n * Many UI-Router APIs such as [[StateService.go]] take a [[StateOrName]] argument which can\n * either be a *state object* (a [[StateDeclaration]] or [[StateObject]]) or a *state name* (a string).\n * The `TargetState` class normalizes those options.\n *\n * A `TargetState` may be valid (the state being targeted exists in the registry)\n * or invalid (the state being targeted is not registered).\n */\nexport class TargetState {\n  private _definition: StateObject;\n  private _params: RawParams;\n  private _options: TransitionOptions;\n\n  /** Returns true if the object has a state property that might be a state or state name */\n  static isDef = (obj): obj is TargetStateDef => {\n    return obj && obj.state && (isString(obj.state) || (isObject(obj.state) && isString(obj.state.name)));\n  };\n\n  /**\n   * The TargetState constructor\n   *\n   * Note: Do not construct a `TargetState` manually.\n   * To create a `TargetState`, use the [[StateService.target]] factory method.\n   *\n   * @param _stateRegistry The StateRegistry to use to look up the _definition\n   * @param _identifier An identifier for a state.\n   *    Either a fully-qualified state name, or the object used to define the state.\n   * @param _params Parameters for the target state\n   * @param _options Transition options.\n   *\n   * @internal\n   */\n  constructor(\n    private _stateRegistry: StateRegistry,\n    private _identifier: StateOrName,\n    _params?: RawParams,\n    _options?: TransitionOptions\n  ) {\n    this._identifier = _identifier;\n    this._params = extend({}, _params || {});\n    this._options = extend({}, _options || {});\n    this._definition = _stateRegistry.matcher.find(_identifier, this._options.relative);\n  }\n\n  /** The name of the state this object targets */\n  name(): string {\n    return (this._definition && this._definition.name) || <string>this._identifier;\n  }\n\n  /** The identifier used when creating this TargetState */\n  identifier(): StateOrName {\n    return this._identifier;\n  }\n\n  /** The target parameter values */\n  params(): RawParams {\n    return this._params;\n  }\n\n  /** The internal state object (if it was found) */\n  $state(): StateObject {\n    return this._definition;\n  }\n\n  /** The internal state declaration (if it was found) */\n  state(): StateDeclaration {\n    return this._definition && this._definition.self;\n  }\n\n  /** The target options */\n  options() {\n    return this._options;\n  }\n\n  /** True if the target state was found */\n  exists(): boolean {\n    return !!(this._definition && this._definition.self);\n  }\n\n  /** True if the object is valid */\n  valid(): boolean {\n    return !this.error();\n  }\n\n  /** If the object is invalid, returns the reason why */\n  error(): string {\n    const base = <any>this.options().relative;\n    if (!this._definition && !!base) {\n      const stateName = base.name ? base.name : base;\n      return `Could not resolve '${this.name()}' from state '${stateName}'`;\n    }\n    if (!this._definition) return `No such state '${this.name()}'`;\n    if (!this._definition.self) return `State '${this.name()}' has an invalid definition`;\n  }\n\n  toString() {\n    return `'${this.name()}'${stringify(this.params())}`;\n  }\n\n  /**\n   * Returns a copy of this TargetState which targets a different state.\n   * The new TargetState has the same parameter values and transition options.\n   *\n   * @param state The new state that should be targeted\n   */\n  withState(state: StateOrName): TargetState {\n    return new TargetState(this._stateRegistry, state, this._params, this._options);\n  }\n\n  /**\n   * Returns a copy of this TargetState, using the specified parameter values.\n   *\n   * @param params the new parameter values to use\n   * @param replace When false (default) the new parameter values will be merged with the current values.\n   *                When true the parameter values will be used instead of the current values.\n   */\n  withParams(params: RawParams, replace = false): TargetState {\n    const newParams: RawParams = replace ? params : extend({}, this._params, params);\n    return new TargetState(this._stateRegistry, this._identifier, newParams, this._options);\n  }\n\n  /**\n   * Returns a copy of this TargetState, using the specified Transition Options.\n   *\n   * @param options the new options to use\n   * @param replace When false (default) the new options will be merged with the current options.\n   *                When true the options will be used instead of the current options.\n   */\n  withOptions(options: TransitionOptions, replace = false): TargetState {\n    const newOpts = replace ? options : extend({}, this._options, options);\n    return new TargetState(this._stateRegistry, this._identifier, this._params, newOpts);\n  }\n}\n",
    "import {\n  extend,\n  find,\n  pick,\n  omit,\n  tail,\n  mergeR,\n  values,\n  unnestR,\n  Predicate,\n  inArray,\n  arrayTuples,\n} from '../common/common';\nimport { prop, propEq, not } from '../common/hof';\n\nimport { RawParams } from '../params/interface';\nimport { TreeChanges } from '../transition/interface';\nimport { ViewConfig } from '../view/interface';\nimport { _ViewDeclaration } from '../state/interface';\n\nimport { StateObject } from '../state/stateObject';\nimport { TargetState } from '../state/targetState';\nimport { GetParamsFn, PathNode } from './pathNode';\nimport { ViewService } from '../view/view';\nimport { Param } from '../params/param';\nimport { StateRegistry } from '../state';\n\n/**\n * This class contains functions which convert TargetStates, Nodes and paths from one type to another.\n */\nexport class PathUtils {\n  /** Given a PathNode[], create an TargetState */\n  static makeTargetState(registry: StateRegistry, path: PathNode[]): TargetState {\n    const state = tail(path).state;\n    return new TargetState(registry, state, path.map(prop('paramValues')).reduce(mergeR, {}), {});\n  }\n\n  static buildPath(targetState: TargetState) {\n    const toParams = targetState.params();\n    return targetState.$state().path.map((state) => new PathNode(state).applyRawParams(toParams));\n  }\n\n  /** Given a fromPath: PathNode[] and a TargetState, builds a toPath: PathNode[] */\n  static buildToPath(fromPath: PathNode[], targetState: TargetState): PathNode[] {\n    const toPath: PathNode[] = PathUtils.buildPath(targetState);\n    if (targetState.options().inherit) {\n      return PathUtils.inheritParams(fromPath, toPath, Object.keys(targetState.params()));\n    }\n    return toPath;\n  }\n\n  /**\n   * Creates ViewConfig objects and adds to nodes.\n   *\n   * On each [[PathNode]], creates ViewConfig objects from the views: property of the node's state\n   */\n  static applyViewConfigs($view: ViewService, path: PathNode[], states: StateObject[]) {\n    // Only apply the viewConfigs to the nodes for the given states\n    path\n      .filter((node) => inArray(states, node.state))\n      .forEach((node) => {\n        const viewDecls: _ViewDeclaration[] = values(node.state.views || {});\n        const subPath = PathUtils.subPath(path, (n) => n === node);\n        const viewConfigs: ViewConfig[][] = viewDecls.map((view) => $view.createViewConfig(subPath, view));\n        node.views = viewConfigs.reduce(unnestR, []);\n      });\n  }\n\n  /**\n   * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath\n   *\n   * For a parameter in a node to be inherited from the from path:\n   * - The toPath's node must have a matching node in the fromPath (by state).\n   * - The parameter name must not be found in the toKeys parameter array.\n   *\n   * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some\n   * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,\n   * it is not inherited from the fromPath.\n   */\n  static inheritParams(fromPath: PathNode[], toPath: PathNode[], toKeys: string[] = []): PathNode[] {\n    function nodeParamVals(path: PathNode[], state: StateObject): RawParams {\n      const node: PathNode = find(path, propEq('state', state));\n      return extend({}, node && node.paramValues);\n    }\n\n    const noInherit = fromPath\n      .map((node) => node.paramSchema)\n      .reduce(unnestR, [])\n      .filter((param) => !param.inherit)\n      .map(prop('id'));\n\n    /**\n     * Given an [[PathNode]] \"toNode\", return a new [[PathNode]] with param values inherited from the\n     * matching node in fromPath.  Only inherit keys that aren't found in \"toKeys\" from the node in \"fromPath\"\"\n     */\n    function makeInheritedParamsNode(toNode: PathNode): PathNode {\n      // All param values for the node (may include default key/vals, when key was not found in toParams)\n      let toParamVals = extend({}, toNode && toNode.paramValues);\n      // limited to only those keys found in toParams\n      const incomingParamVals = pick(toParamVals, toKeys);\n      toParamVals = omit(toParamVals, toKeys);\n      const fromParamVals = omit(nodeParamVals(fromPath, toNode.state) || {}, noInherit);\n      // extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals\n      const ownParamVals: RawParams = extend(toParamVals, fromParamVals, incomingParamVals);\n      return new PathNode(toNode.state).applyRawParams(ownParamVals);\n    }\n\n    // The param keys specified by the incoming toParams\n    return <PathNode[]>toPath.map(makeInheritedParamsNode);\n  }\n\n  static nonDynamicParams = (node: PathNode): Param[] =>\n    node.state.parameters({ inherit: false }).filter((param) => !param.dynamic);\n\n  /**\n   * Computes the tree changes (entering, exiting) between a fromPath and toPath.\n   */\n  static treeChanges(fromPath: PathNode[], toPath: PathNode[], reloadState: StateObject): TreeChanges {\n    const max = Math.min(fromPath.length, toPath.length);\n    let keep = 0;\n\n    const nodesMatch = (node1: PathNode, node2: PathNode) => node1.equals(node2, PathUtils.nonDynamicParams);\n\n    while (keep < max && fromPath[keep].state !== reloadState && nodesMatch(fromPath[keep], toPath[keep])) {\n      keep++;\n    }\n\n    /** Given a retained node, return a new node which uses the to node's param values */\n    function applyToParams(retainedNode: PathNode, idx: number): PathNode {\n      const cloned = retainedNode.clone();\n      cloned.paramValues = toPath[idx].paramValues;\n      return cloned;\n    }\n\n    let from: PathNode[], retained: PathNode[], exiting: PathNode[], entering: PathNode[], to: PathNode[];\n\n    from = fromPath;\n    retained = from.slice(0, keep);\n    exiting = from.slice(keep);\n\n    // Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped\n    const retainedWithToParams = retained.map(applyToParams);\n    entering = toPath.slice(keep);\n    to = retainedWithToParams.concat(entering);\n\n    return { from, to, retained, retainedWithToParams, exiting, entering };\n  }\n\n  /**\n   * Returns a new path which is: the subpath of the first path which matches the second path.\n   *\n   * The new path starts from root and contains any nodes that match the nodes in the second path.\n   * It stops before the first non-matching node.\n   *\n   * Nodes are compared using their state property and their parameter values.\n   * If a `paramsFn` is provided, only the [[Param]] returned by the function will be considered when comparing nodes.\n   *\n   * @param pathA the first path\n   * @param pathB the second path\n   * @param paramsFn a function which returns the parameters to consider when comparing\n   *\n   * @returns an array of PathNodes from the first path which match the nodes in the second path\n   */\n  static matching(pathA: PathNode[], pathB: PathNode[], paramsFn?: GetParamsFn): PathNode[] {\n    let done = false;\n    const tuples: PathNode[][] = arrayTuples(pathA, pathB);\n    return tuples.reduce((matching, [nodeA, nodeB]) => {\n      done = done || !nodeA.equals(nodeB, paramsFn);\n      return done ? matching : matching.concat(nodeA);\n    }, []);\n  }\n\n  /**\n   * Returns true if two paths are identical.\n   *\n   * @param pathA\n   * @param pathB\n   * @param paramsFn a function which returns the parameters to consider when comparing\n   * @returns true if the the states and parameter values for both paths are identical\n   */\n  static equals(pathA: PathNode[], pathB: PathNode[], paramsFn?: GetParamsFn): boolean {\n    return pathA.length === pathB.length && PathUtils.matching(pathA, pathB, paramsFn).length === pathA.length;\n  }\n\n  /**\n   * Return a subpath of a path, which stops at the first matching node\n   *\n   * Given an array of nodes, returns a subset of the array starting from the first node,\n   * stopping when the first node matches the predicate.\n   *\n   * @param path a path of [[PathNode]]s\n   * @param predicate a [[Predicate]] fn that matches [[PathNode]]s\n   * @returns a subpath up to the matching node, or undefined if no match is found\n   */\n  static subPath(path: PathNode[], predicate: Predicate<PathNode>): PathNode[] {\n    const node = find(path, predicate);\n    const elementIdx = path.indexOf(node);\n    return elementIdx === -1 ? undefined : path.slice(0, elementIdx + 1);\n  }\n\n  /** Gets the raw parameter values from a path */\n  static paramValues = (path: PathNode[]) => path.reduce((acc, node) => extend(acc, node.paramValues), {});\n}\n",
    "/**\n * # The Resolve subsystem\n *\n * This subsystem is an asynchronous, hierarchical Dependency Injection system.\n *\n * Typically, resolve is configured on a state using a [[StateDeclaration.resolve]] declaration.\n *\n * @packageDocumentation\n */\n/**\n * An interface which is similar to an Angular 2 `Provider`\n */\nexport interface ProviderLike {\n  provide: any;\n  useClass?: any;\n  useFactory?: Function;\n  useValue?: any;\n  useExisting?: any;\n  deps?: any[];\n}\n\n/**\n * A plain object used to describe a [[Resolvable]]\n *\n * These objects may be used in the [[StateDeclaration.resolve]] array to declare\n * async data that the state or substates require.\n *\n * #### Example:\n * ```js\n *\n * var state = {\n *   name: 'main',\n *   resolve: [\n *     { token: 'myData', deps: [MyDataApi], resolveFn: (myDataApi) => myDataApi.getData() },\n *   ],\n * }\n * ```\n */\nexport interface ResolvableLiteral {\n  /**\n   * A Dependency Injection token\n   *\n   * This Resolvable's DI token.\n   * The Resolvable will be injectable elsewhere using the token.\n   */\n  token: any;\n\n  /**\n   * A function which fetches the Resolvable's data\n   *\n   * A function which returns one of:\n   *\n   * - The resolved value (synchronously)\n   * - A promise for the resolved value\n   * - An Observable of the resolved value(s)\n   *\n   * This function will be provided the dependencies listed in [[deps]] as its arguments.\n   * The resolve system will asynchronously fetch the dependencies before invoking this function.\n   */\n  resolveFn: Function;\n\n  /**\n   * Defines the Resolve Policy\n   *\n   * A policy that defines when to invoke the resolve,\n   * and whether to wait for async and unwrap the data\n   */\n  policy?: ResolvePolicy;\n\n  /**\n   * The Dependency Injection tokens\n   *\n   * This is an array of Dependency Injection tokens for the dependencies of the [[resolveFn]].\n   *\n   * The DI tokens are references to other `Resolvables`, or to other\n   * services from the native DI system.\n   */\n  deps?: any[];\n\n  /** Pre-resolved data. */\n  data?: any;\n}\n\n/**\n * Defines how a resolve is processed during a transition\n *\n * This object is the [[StateDeclaration.resolvePolicy]] property.\n *\n * #### Example:\n * ```js\n * // Fetched when the resolve's state is being entered.\n * // Wait for the promise to resolve.\n * var policy1 = { when: \"LAZY\", async: \"WAIT\" }\n *\n * // Fetched when the Transition is starting.\n * // Do not wait for the returned promise to resolve.\n * // Inject the raw promise/value\n * var policy2 = { when: \"EAGER\", async: \"NOWAIT\" }\n * ```\n *\n * The policy for a given Resolvable is merged from three sources (highest priority first):\n *\n * - 1) Individual resolve definition\n * - 2) State definition\n * - 3) Global default\n *\n * #### Example:\n * ```js\n * // Wait for an Observable to emit one item.\n * // Since `wait` is not specified, it uses the `wait`\n * // policy defined on the state, or the global default\n * // if no `wait` policy is defined on the state\n * import { RXWAIT } from '@uirouter/rx';\n *\n * var myResolvablePolicy = { async: RXWAIT }\n * ```\n */\nexport interface ResolvePolicy {\n  /**\n   * Defines when a Resolvable is resolved (fetched) during a transition\n   *\n   * - `LAZY` (default)\n   *   - Resolved as the resolve's state is being entered\n   * - `EAGER`\n   *   - Resolved as the transition is starting\n   *\n   * #### Example:\n   * Resolves for `main` and `main.home` are fetched when each state is entered.\n   * All of `main` resolves are processed before fetching `main.home` resolves.\n   * ```js\n   * var state = {\n   *   name: 'main',\n   *   resolve: mainResolves, // defined elsewhere\n   *   resolvePolicy: { when: 'LAZY' }, // default\n   * }\n   *\n   * var state = {\n   *   name: 'main.home',\n   *   resolve: homeResolves, // defined elsewhere\n   *   resolvePolicy: { when: 'LAZY' }, // default\n   * }\n   * ```\n   *\n   * #### Example:\n   * Resolves for `main` and `main.home` are fetched at the same time when the transition starts.\n   * This happens earlier in the lifecycle than when states are entered.\n   * All of the `main` and `main.home` resolves are fetched as soon as possible.\n   * ```js\n   * var mainState = {\n   *   name: 'main',\n   *   resolve: mainResolves, // defined elsewhere\n   *   resolvePolicy: { when: 'EAGER' },\n   * }\n   *\n   * var homeState = {\n   *   name: 'main.home',\n   *   resolve: homeResolves, // defined elsewhere\n   *   resolvePolicy: { when: 'EAGER' },\n   * }\n   * ```\n   */\n  when?: PolicyWhen;\n\n  /**\n   * Determines the unwrapping behavior of asynchronous resolve values.\n   *\n   * - `WAIT` (default)\n   *   - If a promise is returned from the resolveFn, wait for the promise before proceeding\n   *   - The unwrapped value from the promise\n   * - `NOWAIT`\n   *   - If a promise is returned from the resolve, do not wait for the promise.\n   *   - Any other value returned is wrapped in a promise.\n   *   - The promise will not be unwrapped.\n   *   - The promise itself will be provided when the resolve is injected or bound elsewhere.\n   * - {@link CustomAsyncPolicy}\n   *   - You can define a custom function that will be called with the resolveFn value.\n   *   - This function must return a promise.\n   *   - The transition will wait for this promise before proceeding\n   *\n   *   NOTE: The previous `RXWAIT` policy has become a CustomAsyncPolicy function exported in `@uirouter/rx` package.\n   *\n   * #### Example:\n   * The `Transition` will not wait for the resolve promise(s) from `main` to settle before continuing.\n   * Resolves for `main` will be provided to components wrapped in a `Promise`.\n   *\n   * The `Transition` will wait for the `main.home` resolve promises.\n   * Resolved values will be unwrapped before being provided to components.\n   * ```js\n   * var mainState = {\n   *   name: 'main',\n   *   resolve: mainResolves, // defined elsewhere\n   *   resolvePolicy: { async: 'NOWAIT' },\n   * }\n   * var homeState = {\n   *   name: 'main.home',\n   *   resolve: homeResolves, // defined elsewhere\n   *   resolvePolicy: { async: 'WAIT' }, // default\n   * }\n   * ```\n   */\n  async?: PolicyAsync;\n}\n\nexport type PolicyWhen = 'LAZY' | 'EAGER';\nexport type PolicyAsync = 'WAIT' | 'NOWAIT' | CustomAsyncPolicy;\nexport interface CustomAsyncPolicy {\n  (data: any): Promise<any>;\n}\n\nexport let resolvePolicies = {\n  when: {\n    LAZY: 'LAZY',\n    EAGER: 'EAGER',\n  },\n  async: {\n    WAIT: 'WAIT',\n    NOWAIT: 'NOWAIT',\n  },\n};\n",
    "import { extend, identity } from '../common/common';\nimport { services } from '../common/coreservices';\nimport { trace } from '../common/trace';\nimport { ResolvePolicy, ResolvableLiteral, PolicyAsync } from './interface';\n\nimport { ResolveContext } from './resolveContext';\nimport { stringify } from '../common/strings';\nimport { isFunction, isObject } from '../common/predicates';\nimport { Transition } from '../transition/transition';\nimport { StateObject } from '../state/stateObject';\nimport { PathNode } from '../path/pathNode';\nimport { isNullOrUndefined } from '../common/predicates';\n\n// TODO: explicitly make this user configurable\nexport let defaultResolvePolicy: ResolvePolicy = {\n  when: 'LAZY',\n  async: 'WAIT',\n};\n\n/**\n * The basic building block for the resolve system.\n *\n * Resolvables encapsulate a state's resolve's resolveFn, the resolveFn's declared dependencies, the wrapped (.promise),\n * and the unwrapped-when-complete (.data) result of the resolveFn.\n *\n * Resolvable.get() either retrieves the Resolvable's existing promise, or else invokes resolve() (which invokes the\n * resolveFn) and returns the resulting promise.\n *\n * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first\n * parameter to those fns.\n */\nexport class Resolvable implements ResolvableLiteral {\n  token: any;\n  policy: ResolvePolicy;\n  resolveFn: Function;\n  deps: any[];\n\n  data: any;\n  resolved = false;\n  promise: Promise<any> = undefined;\n\n  static fromData = (token: any, data: any) => new Resolvable(token, () => data, null, null, data);\n\n  /** This constructor creates a Resolvable copy */\n  constructor(resolvable: Resolvable);\n\n  /** This constructor creates a new Resolvable from the plain old [[ResolvableLiteral]] javascript object */\n  constructor(resolvable: ResolvableLiteral);\n\n  /**\n   * This constructor creates a new `Resolvable`\n   *\n   * #### Example:\n   * ```js\n   * var resolvable1 = new Resolvable('mytoken', http => http.get('foo.json').toPromise(), [Http]);\n   *\n   * var resolvable2 = new Resolvable(UserService, dep => new UserService(dep.data), [SomeDependency]);\n   *\n   * var resolvable1Clone = new Resolvable(resolvable1);\n   * ```\n   *\n   * @param token The new resolvable's injection token, such as `\"userList\"` (a string) or `UserService` (a class).\n   *              When this token is used during injection, the resolved value will be injected.\n   * @param resolveFn The function that returns the resolved value, or a promise for the resolved value\n   * @param deps An array of dependencies, which will be injected into the `resolveFn`\n   * @param policy the [[ResolvePolicy]] defines when and how the Resolvable is processed\n   * @param data Pre-resolved data. If the resolve value is already known, it may be provided here.\n   */\n  constructor(token: any, resolveFn: Function, deps?: any[], policy?: ResolvePolicy, data?: any);\n  constructor(arg1: any, resolveFn?: Function, deps?: any[], policy?: ResolvePolicy, data?: any) {\n    if (arg1 instanceof Resolvable) {\n      extend(this, arg1);\n    } else if (isFunction(resolveFn)) {\n      if (isNullOrUndefined(arg1)) throw new Error('new Resolvable(): token argument is required');\n      if (!isFunction(resolveFn)) throw new Error('new Resolvable(): resolveFn argument must be a function');\n\n      this.token = arg1;\n      this.policy = policy;\n      this.resolveFn = resolveFn;\n      this.deps = deps || [];\n\n      this.data = data;\n      this.resolved = data !== undefined;\n      this.promise = this.resolved ? services.$q.when(this.data) : undefined;\n    } else if (isObject(arg1) && arg1.token && (arg1.hasOwnProperty('resolveFn') || arg1.hasOwnProperty('data'))) {\n      const literal = <ResolvableLiteral>arg1;\n      return new Resolvable(literal.token, literal.resolveFn, literal.deps, literal.policy, literal.data);\n    }\n  }\n\n  getPolicy(state: StateObject): ResolvePolicy {\n    const thisPolicy = this.policy || {};\n    const statePolicy = (state && state.resolvePolicy) || {};\n    return {\n      when: thisPolicy.when || statePolicy.when || defaultResolvePolicy.when,\n      async: thisPolicy.async || statePolicy.async || defaultResolvePolicy.async,\n    };\n  }\n\n  /**\n   * Asynchronously resolve this Resolvable's data\n   *\n   * Given a ResolveContext that this Resolvable is found in:\n   * Wait for this Resolvable's dependencies, then invoke this Resolvable's function\n   * and update the Resolvable's state\n   */\n  resolve(resolveContext: ResolveContext, trans?: Transition) {\n    const $q = services.$q;\n\n    // Gets all dependencies from ResolveContext and wait for them to be resolved\n    const getResolvableDependencies = () =>\n      $q.all(\n        resolveContext.getDependencies(this).map((resolvable) => resolvable.get(resolveContext, trans))\n      ) as Promise<any[]>;\n\n    // Invokes the resolve function passing the resolved dependencies as arguments\n    const invokeResolveFn = (resolvedDeps: any[]) => this.resolveFn.apply(null, resolvedDeps);\n    const node: PathNode = resolveContext.findNode(this);\n    const state: StateObject = node && node.state;\n\n    const asyncPolicy: PolicyAsync = this.getPolicy(state).async;\n    const customAsyncPolicy = isFunction(asyncPolicy) ? asyncPolicy : identity;\n\n    // After the final value has been resolved, update the state of the Resolvable\n    const applyResolvedValue = (resolvedValue: any) => {\n      this.data = resolvedValue;\n      this.resolved = true;\n      this.resolveFn = null;\n      trace.traceResolvableResolved(this, trans);\n      return this.data;\n    };\n\n    // Sets the promise property first, then getsResolvableDependencies in the context of the promise chain. Always waits one tick.\n    return (this.promise = $q\n      .when()\n      .then(getResolvableDependencies)\n      .then(invokeResolveFn)\n      .then(customAsyncPolicy)\n      .then(applyResolvedValue));\n  }\n\n  /**\n   * Gets a promise for this Resolvable's data.\n   *\n   * Fetches the data and returns a promise.\n   * Returns the existing promise if it has already been fetched once.\n   */\n  get(resolveContext: ResolveContext, trans?: Transition): Promise<any> {\n    return this.promise || this.resolve(resolveContext, trans);\n  }\n\n  toString() {\n    return `Resolvable(token: ${stringify(this.token)}, requires: [${this.deps.map(stringify)}])`;\n  }\n\n  clone(): Resolvable {\n    return new Resolvable(this);\n  }\n}\n",
    "import { find, tail, uniqR, unnestR, inArray } from '../common/common';\nimport { propEq, not } from '../common/hof';\nimport { trace } from '../common/trace';\nimport { services, $InjectorLike } from '../common/coreservices';\nimport { resolvePolicies, PolicyWhen, ResolvePolicy } from './interface';\nimport { PathNode } from '../path/pathNode';\nimport { Resolvable } from './resolvable';\nimport { StateObject } from '../state/stateObject';\nimport { PathUtils } from '../path/pathUtils';\nimport { stringify } from '../common/strings';\nimport { Transition } from '../transition/transition';\nimport { UIInjector } from '../interface';\nimport { isUndefined } from '../common';\n\nconst whens = resolvePolicies.when;\nconst ALL_WHENS = [whens.EAGER, whens.LAZY];\nconst EAGER_WHENS = [whens.EAGER];\n\n// tslint:disable-next-line:no-inferrable-types\nexport const NATIVE_INJECTOR_TOKEN: string = 'Native Injector';\n\n/**\n * Encapsulates Dependency Injection for a path of nodes\n *\n * UI-Router states are organized as a tree.\n * A nested state has a path of ancestors to the root of the tree.\n * When a state is being activated, each element in the path is wrapped as a [[PathNode]].\n * A `PathNode` is a stateful object that holds things like parameters and resolvables for the state being activated.\n *\n * The ResolveContext closes over the [[PathNode]]s, and provides DI for the last node in the path.\n */\nexport class ResolveContext {\n  _injector: UIInjector;\n\n  constructor(private _path: PathNode[]) {}\n\n  /** Gets all the tokens found in the resolve context, de-duplicated */\n  getTokens(): any[] {\n    return this._path.reduce((acc, node) => acc.concat(node.resolvables.map((r) => r.token)), []).reduce(uniqR, []);\n  }\n\n  /**\n   * Gets the Resolvable that matches the token\n   *\n   * Gets the last Resolvable that matches the token in this context, or undefined.\n   * Throws an error if it doesn't exist in the ResolveContext\n   */\n  getResolvable(token: any): Resolvable {\n    const matching = this._path\n      .map((node) => node.resolvables)\n      .reduce(unnestR, [])\n      .filter((r: Resolvable) => r.token === token);\n    return tail(matching);\n  }\n\n  /** Returns the [[ResolvePolicy]] for the given [[Resolvable]] */\n  getPolicy(resolvable: Resolvable): ResolvePolicy {\n    const node = this.findNode(resolvable);\n    return resolvable.getPolicy(node.state);\n  }\n\n  /**\n   * Returns a ResolveContext that includes a portion of this one\n   *\n   * Given a state, this method creates a new ResolveContext from this one.\n   * The new context starts at the first node (root) and stops at the node for the `state` parameter.\n   *\n   * #### Why\n   *\n   * When a transition is created, the nodes in the \"To Path\" are injected from a ResolveContext.\n   * A ResolveContext closes over a path of [[PathNode]]s and processes the resolvables.\n   * The \"To State\" can inject values from its own resolvables, as well as those from all its ancestor state's (node's).\n   * This method is used to create a narrower context when injecting ancestor nodes.\n   *\n   * @example\n   * `let ABCD = new ResolveContext([A, B, C, D]);`\n   *\n   * Given a path `[A, B, C, D]`, where `A`, `B`, `C` and `D` are nodes for states `a`, `b`, `c`, `d`:\n   * When injecting `D`, `D` should have access to all resolvables from `A`, `B`, `C`, `D`.\n   * However, `B` should only be able to access resolvables from `A`, `B`.\n   *\n   * When resolving for the `B` node, first take the full \"To Path\" Context `[A,B,C,D]` and limit to the subpath `[A,B]`.\n   * `let AB = ABCD.subcontext(a)`\n   */\n  subContext(state: StateObject): ResolveContext {\n    return new ResolveContext(PathUtils.subPath(this._path, (node) => node.state === state));\n  }\n\n  /**\n   * Adds Resolvables to the node that matches the state\n   *\n   * This adds a [[Resolvable]] (generally one created on the fly; not declared on a [[StateDeclaration.resolve]] block).\n   * The resolvable is added to the node matching the `state` parameter.\n   *\n   * These new resolvables are not automatically fetched.\n   * The calling code should either fetch them, fetch something that depends on them,\n   * or rely on [[resolvePath]] being called when some state is being entered.\n   *\n   * Note: each resolvable's [[ResolvePolicy]] is merged with the state's policy, and the global default.\n   *\n   * @param newResolvables the new Resolvables\n   * @param state Used to find the node to put the resolvable on\n   */\n  addResolvables(newResolvables: Resolvable[], state: StateObject) {\n    const node = <PathNode>find(this._path, propEq('state', state));\n    const keys = newResolvables.map((r) => r.token);\n    node.resolvables = node.resolvables.filter((r) => keys.indexOf(r.token) === -1).concat(newResolvables);\n  }\n\n  /**\n   * Returns a promise for an array of resolved path Element promises\n   *\n   * @param when\n   * @param trans\n   * @returns {Promise<any>|any}\n   */\n  resolvePath(when: PolicyWhen = 'LAZY', trans?: Transition): Promise<{ token: any; value: any }[]> {\n    // This option determines which 'when' policy Resolvables we are about to fetch.\n    const whenOption: string = inArray(ALL_WHENS, when) ? when : 'LAZY';\n    // If the caller specified EAGER, only the EAGER Resolvables are fetched.\n    // if the caller specified LAZY, both EAGER and LAZY Resolvables are fetched.`\n    const matchedWhens = whenOption === resolvePolicies.when.EAGER ? EAGER_WHENS : ALL_WHENS;\n\n    // get the subpath to the state argument, if provided\n    trace.traceResolvePath(this._path, when, trans);\n\n    const matchesPolicy = (acceptedVals: string[], whenOrAsync: 'when' | 'async') => (resolvable: Resolvable) =>\n      inArray(acceptedVals, this.getPolicy(resolvable)[whenOrAsync]);\n\n    // Trigger all the (matching) Resolvables in the path\n    // Reduce all the \"WAIT\" Resolvables into an array\n    const promises: Promise<any>[] = this._path.reduce((acc, node) => {\n      const nodeResolvables = node.resolvables.filter(matchesPolicy(matchedWhens, 'when'));\n      const nowait = nodeResolvables.filter(matchesPolicy(['NOWAIT'], 'async'));\n      const wait = nodeResolvables.filter(not(matchesPolicy(['NOWAIT'], 'async')));\n\n      // For the matching Resolvables, start their async fetch process.\n      const subContext = this.subContext(node.state);\n      const getResult = (r: Resolvable) =>\n        r\n          .get(subContext, trans)\n          // Return a tuple that includes the Resolvable's token\n          .then((value) => ({ token: r.token, value: value }));\n      nowait.forEach(getResult);\n      return acc.concat(wait.map(getResult));\n    }, []);\n\n    // Wait for all the \"WAIT\" resolvables\n    return services.$q.all(promises);\n  }\n\n  injector(): UIInjector {\n    return this._injector || (this._injector = new UIInjectorImpl(this));\n  }\n\n  findNode(resolvable: Resolvable): PathNode {\n    return find(this._path, (node: PathNode) => inArray(node.resolvables, resolvable));\n  }\n\n  /**\n   * Gets the async dependencies of a Resolvable\n   *\n   * Given a Resolvable, returns its dependencies as a Resolvable[]\n   */\n  getDependencies(resolvable: Resolvable): Resolvable[] {\n    const node = this.findNode(resolvable);\n    // Find which other resolvables are \"visible\" to the `resolvable` argument\n    // subpath stopping at resolvable's node, or the whole path (if the resolvable isn't in the path)\n    const subPath: PathNode[] = PathUtils.subPath(this._path, (x) => x === node) || this._path;\n    const availableResolvables: Resolvable[] = subPath\n      .reduce((acc, _node) => acc.concat(_node.resolvables), []) // all of subpath's resolvables\n      .filter((res) => res !== resolvable); // filter out the `resolvable` argument\n\n    const getDependency = (token: any) => {\n      const matching = availableResolvables.filter((r) => r.token === token);\n      if (matching.length) return tail(matching);\n\n      const fromInjector = this.injector().getNative(token);\n      if (isUndefined(fromInjector)) {\n        throw new Error('Could not find Dependency Injection token: ' + stringify(token));\n      }\n\n      return new Resolvable(token, () => fromInjector, [], fromInjector);\n    };\n\n    return resolvable.deps.map(getDependency);\n  }\n}\n\n/** @internal */\nclass UIInjectorImpl implements UIInjector {\n  native: $InjectorLike;\n\n  constructor(public context: ResolveContext) {\n    this.native = this.get(NATIVE_INJECTOR_TOKEN) || services.$injector;\n  }\n\n  get(token: any) {\n    const resolvable = this.context.getResolvable(token);\n    if (resolvable) {\n      if (this.context.getPolicy(resolvable).async === 'NOWAIT') {\n        return resolvable.get(this.context);\n      }\n\n      if (!resolvable.resolved) {\n        throw new Error('Resolvable async .get() not complete:' + stringify(resolvable.token));\n      }\n      return resolvable.data;\n    }\n\n    return this.getNative(token);\n  }\n\n  getAsync(token: any) {\n    const resolvable = this.context.getResolvable(token);\n    if (resolvable) return resolvable.get(this.context);\n    return services.$q.when(this.native.get(token));\n  }\n\n  getNative(token: any) {\n    return this.native && this.native.get(token);\n  }\n}\n",
    "import { applyPairs, extend, identity, inherit, mapObj, noop, Obj, omit, tail, values, copy } from '../common/common';\nimport { isArray, isDefined, isFunction, isString } from '../common/predicates';\nimport { stringify } from '../common/strings';\nimport { is, pattern, pipe, prop, val } from '../common/hof';\nimport { StateDeclaration } from './interface';\n\nimport { StateObject } from './stateObject';\nimport { StateMatcher } from './stateMatcher';\nimport { Param } from '../params/param';\nimport { UrlMatcherFactory } from '../url/urlMatcherFactory';\nimport { UrlMatcher } from '../url/urlMatcher';\nimport { Resolvable } from '../resolve/resolvable';\nimport { services } from '../common/coreservices';\nimport { ResolvePolicy } from '../resolve/interface';\nimport { ParamDeclaration } from '../params';\nimport { ParamFactory } from '../url';\n\nconst parseUrl = (url: string): any => {\n  if (!isString(url)) return false;\n  const root = url.charAt(0) === '^';\n  return { val: root ? url.substring(1) : url, root };\n};\n\n/**\n * A function that builds the final value for a specific field on a [[StateObject]].\n *\n * A series of builder functions for a given field are chained together.\n * The final value returned from the chain of builders is applied to the built [[StateObject]].\n * Builder functions should call the [[parent]] function either first or last depending on the desired composition behavior.\n *\n * @param state the _partially built_ [[StateObject]]. The [[StateDeclaration]] can be inspected via [[StateObject.self]]\n * @param parent the previous builder function in the series.\n */\nexport type BuilderFunction = (state: StateObject, parent?: BuilderFunction) => any;\n\ninterface Builders {\n  [key: string]: BuilderFunction[];\n\n  name: BuilderFunction[];\n  parent: BuilderFunction[];\n  data: BuilderFunction[];\n  url: BuilderFunction[];\n  navigable: BuilderFunction[];\n  params: BuilderFunction[];\n  views: BuilderFunction[];\n  path: BuilderFunction[];\n  includes: BuilderFunction[];\n  resolvables: BuilderFunction[];\n}\n\nfunction nameBuilder(state: StateObject) {\n  return state.name;\n}\n\nfunction selfBuilder(state: StateObject) {\n  state.self.$$state = () => state;\n  return state.self;\n}\n\nfunction dataBuilder(state: StateObject) {\n  if (state.parent && state.parent.data) {\n    state.data = state.self.data = inherit(state.parent.data, state.data);\n  }\n  return state.data;\n}\n\nconst getUrlBuilder = ($urlMatcherFactoryProvider: UrlMatcherFactory, root: () => StateObject) =>\n  function urlBuilder(stateObject: StateObject) {\n    let stateDec: StateDeclaration = stateObject.self;\n\n    // For future states, i.e., states whose name ends with `.**`,\n    // match anything that starts with the url prefix\n    if (stateDec && stateDec.url && stateDec.name && stateDec.name.match(/\\.\\*\\*$/)) {\n      const newStateDec: StateDeclaration = {};\n      copy(stateDec, newStateDec);\n      newStateDec.url += '{remainder:any}'; // match any path (.*)\n      stateDec = newStateDec;\n    }\n\n    const parent = stateObject.parent;\n    const parsed = parseUrl(stateDec.url);\n    const url = !parsed ? stateDec.url : $urlMatcherFactoryProvider.compile(parsed.val, { state: stateDec });\n\n    if (!url) return null;\n    if (!$urlMatcherFactoryProvider.isMatcher(url)) throw new Error(`Invalid url '${url}' in state '${stateObject}'`);\n    return parsed && parsed.root ? url : ((parent && parent.navigable) || root()).url.append(<UrlMatcher>url);\n  };\n\nconst getNavigableBuilder = (isRoot: (state: StateObject) => boolean) =>\n  function navigableBuilder(state: StateObject) {\n    return !isRoot(state) && state.url ? state : state.parent ? state.parent.navigable : null;\n  };\n\nconst getParamsBuilder = (paramFactory: ParamFactory) =>\n  function paramsBuilder(state: StateObject): { [key: string]: Param } {\n    const makeConfigParam = (config: ParamDeclaration, id: string) => paramFactory.fromConfig(id, null, state.self);\n    const urlParams: Param[] = (state.url && state.url.parameters({ inherit: false })) || [];\n    const nonUrlParams: Param[] = values(mapObj(omit(state.params || {}, urlParams.map(prop('id'))), makeConfigParam));\n    return urlParams\n      .concat(nonUrlParams)\n      .map((p) => [p.id, p])\n      .reduce(applyPairs, {});\n  };\n\nfunction pathBuilder(state: StateObject) {\n  return state.parent ? state.parent.path.concat(state) : /*root*/ [state];\n}\n\nfunction includesBuilder(state: StateObject) {\n  const includes = state.parent ? extend({}, state.parent.includes) : {};\n  includes[state.name] = true;\n  return includes;\n}\n\n/**\n * This is a [[StateBuilder.builder]] function for the `resolve:` block on a [[StateDeclaration]].\n *\n * When the [[StateBuilder]] builds a [[StateObject]] object from a raw [[StateDeclaration]], this builder\n * validates the `resolve` property and converts it to a [[Resolvable]] array.\n *\n * resolve: input value can be:\n *\n * {\n *   // analyzed but not injected\n *   myFooResolve: function() { return \"myFooData\"; },\n *\n *   // function.toString() parsed, \"DependencyName\" dep as string (not min-safe)\n *   myBarResolve: function(DependencyName) { return DependencyName.fetchSomethingAsPromise() },\n *\n *   // Array split; \"DependencyName\" dep as string\n *   myBazResolve: [ \"DependencyName\", function(dep) { return dep.fetchSomethingAsPromise() },\n *\n *   // Array split; DependencyType dep as token (compared using ===)\n *   myQuxResolve: [ DependencyType, function(dep) { return dep.fetchSometingAsPromise() },\n *\n *   // val.$inject used as deps\n *   // where:\n *   //     corgeResolve.$inject = [\"DependencyName\"];\n *   //     function corgeResolve(dep) { dep.fetchSometingAsPromise() }\n *   // then \"DependencyName\" dep as string\n *   myCorgeResolve: corgeResolve,\n *\n *  // inject service by name\n *  // When a string is found, desugar creating a resolve that injects the named service\n *   myGraultResolve: \"SomeService\"\n * }\n *\n * or:\n *\n * [\n *   new Resolvable(\"myFooResolve\", function() { return \"myFooData\" }),\n *   new Resolvable(\"myBarResolve\", function(dep) { return dep.fetchSomethingAsPromise() }, [ \"DependencyName\" ]),\n *   { provide: \"myBazResolve\", useFactory: function(dep) { dep.fetchSomethingAsPromise() }, deps: [ \"DependencyName\" ] }\n * ]\n */\nexport function resolvablesBuilder(state: StateObject): Resolvable[] {\n  interface Tuple {\n    token: any;\n    val: any;\n    deps: any[];\n    policy: ResolvePolicy;\n  }\n\n  /** convert resolve: {} and resolvePolicy: {} objects to an array of tuples */\n  const objects2Tuples = (resolveObj: Obj, resolvePolicies: { [key: string]: ResolvePolicy }) =>\n    Object.keys(resolveObj || {}).map((token) => ({\n      token,\n      val: resolveObj[token],\n      deps: undefined,\n      policy: resolvePolicies[token],\n    }));\n\n  /** fetch DI annotations from a function or ng1-style array */\n  const annotate = (fn: Function) => {\n    const $injector = services.$injector;\n    // ng1 doesn't have an $injector until runtime.\n    // If the $injector doesn't exist, use \"deferred\" literal as a\n    // marker indicating they should be annotated when runtime starts\n    return fn['$inject'] || ($injector && $injector.annotate(fn, $injector.strictDi)) || <any>'deferred';\n  };\n\n  /** true if the object has both `token` and `resolveFn`, and is probably a [[ResolveLiteral]] */\n  const isResolveLiteral = (obj: any) => !!(obj.token && obj.resolveFn);\n\n  /** true if the object looks like a provide literal, or a ng2 Provider */\n  const isLikeNg2Provider = (obj: any) =>\n    !!((obj.provide || obj.token) && (obj.useValue || obj.useFactory || obj.useExisting || obj.useClass));\n\n  /** true if the object looks like a tuple from obj2Tuples */\n  const isTupleFromObj = (obj: any) =>\n    !!(obj && obj.val && (isString(obj.val) || isArray(obj.val) || isFunction(obj.val)));\n\n  /** extracts the token from a Provider or provide literal */\n  const getToken = (p: any) => p.provide || p.token;\n\n  // prettier-ignore: Given a literal resolve or provider object, returns a Resolvable\n  const literal2Resolvable = pattern([\n    [prop('resolveFn'), (p) => new Resolvable(getToken(p), p.resolveFn, p.deps, p.policy)],\n    [prop('useFactory'), (p) => new Resolvable(getToken(p), p.useFactory, p.deps || p.dependencies, p.policy)],\n    [prop('useClass'), (p) => new Resolvable(getToken(p), () => new (<any>p.useClass)(), [], p.policy)],\n    [prop('useValue'), (p) => new Resolvable(getToken(p), () => p.useValue, [], p.policy, p.useValue)],\n    [prop('useExisting'), (p) => new Resolvable(getToken(p), identity, [p.useExisting], p.policy)],\n  ]);\n\n  // prettier-ignore\n  const tuple2Resolvable = pattern([\n    [pipe(prop('val'), isString),   (tuple: Tuple) => new Resolvable(tuple.token, identity, [tuple.val], tuple.policy)],\n    [pipe(prop('val'), isArray),    (tuple: Tuple) => new Resolvable(tuple.token, tail(<any[]>tuple.val), tuple.val.slice(0, -1), tuple.policy)],\n    [pipe(prop('val'), isFunction), (tuple: Tuple) => new Resolvable(tuple.token, tuple.val, annotate(tuple.val), tuple.policy)],\n  ]);\n\n  // prettier-ignore\n  const item2Resolvable = <(obj: any) => Resolvable>pattern([\n    [is(Resolvable), (r: Resolvable) => r],\n    [isResolveLiteral, literal2Resolvable],\n    [isLikeNg2Provider, literal2Resolvable],\n    [isTupleFromObj, tuple2Resolvable],\n    [val(true), (obj: any) => { throw new Error('Invalid resolve value: ' + stringify(obj)); }, ],\n  ]);\n\n  // If resolveBlock is already an array, use it as-is.\n  // Otherwise, assume it's an object and convert to an Array of tuples\n  const decl = state.resolve;\n  const items: any[] = isArray(decl) ? decl : objects2Tuples(decl, state.resolvePolicy || {});\n  return items.map(item2Resolvable);\n}\n\n/**\n * A internal global service\n *\n * StateBuilder is a factory for the internal [[StateObject]] objects.\n *\n * When you register a state with the [[StateRegistry]], you register a plain old javascript object which\n * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding\n * [[StateObject]] object, which has an API and is used internally.\n *\n * Custom properties or API may be added to the internal [[StateObject]] object by registering a decorator function\n * using the [[builder]] method.\n */\nexport class StateBuilder {\n  /** An object that contains all the BuilderFunctions registered, key'd by the name of the State property they build */\n  private builders: Builders;\n\n  constructor(private matcher: StateMatcher, urlMatcherFactory: UrlMatcherFactory) {\n    const self = this;\n\n    const root = () => matcher.find('');\n    const isRoot = (state: StateObject) => state.name === '';\n\n    function parentBuilder(state: StateObject) {\n      if (isRoot(state)) return null;\n      return matcher.find(self.parentName(state)) || root();\n    }\n\n    this.builders = {\n      name: [nameBuilder],\n      self: [selfBuilder],\n      parent: [parentBuilder],\n      data: [dataBuilder],\n      // Build a URLMatcher if necessary, either via a relative or absolute URL\n      url: [getUrlBuilder(urlMatcherFactory, root)],\n      // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\n      navigable: [getNavigableBuilder(isRoot)],\n      params: [getParamsBuilder(urlMatcherFactory.paramFactory)],\n      // Each framework-specific ui-router implementation should define its own `views` builder\n      // e.g., src/ng1/statebuilders/views.ts\n      views: [],\n      // Keep a full path from the root down to this state as this is needed for state activation.\n      path: [pathBuilder],\n      // Speed up $state.includes() as it's used a lot\n      includes: [includesBuilder],\n      resolvables: [resolvablesBuilder],\n    };\n  }\n\n  /**\n   * Registers a [[BuilderFunction]] for a specific [[StateObject]] property (e.g., `parent`, `url`, or `path`).\n   * More than one BuilderFunction can be registered for a given property.\n   *\n   * The BuilderFunction(s) will be used to define the property on any subsequently built [[StateObject]] objects.\n   *\n   * @param property The name of the State property being registered for.\n   * @param fn The BuilderFunction which will be used to build the State property\n   * @returns a function which deregisters the BuilderFunction\n   */\n  builder(property: string, fn: BuilderFunction): Function;\n  /**\n   * Gets the registered builder functions for a given property of [[StateObject]].\n   *\n   * @param property The name of the State property being registered for.\n   * @returns the registered builder(s).\n   *          note: for backwards compatibility, this may be a single builder or an array of builders\n   */\n  builder(property: string): BuilderFunction | BuilderFunction[];\n  builder(name: string, fn?: BuilderFunction): any {\n    const builders = this.builders;\n    const array = builders[name] || [];\n    // Backwards compat: if only one builder exists, return it, else return whole arary.\n    if (isString(name) && !isDefined(fn)) return array.length > 1 ? array : array[0];\n    if (!isString(name) || !isFunction(fn)) return;\n\n    builders[name] = array;\n    builders[name].push(fn);\n    return () => builders[name].splice(builders[name].indexOf(fn, 1)) && null;\n  }\n\n  /**\n   * Builds all of the properties on an essentially blank State object, returning a State object which has all its\n   * properties and API built.\n   *\n   * @param state an uninitialized State object\n   * @returns the built State object\n   */\n  build(state: StateObject): StateObject {\n    const { matcher, builders } = this;\n    const parent = this.parentName(state);\n\n    if (parent && !matcher.find(parent, undefined, false)) {\n      return null;\n    }\n\n    for (const key in builders) {\n      if (!builders.hasOwnProperty(key)) continue;\n      const chain = builders[key].reduce(\n        (parentFn: BuilderFunction, step: BuilderFunction) => (_state) => step(_state, parentFn),\n        noop\n      );\n      state[key] = chain(state);\n    }\n    return state;\n  }\n\n  parentName(state: StateObject) {\n    // name = 'foo.bar.baz.**'\n    const name = state.name || '';\n    // segments = ['foo', 'bar', 'baz', '.**']\n    const segments = name.split('.');\n    // segments = ['foo', 'bar', 'baz']\n    const lastSegment = segments.pop();\n    // segments = ['foo', 'bar'] (ignore .** segment for future states)\n    if (lastSegment === '**') segments.pop();\n\n    if (segments.length) {\n      if (state.parent) {\n        throw new Error(`States that specify the 'parent:' property should not have a '.' in their name (${name})`);\n      }\n\n      // 'foo.bar'\n      return segments.join('.');\n    }\n\n    if (!state.parent) return '';\n    return isString(state.parent) ? state.parent : state.parent.name;\n  }\n\n  name(state: StateObject) {\n    const name = state.name;\n    if (name.indexOf('.') !== -1 || !state.parent) return name;\n\n    const parentName = isString(state.parent) ? state.parent : state.parent.name;\n    return parentName ? parentName + '.' + name : name;\n  }\n}\n",
    "import { StateDeclaration } from '../state/interface';\nimport { PredicateBinary } from '../common/common';\n\nimport { Transition } from './transition';\nimport { StateObject } from '../state/stateObject';\nimport { PathNode } from '../path/pathNode';\nimport { TargetState } from '../state/targetState';\nimport { RegisteredHook } from './hookRegistry';\n\n/**\n * The TransitionOptions object can be used to change the behavior of a transition.\n *\n * It is passed as the third argument to [[StateService.go]], [[StateService.transitionTo]].\n * It can also be used with a `uiSref`.\n */\nexport interface TransitionOptions {\n  /**\n   * This option changes how the Transition interacts with the browser's location bar (URL).\n   *\n   * - If `true`, it will update the url in the location bar.\n   * - If `false`, it will not update the url in the location bar.\n   * - If it is the string `\"replace\"`, it will update the url and also replace the last history record.\n   *\n   * @default `true`\n   */\n  location?: boolean | 'replace';\n\n  /**\n   * When transitioning to relative path (e.g '`^`'), this option defines which state to be relative from.\n   * @default `$state.current`\n   */\n  relative?: string | StateDeclaration | StateObject;\n\n  /**\n   * This option sets whether or not the transition's parameter values should be inherited from\n   * the current parameter values.\n   *\n   * - If `true`, it will inherit parameter values from the current parameter values.\n   * - If `false`, only the parameters which are provided to `transitionTo` will be used.\n   *\n   * @default `true`\n   */\n  inherit?: boolean;\n\n  /**\n   * @deprecated\n   */\n  notify?: boolean;\n\n  /**\n   * This option may be used to force states which are currently active to reload.\n   *\n   * During a normal transition, a state is \"retained\" if:\n   * - It was previously active\n   * - The state's parameter values have not changed\n   * - All the parent states' parameter values have not changed\n   *\n   * Forcing a reload of a state will cause it to be exited and entered, which will:\n   * - Refetch that state's resolve data\n   * - Exit the state (onExit hook)\n   * - Re-enter the state (onEnter hook)\n   * - Re-render the views (controllers and templates)\n   *\n   * - When `true`, the destination state (and all parent states) will be reloaded.\n   * - When it is a string and is the name of a state, or when it is a State object,\n   *   that state and any children states will be reloaded.\n   *\n   * @default `false`\n   */\n  reload?: boolean | string | StateDeclaration | StateObject;\n  /**\n   * You can define your own Transition Options inside this property and use them, e.g., from a Transition Hook\n   */\n  custom?: any;\n  /**\n   * This option may be used to cancel the active transition (if one is active) in favour of the this one.\n   * This is the default behaviour or ui-router.\n   *\n   *\n   * - When `true`, the active transition will be canceled and new transition will begin.\n   * - when `false`, the transition will be canceled if a transition is already running. This can be useful in cases where\n   * you only want to navigate to a different state if you are not already navigating somewhere.\n   *\n   * @default `true`\n   */\n  supercede?: boolean;\n  /** @internal */\n  reloadState?: StateObject;\n  /** @internal\n   * If this transition is a redirect, this property should be the original Transition (which was redirected to this one)\n   */\n  redirectedFrom?: Transition;\n  /** @internal */\n  current?: () => Transition;\n  /** @internal */\n  source?: 'sref' | 'url' | 'redirect' | 'otherwise' | 'unknown';\n}\n\nexport interface TransitionHookOptions {\n  current?: () => Transition; // path?\n  transition?: Transition;\n  hookType?: string;\n  target?: any;\n  traceData?: any;\n  bind?: any;\n  stateHook?: boolean;\n}\n\n/**\n * TreeChanges encapsulates the various Paths that are involved in a Transition.\n *\n * Get a TreeChanges object using [[Transition.treeChanges]]\n *\n * A UI-Router Transition is from one Path in a State Tree to another Path.  For a given Transition,\n * this object stores the \"to\" and \"from\" paths, as well as subsets of those: the \"retained\",\n * \"exiting\" and \"entering\" paths.\n *\n * Each path in TreeChanges is an array of [[PathNode]] objects. Each PathNode in the array corresponds to a portion\n * of a nested state.\n *\n * For example, if you had a nested state named `foo.bar.baz`, it would have three\n * portions, `foo, bar, baz`.  If you transitioned **to** `foo.bar.baz` and inspected the [[TreeChanges.to]]\n * Path, you would find a node in the array for each portion: `foo`, `bar`, and `baz`.\n *\n * ---\n *\n * @todo show visual state tree\n */\nexport interface TreeChanges {\n  /** @nodoc */\n  [key: string]: PathNode[] | undefined;\n\n  /** The path of nodes in the state tree that the transition is coming *from* */\n  from: PathNode[];\n\n  /** The path of nodes in the state tree that the transition is going *to* */\n  to: PathNode[];\n\n  /**\n   * The path of active nodes that the transition is retaining.\n   *\n   * These nodes are neither exited, nor entered.\n   * Before and after the transition is successful, these nodes are active.\n   */\n  retained: PathNode[];\n\n  /**\n   * The path of active nodes that the transition is retaining with updated \"to params\" applied.\n   *\n   * These nodes are neither exited, nor entered.\n   * Before and after the transition is successful, these nodes are active.\n   *\n   * This is a shallow copy of [[retained]], but with new (dynamic) parameter values from [[to]] applied.\n   */\n  retainedWithToParams: PathNode[];\n\n  /**\n   * The path of previously active nodes that the transition is exiting.\n   *\n   * After the Transition is successful, these nodes are no longer active.\n   *\n   * Note that a state that is being reloaded (due to parameter values changing, or `reload: true`) may be in both the\n   * `exiting` and `entering` paths.\n   */\n  exiting: PathNode[];\n\n  /**\n   * The path of nodes that the transition is entering.\n   *\n   * After the Transition is successful, these nodes will be active.\n   * Because they are entering, they have their resolves fetched, `onEnter` hooks run, and their views\n   * (component(s) or controller(s)+template(s)) refreshed.\n   *\n   * Note that a state that is reloaded (due to parameter values changing, or `reload: true`) may be in both the\n   * `exiting` and `entering` paths.\n   */\n  entering: PathNode[];\n}\n\nexport type IHookRegistration = (\n  matchCriteria: HookMatchCriteria,\n  callback: HookFn,\n  options?: HookRegOptions\n) => Function;\n\n/**\n * The signature for Transition Hooks.\n *\n * Transition hooks are callback functions that hook into the lifecycle of transitions.\n * As a transition runs, it reaches certain lifecycle events.\n * As each event occurs, the hooks which are registered for the event are called (in priority order).\n *\n * A transition hook may alter a Transition by returning a [[HookResult]].\n *\n * #### See:\n *\n * - [[IHookRegistry.onBefore]]\n * - [[IHookRegistry.onStart]]\n * - [[IHookRegistry.onFinish]]\n * - [[IHookRegistry.onSuccess]]\n * - [[IHookRegistry.onError]]\n *\n * @param transition the current [[Transition]]\n * @param injector (for ng1 or ng2 only) the injector service\n *\n * @returns a [[HookResult]] which may alter the transition\n *\n */\nexport interface TransitionHookFn {\n  (transition: Transition): HookResult;\n}\n\n/**\n * The signature for Transition State Hooks.\n *\n * A function which hooks into a lifecycle event for a specific state.\n *\n * Transition State Hooks are callback functions that hook into the lifecycle events of specific states during a transition.\n * As a transition runs, it may exit some states, retain (keep) states, and enter states.\n * As each lifecycle event occurs, the hooks which are registered for the event and that state are called (in priority order).\n *\n * #### See:\n *\n * - [[IHookRegistry.onExit]]\n * - [[IHookRegistry.onRetain]]\n * - [[IHookRegistry.onEnter]]\n *\n * @param transition the current [[Transition]]\n * @param state the [[StateObject]] that the hook is bound to\n * @param injector (for ng1 or ng2 only) the injector service\n *\n * @returns a [[HookResult]] which may alter the transition\n */\nexport interface TransitionStateHookFn {\n  (transition: Transition, state: StateDeclaration): HookResult;\n}\n\n/**\n * The signature for Transition onCreate Hooks.\n *\n * Transition onCreate Hooks are callbacks that allow customization or preprocessing of\n * a Transition before it is returned from [[TransitionService.create]]\n *\n * @param transition the [[Transition]] that was just created\n * @return a [[Transition]] which will then be returned from [[TransitionService.create]]\n */\nexport interface TransitionCreateHookFn {\n  (transition: Transition): void;\n}\n\nexport type HookFn = TransitionHookFn | TransitionStateHookFn | TransitionCreateHookFn;\n\n/**\n * The return value of a [[TransitionHookFn]] or [[TransitionStateHookFn]]\n *\n * When returned from a [[TransitionHookFn]] or [[TransitionStateHookFn]], these values alter the running [[Transition]]:\n *\n * - `false`: the transition will be cancelled.\n * - [[TargetState]]: the transition will be redirected to the new target state (see: [[StateService.target]])\n * - `Promise`: the transition will wait for the promise to resolve or reject\n *    - If the promise is rejected (or resolves to `false`), the transition will be cancelled\n *    - If the promise resolves to a [[TargetState]], the transition will be redirected\n *    - If the promise resolves to anything else, the transition will resume\n * - Anything else: the transition will resume\n */\nexport type HookResult = boolean | TargetState | void | Promise<boolean | TargetState | void>;\n\n/**\n * These options may be provided when registering a Transition Hook (such as `onStart`)\n */\nexport interface HookRegOptions {\n  /**\n   * Sets the priority of the registered hook\n   *\n   * Hooks of the same type (onBefore, onStart, etc) are invoked in priority order.  A hook with a higher priority\n   * is invoked before a hook with a lower priority.\n   *\n   * The default hook priority is 0\n   */\n  priority?: number;\n\n  /**\n   * Specifies what `this` is bound to during hook invocation.\n   */\n  bind?: any;\n\n  /**\n   * Limits the number of times that the hook will be invoked.\n   * Once the hook has been invoked this many times, it is automatically deregistered.\n   */\n  invokeLimit?: number;\n}\n\n/**\n * This interface specifies the api for registering Transition Hooks.  Both the\n * [[TransitionService]] and also the [[Transition]] object itself implement this interface.\n * Note: the Transition object only allows hooks to be registered before the Transition is started.\n */\nexport interface IHookRegistry {\n  /** @internal place to store the hooks */\n  _registeredHooks: { [key: string]: RegisteredHook[] };\n\n  /**\n   * Registers a [[TransitionHookFn]], called *before a transition starts*.\n   *\n   * Registers a transition lifecycle hook, which is invoked before a transition even begins.\n   * This hook can be useful to implement logic which prevents a transition from even starting, such\n   * as authentication, redirection\n   *\n   * See [[TransitionHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onBefore` hooks are invoked *before a Transition starts*.\n   * No resolves have been fetched yet.\n   * Each `onBefore` hook is invoked synchronously, in the same call stack as [[StateService.transitionTo]].\n   * The registered `onBefore` hooks are invoked in priority order.\n   *\n   * Note: during the `onBefore` phase, additional hooks can be added to the specific [[Transition]] instance.\n   * These \"on-the-fly\" hooks only affect the currently running transition..\n   *\n   * ### Return value\n   *\n   * The hook's return value can be used to pause, cancel, or redirect the current Transition.\n   * See [[HookResult]] for more information.\n   *\n   * If any hook modifies the transition *synchronously* (by throwing, returning `false`, or returning\n   * a [[TargetState]]), the remainder of the hooks are skipped.\n   * If a hook returns a promise, the remainder of the `onBefore` hooks are still invoked synchronously.\n   * All promises are resolved, and processed asynchronously before the `onStart` phase of the Transition.\n   *\n   * ### Examples\n   *\n   * #### Default Substate\n   *\n   * This example redirects any transition from 'home' to 'home.dashboard'.  This is commonly referred to as a\n   * \"default substate\".\n   *\n   * @example\n   * ```js\n   * // ng2\n   * transitionService.onBefore({ to: 'home' }, (trans: Transition) =>\n   *     trans.router.stateService.target(\"home.dashboard\"));\n   * ```\n   *\n   * #### Data Driven Default Substate\n   *\n   * This example provides data-driven default substate functionality. It matches on a transition to any state\n   * which has `defaultSubstate: \"some.sub.state\"` defined.  See: [[Transition.to]] which returns the \"to state\"\n   * definition.\n   *\n   * @example\n   * ```js\n   * // ng1\n   * // state declaration\n   * {\n   *   name: 'home',\n   *   template: '<div ui-view/>',\n   *   defaultSubstate: 'home.dashboard'\n   * }\n   *\n   * var criteria = {\n   *   to: function(state) {\n   *     return state.defaultSubstate != null;\n   *   }\n   * }\n   *\n   * $transitions.onBefore(criteria, function(trans: Transition) {\n   *   var substate = trans.to().defaultSubstate;\n   *   return trans.router.stateService.target(substate);\n   * });\n   * ```\n   *\n   *\n   * #### Require authentication\n   *\n   * This example cancels a transition to a state which requires authentication, if the user is not currently authenticated.\n   *\n   * This example assumes a state tree where all states which require authentication are children of a parent `'requireauth'` state.\n   * This example assumes `MyAuthService` synchronously returns a boolean from `isAuthenticated()`.\n   *\n   * #### Example:\n   * ```js\n   * // ng1\n   * $transitions.onBefore( { to: 'requireauth.**' }, function(trans) {\n   *   var myAuthService = trans.injector().get('MyAuthService');\n   *   // If isAuthenticated returns false, the transition is cancelled.\n   *   return myAuthService.isAuthenticated();\n   * });\n   * ```\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onBefore(matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionHookFn]], called when a transition starts.\n   *\n   * Registers a transition lifecycle hook, which is invoked as a transition starts running.\n   * This hook can be useful to perform some asynchronous action before completing a transition.\n   *\n   * See [[TransitionHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onStart` hooks are invoked asynchronously when the Transition starts running.\n   * This happens after the `onBefore` phase is complete.\n   * At this point, the Transition has not yet exited nor entered any states.\n   * The registered `onStart` hooks are invoked in priority order.\n   *\n   * Note: A built-in `onStart` hook with high priority is used to fetch any eager resolve data.\n   *\n   * ### Return value\n   *\n   * The hook's return value can be used to pause, cancel, or redirect the current Transition.\n   * See [[HookResult]] for more information.\n   *\n   * ### Example\n   *\n   * #### Login during transition\n   *\n   * This example intercepts any transition to a state which requires authentication, when the user is\n   * not currently authenticated.  It allows the user to authenticate asynchronously, then resumes the\n   * transition.  If the user did not authenticate successfully, it redirects to the \"guest\" state, which\n   * does not require authentication.\n   *\n   * This example assumes:\n   * - a state tree where all states which require authentication are children of a parent `'auth'` state.\n   * - `MyAuthService.isAuthenticated()` synchronously returns a boolean.\n   * - `MyAuthService.authenticate()` presents a login dialog, and returns a promise which is resolved\n   *   or rejected, whether or not the login attempt was successful.\n   *\n   * #### Example:\n   * ```js\n   * // ng1\n   * $transitions.onStart( { to: 'auth.**' }, function(trans) {\n   *   var $state = trans.router.stateService;\n   *   var MyAuthService = trans.injector().get('MyAuthService');\n   *\n   *   // If the user is not authenticated\n   *   if (!MyAuthService.isAuthenticated()) {\n   *\n   *     // Then return a promise for a successful login.\n   *     // The transition will wait for this promise to settle\n   *\n   *     return MyAuthService.authenticate().catch(function() {\n   *\n   *       // If the authenticate() method failed for whatever reason,\n   *       // redirect to a 'guest' state which doesn't require auth.\n   *       return $state.target(\"guest\");\n   *     });\n   *   }\n   * });\n   * ```\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onStart(matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionStateHookFn]], called when a specific state is entered.\n   *\n   * Registers a lifecycle hook, which is invoked (during a transition) when a specific state is being entered.\n   *\n   * Since this hook is run only when the specific state is being *entered*, it can be useful for\n   * performing tasks when entering a submodule/feature area such as initializing a stateful service,\n   * or for guarding access to a submodule/feature area.\n   *\n   * See [[TransitionStateHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * `onEnter` hooks generally specify `{ entering: 'somestate' }`.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onEnter` hooks are invoked when the Transition is entering a state.\n   * States are entered after the `onRetain` phase is complete.\n   * If more than one state is being entered, the parent state is entered first.\n   * The registered `onEnter` hooks for a state are invoked in priority order.\n   *\n   * Note: A built-in `onEnter` hook with high priority is used to fetch lazy resolve data for states being entered.\n   *\n   * ### Return value\n   *\n   * The hook's return value can be used to pause, cancel, or redirect the current Transition.\n   * See [[HookResult]] for more information.\n   *\n   * ### Inside a state declaration\n   *\n   * Instead of registering `onEnter` hooks using the [[TransitionService]], you may define an `onEnter` hook\n   * directly on a state declaration (see: [[StateDeclaration.onEnter]]).\n   *\n   *\n   * ### Examples\n   *\n   * #### Audit Log\n   *\n   * This example uses a service to log that a user has entered the admin section of an app.\n   * This assumes that there are substates of the \"admin\" state, such as \"admin.users\", \"admin.pages\", etc.\n   * @example\n   * ```\n   *\n   * $transitions.onEnter({ entering: 'admin' }, function(transition, state) {\n   *   var AuditService = trans.injector().get('AuditService');\n   *   AuditService.log(\"Entered \" + state.name + \" module while transitioning to \" + transition.to().name);\n   * }\n   * ```\n   *\n   * #### Audit Log (inside a state declaration)\n   *\n   * The `onEnter` inside this state declaration is syntactic sugar for the previous Audit Log example.\n   * ```\n   * {\n   *   name: 'admin',\n   *   component: 'admin',\n   *   onEnter: function($transition$, $state$) {\n   *     var AuditService = $transition$.injector().get('AuditService');\n   *     AuditService.log(\"Entered \" + state.name + \" module while transitioning to \" + transition.to().name);\n   *   }\n   * }\n   * ```\n   *\n   * Note: A state declaration's `onEnter` function is injected for Angular 1 only.\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onEnter(matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionStateHookFn]], called when a specific state is retained/kept.\n   *\n   * Registers a lifecycle hook, which is invoked (during a transition) for\n   * a specific state that was previously active will remain active (is not being entered nor exited).\n   *\n   * This hook is invoked when a state is \"retained\" or \"kept\".\n   * It means the transition is coming *from* a substate of the retained state *to* a substate of the retained state.\n   * This hook can be used to perform actions when the user moves from one substate to another, such as between steps in a wizard.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * `onRetain` hooks generally specify `{ retained: 'somestate' }`.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onRetain` hooks are invoked after any `onExit` hooks have been fired.\n   * If more than one state is retained, the child states' `onRetain` hooks are invoked first.\n   * The registered `onRetain` hooks for a state are invoked in priority order.\n   *\n   * ### Return value\n   *\n   * The hook's return value can be used to pause, cancel, or redirect the current Transition.\n   * See [[HookResult]] for more information.\n   *\n   * ### Inside a state declaration\n   *\n   * Instead of registering `onRetain` hooks using the [[TransitionService]], you may define an `onRetain` hook\n   * directly on a state declaration (see: [[StateDeclaration.onRetain]]).\n   *\n   * Note: A state declaration's `onRetain` function is injected for Angular 1 only.\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onRetain(matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionStateHookFn]], called when a specific state is exited.\n   *\n   * Registers a lifecycle hook, which is invoked (during a transition) when a specific state is being exited.\n   *\n   * Since this hook is run only when the specific state is being *exited*, it can be useful for\n   * performing tasks when leaving a submodule/feature area such as cleaning up a stateful service,\n   * or for preventing the user from leaving a state or submodule until some criteria is satisfied.\n   *\n   * See [[TransitionStateHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * `onExit` hooks generally specify `{ exiting: 'somestate' }`.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onExit` hooks are invoked when the Transition is exiting a state.\n   * States are exited after any `onStart` phase is complete.\n   * If more than one state is being exited, the child states are exited first.\n   * The registered `onExit` hooks for a state are invoked in priority order.\n   *\n   * ### Return value\n   *\n   * The hook's return value can be used to pause, cancel, or redirect the current Transition.\n   * See [[HookResult]] for more information.\n   *\n   * ### Inside a state declaration\n   *\n   * Instead of registering `onExit` hooks using the [[TransitionService]], you may define an `onExit` hook\n   * directly on a state declaration (see: [[StateDeclaration.onExit]]).\n   *\n   * Note: A state declaration's `onExit` function is injected for Angular 1 only.\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onExit(matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionHookFn]], called *just before a transition finishes*.\n   *\n   * Registers a transition lifecycle hook, which is invoked just before a transition finishes.\n   * This hook is a last chance to cancel or redirect a transition.\n   *\n   * See [[TransitionHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onFinish` hooks are invoked after the `onEnter` phase is complete.\n   * These hooks are invoked just before the transition is \"committed\".\n   * Each hook is invoked in priority order.\n   *\n   * ### Return value\n   *\n   * The hook's return value can be used to pause, cancel, or redirect the current Transition.\n   * See [[HookResult]] for more information.\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onFinish(matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionHookFn]], called after a successful transition completed.\n   *\n   * Registers a transition lifecycle hook, which is invoked after a transition successfully completes.\n   *\n   * See [[TransitionHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onSuccess` hooks are chained off the Transition's promise (see [[Transition.promise]]).\n   * If the Transition is successful and its promise is resolved, then the `onSuccess` hooks are invoked.\n   * Since these hooks are run after the transition is over, their return value is ignored.\n   * The `onSuccess` hooks are invoked in priority order.\n   *\n   * ### Return value\n   *\n   * Since the Transition is already completed, the hook's return value is ignored\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onSuccess(matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionHookFn]], called after a transition has errored.\n   *\n   * Registers a transition lifecycle hook, which is invoked after a transition has been rejected for any reason.\n   *\n   * See [[TransitionHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * The `onError` hooks are chained off the Transition's promise (see [[Transition.promise]]).\n   * If a Transition fails, its promise is rejected and the `onError` hooks are invoked.\n   * The `onError` hooks are invoked in priority order.\n   *\n   * Since these hooks are run after the transition is over, their return value is ignored.\n   *\n   * A transition \"errors\" if it was started, but failed to complete (for any reason).\n   * A *non-exhaustive list* of reasons a transition can error:\n   *\n   * - A transition was cancelled because a new transition started while it was still running (`Transition superseded`)\n   * - A transition was cancelled by a Transition Hook returning false\n   * - A transition was redirected by a Transition Hook returning a [[TargetState]]\n   * - A Transition Hook or resolve function threw an error\n   * - A Transition Hook returned a rejected promise\n   * - A resolve function returned a rejected promise\n   *\n   * To check the failure reason, inspect the return value of [[Transition.error]].\n   *\n   * Note: `onError` should be used for targeted error handling, or error recovery.\n   * For simple catch-all error reporting, use [[StateService.defaultErrorHandler]].\n   *\n   * ### Return value\n   *\n   * Since the Transition is already completed, the hook's return value is ignored\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onError(matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Returns all the registered hooks of a given `hookName` type\n   *\n   * #### Example:\n   * ```\n   * $transitions.getHooks(\"onEnter\")\n   * ```\n   */\n  getHooks(hookName: string): RegisteredHook[];\n}\n\n/** A predicate type which tests if a [[StateObject]] and [[Transition]] passes some test. Returns a boolean. */\nexport type IStateMatch = PredicateBinary<StateObject, Transition>;\n\n/**\n * This object is used to configure whether or not a Transition Hook is invoked for a particular transition,\n * based on the Transition's \"to state\" and \"from state\".\n *\n * Each property (`to`, `from`, `exiting`, `retained`, and `entering`) can be a state [[Glob]] string,\n * a boolean, or a function that takes a state and returns a boolean (see [[HookMatchCriterion]])\n *\n * All properties are optional.  If any property is omitted, it is replaced with the value `true`, and always matches.\n * To match any transition, use an empty criteria object `{}`.\n *\n * #### Example:\n * ```js\n * // This matches a transition coming from the `parent` state and going to the `parent.child` state.\n * var match = {\n *   to: 'parent',\n *   from: 'parent.child'\n * }\n * ```\n *\n * #### Example:\n * ```js\n * // This matches a transition coming from any substate of `parent` and going directly to the `parent` state.\n * var match = {\n *   to: 'parent',\n *   from: 'parent.**'\n * }\n * ```\n *\n * #### Example:\n * ```js\n * // This matches a transition coming from any state and going to any substate of `mymodule`\n * var match = {\n *   to: 'mymodule.**'\n * }\n * ```\n *\n * #### Example:\n * ```js\n * // This matches a transition coming from any state and going to any state that has `data.authRequired`\n * // set to a truthy value.\n * var match = {\n *   to: function(state) {\n *     return state.data != null && state.data.authRequired === true;\n *   }\n * }\n * ```\n * #### Example:\n * ```js\n * // This will match when route is just entered (initial load) or when the state is hard-refreshed\n * // by specifying `{refresh: true}` as transition options.\n * var match = {\n *   from: (state, transition) => state.self.name === '' || transition.options().reload\n * }\n * ```\n *\n * #### Example:\n * ```js\n * // This matches a transition that is exiting `parent.child`\n * var match = {\n *   exiting: 'parent.child'\n * }\n * ```\n */\nexport interface HookMatchCriteria {\n  [key: string]: HookMatchCriterion | undefined;\n\n  /** A [[HookMatchCriterion]] to match the destination state */\n  to?: HookMatchCriterion;\n  /** A [[HookMatchCriterion]] to match the original (from) state */\n  from?: HookMatchCriterion;\n  /** A [[HookMatchCriterion]] to match any state that would be exiting */\n  exiting?: HookMatchCriterion;\n  /** A [[HookMatchCriterion]] to match any state that would be retained */\n  retained?: HookMatchCriterion;\n  /** A [[HookMatchCriterion]] to match any state that would be entering */\n  entering?: HookMatchCriterion;\n}\n\nexport interface IMatchingNodes {\n  [key: string]: PathNode[];\n\n  to: PathNode[];\n  from: PathNode[];\n  exiting: PathNode[];\n  retained: PathNode[];\n  entering: PathNode[];\n}\n\n/** @internal */\nexport interface RegisteredHooks {\n  [key: string]: RegisteredHook[];\n}\n\n/** @internal */\nexport interface PathTypes {\n  [key: string]: PathType;\n\n  to: PathType;\n  from: PathType;\n  exiting: PathType;\n  retained: PathType;\n  entering: PathType;\n}\n\n/** @internal */\nexport interface PathType {\n  name: string;\n  scope: TransitionHookScope;\n}\n\n/**\n * Hook Criterion used to match a transition.\n *\n * A [[Glob]] string that matches the name of a state.\n *\n * Or, a function with the signature `function(state, transition) { return matches; }`\n * which should return a boolean to indicate if a state matches.\n *\n * Or, `true` to always match\n */\nexport type HookMatchCriterion = string | IStateMatch | boolean;\n\nenum TransitionHookPhase {\n  CREATE,\n  BEFORE,\n  RUN,\n  SUCCESS,\n  ERROR,\n}\nenum TransitionHookScope {\n  TRANSITION,\n  STATE,\n}\n\nexport { TransitionHookPhase, TransitionHookScope };\n",
    "import { StateDeclaration, _ViewDeclaration, _StateDeclaration, LazyLoadResult } from './interface';\nimport { defaults, values, find, inherit } from '../common/common';\nimport { propEq } from '../common/hof';\nimport { Param } from '../params/param';\nimport { UrlMatcher } from '../url/urlMatcher';\nimport { Resolvable } from '../resolve/resolvable';\nimport { TransitionStateHookFn } from '../transition/interface';\nimport { TargetState } from './targetState';\nimport { Transition } from '../transition/transition';\nimport { Glob } from '../common/glob';\nimport { isObject, isFunction } from '../common/predicates';\n\n/**\n * Internal representation of a UI-Router state.\n *\n * Instances of this class are created when a [[StateDeclaration]] is registered with the [[StateRegistry]].\n *\n * A registered [[StateDeclaration]] is augmented with a getter ([[StateDeclaration.$$state]]) which returns the corresponding [[StateObject]] object.\n *\n * This class prototypally inherits from the corresponding [[StateDeclaration]].\n * Each of its own properties (i.e., `hasOwnProperty`) are built using builders from the [[StateBuilder]].\n */\nexport class StateObject {\n  /** The parent [[StateObject]] */\n  public parent: StateObject;\n\n  /** The name used to register the state */\n  public name: string;\n\n  /** Prototypally inherits from [[StateDeclaration.abstract]] */\n  public abstract: boolean;\n\n  /** Prototypally inherits from [[StateDeclaration.resolve]] */\n  public resolve: { [key: string]: string | any[] | Function } | any[];\n\n  /** A list of [[Resolvable]] objects.  The internal representation of [[resolve]]. */\n  public resolvables: Resolvable[];\n\n  /** Prototypally inherits from [[StateDeclaration.resolvePolicy]] */\n  public resolvePolicy: any;\n\n  /** A compiled URLMatcher which detects when the state's URL is matched */\n  public url: UrlMatcher;\n\n  /** The parameters for the state, built from the URL and [[StateDeclaration.params]] */\n  public params: { [key: string]: Param };\n\n  /**\n   * The views for the state.\n   * Note: `@uirouter/core` does not register a builder for views.\n   * The framework specific code should register a `views` builder.\n   */\n  public views: { [key: string]: _ViewDeclaration };\n\n  /**\n   * The original [[StateDeclaration]] used to build this [[StateObject]].\n   * Note: `this` object also prototypally inherits from the `self` declaration object.\n   */\n  public self: StateDeclaration;\n\n  /** The nearest parent [[StateObject]] which has a URL */\n  public navigable: StateObject;\n\n  /** The parent [[StateObject]] objects from this state up to the root */\n  public path: StateObject[];\n\n  /**\n   * Prototypally inherits from [[StateDeclaration.data]]\n   * Note: This is the only field on the [[StateDeclaration]] which is mutated.\n   * The definition object's `data` field is replaced with a new object\n   * which prototypally inherits from the parent state definition's `data` field.\n   */\n  public data: any;\n\n  /**\n   * An object containing the parent States' names as keys and\n   * true as their values.\n   */\n  public includes: { [name: string]: boolean };\n\n  /** Prototypally inherits from [[StateDeclaration.onExit]] */\n  public onExit: TransitionStateHookFn;\n  /** Prototypally inherits from [[StateDeclaration.onRetain]] */\n  public onRetain: TransitionStateHookFn;\n  /** Prototypally inherits from [[StateDeclaration.onEnter]] */\n  public onEnter: TransitionStateHookFn;\n\n  /** Prototypally inherits from [[StateDeclaration.lazyLoad]] */\n  public lazyLoad: (transition: Transition, state: StateDeclaration) => Promise<LazyLoadResult>;\n\n  /** Prototypally inherits from [[StateDeclaration.redirectTo]] */\n  redirectTo:\n    | string\n    | (($transition$: Transition) => TargetState)\n    | { state: string | StateDeclaration; params: { [key: string]: any } };\n\n  /** @internal */\n  __stateObjectCache: {\n    /** Might be null */\n    nameGlob?: Glob;\n  };\n\n  /**\n   * Create a state object to put the private/internal implementation details onto.\n   * The object's prototype chain looks like:\n   * (Internal State Object) -> (Copy of State.prototype) -> (State Declaration object) -> (State Declaration's prototype...)\n   *\n   * @param stateDecl the user-supplied State Declaration\n   * @returns {StateObject} an internal State object\n   */\n  static create(stateDecl: _StateDeclaration): StateObject {\n    stateDecl = StateObject.isStateClass(stateDecl) ? new stateDecl() : stateDecl;\n\n    const state = inherit(inherit(stateDecl, StateObject.prototype)) as StateObject;\n    stateDecl.$$state = () => state;\n    state.self = stateDecl;\n    state.__stateObjectCache = {\n      nameGlob: Glob.fromString(state.name), // might return null\n    };\n    return state;\n  }\n\n  /** Predicate which returns true if the object is an class with @State() decorator */\n  static isStateClass = (stateDecl: _StateDeclaration): stateDecl is { new (): StateDeclaration } =>\n    isFunction(stateDecl) && stateDecl['__uiRouterState'] === true;\n\n  /** Predicate which returns true if the object is a [[StateDeclaration]] object */\n  static isStateDeclaration = (obj: any): obj is StateDeclaration => isFunction(obj['$$state']);\n\n  /** Predicate which returns true if the object is an internal [[StateObject]] object */\n  static isState = (obj: any): obj is StateObject => isObject(obj['__stateObjectCache']);\n\n  /** @deprecated use State.create() */\n  constructor(config?: StateDeclaration) {\n    return StateObject.create(config || {});\n  }\n\n  /**\n   * Returns true if the provided parameter is the same state.\n   *\n   * Compares the identity of the state against the passed value, which is either an object\n   * reference to the actual `State` instance, the original definition object passed to\n   * `$stateProvider.state()`, or the fully-qualified name.\n   *\n   * @param ref Can be one of (a) a `State` instance, (b) an object that was passed\n   *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.\n   * @returns Returns `true` if `ref` matches the current `State` instance.\n   */\n  is(ref: StateObject | StateDeclaration | string): boolean {\n    return this === ref || this.self === ref || this.fqn() === ref;\n  }\n\n  /**\n   * @deprecated this does not properly handle dot notation\n   * @returns Returns a dot-separated name of the state.\n   */\n  fqn(): string {\n    if (!this.parent || !(this.parent instanceof this.constructor)) return this.name;\n    const name = this.parent.fqn();\n    return name ? name + '.' + this.name : this.name;\n  }\n\n  /**\n   * Returns the root node of this state's tree.\n   *\n   * @returns The root of this state's tree.\n   */\n  root(): StateObject {\n    return (this.parent && this.parent.root()) || this;\n  }\n\n  /**\n   * Gets the state's `Param` objects\n   *\n   * Gets the list of [[Param]] objects owned by the state.\n   * If `opts.inherit` is true, it also includes the ancestor states' [[Param]] objects.\n   * If `opts.matchingKeys` exists, returns only `Param`s whose `id` is a key on the `matchingKeys` object\n   *\n   * @param opts options\n   */\n  parameters(opts?: { inherit?: boolean; matchingKeys?: any }): Param[] {\n    opts = defaults(opts, { inherit: true, matchingKeys: null });\n    const inherited = (opts.inherit && this.parent && this.parent.parameters()) || [];\n    return inherited\n      .concat(values(this.params))\n      .filter((param) => !opts.matchingKeys || opts.matchingKeys.hasOwnProperty(param.id));\n  }\n\n  /**\n   * Returns a single [[Param]] that is owned by the state\n   *\n   * If `opts.inherit` is true, it also searches the ancestor states` [[Param]]s.\n   * @param id the name of the [[Param]] to return\n   * @param opts options\n   */\n  parameter(id: string, opts: { inherit?: boolean } = {}): Param {\n    return (\n      (this.url && this.url.parameter(id, opts)) ||\n      find(values(this.params), propEq('id', id)) ||\n      (opts.inherit && this.parent && this.parent.parameter(id))\n    );\n  }\n\n  toString() {\n    return this.fqn();\n  }\n}\n",
    "import { isString } from '../common/predicates';\nimport { StateOrName } from './interface';\nimport { StateObject } from './stateObject';\nimport { values } from '../common/common';\nimport { safeConsole } from '../common/safeConsole';\n\nexport class StateMatcher {\n  constructor(private _states: { [key: string]: StateObject }) {}\n\n  isRelative(stateName: string) {\n    stateName = stateName || '';\n    return stateName.indexOf('.') === 0 || stateName.indexOf('^') === 0;\n  }\n\n  find(stateOrName: StateOrName, base?: StateOrName, matchGlob = true): StateObject {\n    if (!stateOrName && stateOrName !== '') return undefined;\n    const isStr = isString(stateOrName);\n    let name: string = isStr ? stateOrName : (<any>stateOrName).name;\n\n    if (this.isRelative(name)) name = this.resolvePath(name, base);\n    const state = this._states[name];\n\n    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {\n      return state;\n    } else if (isStr && matchGlob) {\n      const _states = values(this._states);\n      const matches = _states.filter(\n        (_state) => _state.__stateObjectCache.nameGlob && _state.__stateObjectCache.nameGlob.matches(name)\n      );\n\n      if (matches.length > 1) {\n        safeConsole.error(\n          `stateMatcher.find: Found multiple matches for ${name} using glob: `,\n          matches.map((match) => match.name)\n        );\n      }\n      return matches[0];\n    }\n    return undefined;\n  }\n\n  resolvePath(name: string, base: StateOrName) {\n    if (!base) throw new Error(`No reference point given for path '${name}'`);\n\n    const baseState: StateObject = this.find(base);\n\n    const splitName = name.split('.');\n    const pathLength = splitName.length;\n    let i = 0,\n      current = baseState;\n\n    for (; i < pathLength; i++) {\n      if (splitName[i] === '' && i === 0) {\n        current = baseState;\n        continue;\n      }\n      if (splitName[i] === '^') {\n        if (!current.parent) throw new Error(`Path '${name}' not valid for state '${baseState.name}'`);\n        current = current.parent;\n        continue;\n      }\n      break;\n    }\n    const relName = splitName.slice(i).join('.');\n    return current.name + (current.name && relName ? '.' : '') + relName;\n  }\n}\n",
    "import { inArray, isString, prop } from '../common';\nimport { _StateDeclaration } from './interface';\nimport { StateObject } from './stateObject';\nimport { StateBuilder } from './stateBuilder';\nimport { StateRegistryListener } from './stateRegistry';\nimport { Disposable } from '../interface';\nimport { UIRouter } from '../router';\n\nexport class StateQueueManager implements Disposable {\n  queue: StateObject[] = [];\n\n  constructor(\n    private router: UIRouter,\n    public states: { [key: string]: StateObject },\n    public builder: StateBuilder,\n    public listeners: StateRegistryListener[]\n  ) {}\n\n  dispose() {\n    this.queue = [];\n  }\n\n  register(stateDecl: _StateDeclaration) {\n    const queue = this.queue;\n    const state = StateObject.create(stateDecl);\n    const name = state.name;\n\n    if (!isString(name)) throw new Error('State must have a valid name');\n    if (this.states.hasOwnProperty(name) || inArray(queue.map(prop('name')), name))\n      throw new Error(`State '${name}' is already defined`);\n\n    queue.push(state);\n    this.flush();\n\n    return state;\n  }\n\n  flush() {\n    const { queue, states, builder } = this;\n    const registered: StateObject[] = [], // states that got registered\n      orphans: StateObject[] = [], // states that don't yet have a parent registered\n      previousQueueLength = {}; // keep track of how long the queue when an orphan was first encountered\n    const getState = (name) => this.states.hasOwnProperty(name) && this.states[name];\n    const notifyListeners = () => {\n      if (registered.length) {\n        this.listeners.forEach((listener) =>\n          listener(\n            'registered',\n            registered.map((s) => s.self)\n          )\n        );\n      }\n    };\n\n    while (queue.length > 0) {\n      const state: StateObject = queue.shift();\n      const name = state.name;\n      const result: StateObject = builder.build(state);\n      const orphanIdx: number = orphans.indexOf(state);\n\n      if (result) {\n        const existingState = getState(name);\n        if (existingState && existingState.name === name) {\n          throw new Error(`State '${name}' is already defined`);\n        }\n\n        const existingFutureState = getState(name + '.**');\n        if (existingFutureState) {\n          // Remove future state of the same name\n          this.router.stateRegistry.deregister(existingFutureState);\n        }\n\n        states[name] = state;\n        this.attachRoute(state);\n        if (orphanIdx >= 0) orphans.splice(orphanIdx, 1);\n        registered.push(state);\n        continue;\n      }\n\n      const prev = previousQueueLength[name];\n      previousQueueLength[name] = queue.length;\n      if (orphanIdx >= 0 && prev === queue.length) {\n        // Wait until two consecutive iterations where no additional states were dequeued successfully.\n        // throw new Error(`Cannot register orphaned state '${name}'`);\n        queue.push(state);\n        notifyListeners();\n        return states;\n      } else if (orphanIdx < 0) {\n        orphans.push(state);\n      }\n\n      queue.push(state);\n    }\n\n    notifyListeners();\n    return states;\n  }\n\n  attachRoute(state: StateObject) {\n    if (state.abstract || !state.url) return;\n    const rulesApi = this.router.urlService.rules;\n    rulesApi.rule(rulesApi.urlRuleFactory.create(state));\n  }\n}\n",
    "import { StateObject } from './stateObject';\nimport { StateMatcher } from './stateMatcher';\nimport { StateBuilder } from './stateBuilder';\nimport { StateQueueManager } from './stateQueueManager';\nimport { StateDeclaration, _StateDeclaration } from './interface';\nimport { BuilderFunction } from './stateBuilder';\nimport { StateOrName } from './interface';\nimport { removeFrom } from '../common/common';\nimport { UIRouter } from '../router';\nimport { propEq } from '../common/hof';\n\n/**\n * The signature for the callback function provided to [[StateRegistry.onStatesChanged]].\n *\n * This callback receives two parameters:\n *\n * @param event a string; either \"registered\" or \"deregistered\"\n * @param states the list of [[StateDeclaration]]s that were registered (or deregistered).\n */\nexport type StateRegistryListener = (event: 'registered' | 'deregistered', states: StateDeclaration[]) => void;\n\n/**\n * A registry for all of the application's [[StateDeclaration]]s\n *\n * This API is found at `router.stateRegistry` ([[UIRouter.stateRegistry]])\n */\nexport class StateRegistry {\n  private _root: StateObject;\n  private states: { [key: string]: StateObject } = {};\n\n  /** @internal */\n  matcher: StateMatcher;\n  private builder: StateBuilder;\n  /** @internal */\n  stateQueue: StateQueueManager;\n\n  /** @internal */\n  listeners: StateRegistryListener[] = [];\n\n  /** @internal */\n  constructor(private router: UIRouter) {\n    this.matcher = new StateMatcher(this.states);\n    this.builder = new StateBuilder(this.matcher, router.urlMatcherFactory);\n    this.stateQueue = new StateQueueManager(router, this.states, this.builder, this.listeners);\n    this._registerRoot();\n  }\n\n  /** @internal */\n  private _registerRoot() {\n    const rootStateDef: StateDeclaration = {\n      name: '',\n      url: '^',\n      views: null,\n      params: {\n        '#': { value: null, type: 'hash', dynamic: true },\n      },\n      abstract: true,\n    };\n\n    const _root = (this._root = this.stateQueue.register(rootStateDef));\n    _root.navigable = null;\n  }\n\n  /** @internal */\n  dispose() {\n    this.stateQueue.dispose();\n    this.listeners = [];\n    this.get().forEach((state) => this.get(state) && this.deregister(state));\n  }\n\n  /**\n   * Listen for a State Registry events\n   *\n   * Adds a callback that is invoked when states are registered or deregistered with the StateRegistry.\n   *\n   * #### Example:\n   * ```js\n   * let allStates = registry.get();\n   *\n   * // Later, invoke deregisterFn() to remove the listener\n   * let deregisterFn = registry.onStatesChanged((event, states) => {\n   *   switch(event) {\n   *     case: 'registered':\n   *       states.forEach(state => allStates.push(state));\n   *       break;\n   *     case: 'deregistered':\n   *       states.forEach(state => {\n   *         let idx = allStates.indexOf(state);\n   *         if (idx !== -1) allStates.splice(idx, 1);\n   *       });\n   *       break;\n   *   }\n   * });\n   * ```\n   *\n   * @param listener a callback function invoked when the registered states changes.\n   *        The function receives two parameters, `event` and `state`.\n   *        See [[StateRegistryListener]]\n   * @return a function that deregisters the listener\n   */\n  onStatesChanged(listener: StateRegistryListener): () => void {\n    this.listeners.push(listener);\n    return function deregisterListener() {\n      removeFrom(this.listeners)(listener);\n    }.bind(this);\n  }\n\n  /**\n   * Gets the implicit root state\n   *\n   * Gets the root of the state tree.\n   * The root state is implicitly created by UI-Router.\n   * Note: this returns the internal [[StateObject]] representation, not a [[StateDeclaration]]\n   *\n   * @return the root [[StateObject]]\n   */\n  root() {\n    return this._root;\n  }\n\n  /**\n   * Adds a state to the registry\n   *\n   * Registers a [[StateDeclaration]] or queues it for registration.\n   *\n   * Note: a state will be queued if the state's parent isn't yet registered.\n   *\n   * @param stateDefinition the definition of the state to register.\n   * @returns the internal [[StateObject]] object.\n   *          If the state was successfully registered, then the object is fully built (See: [[StateBuilder]]).\n   *          If the state was only queued, then the object is not fully built.\n   */\n  register(stateDefinition: _StateDeclaration): StateObject {\n    return this.stateQueue.register(stateDefinition);\n  }\n\n  /** @internal */\n  private _deregisterTree(state: StateObject) {\n    const all = this.get().map((s) => s.$$state());\n    const getChildren = (states: StateObject[]) => {\n      const _children = all.filter((s) => states.indexOf(s.parent) !== -1);\n      return _children.length === 0 ? _children : _children.concat(getChildren(_children));\n    };\n\n    const children = getChildren([state]);\n    const deregistered: StateObject[] = [state].concat(children).reverse();\n\n    deregistered.forEach((_state) => {\n      const rulesApi = this.router.urlService.rules;\n\n      // Remove URL rule\n      rulesApi\n        .rules()\n        .filter(propEq('state', _state))\n        .forEach((rule) => rulesApi.removeRule(rule));\n\n      // Remove state from registry\n      delete this.states[_state.name];\n    });\n\n    return deregistered;\n  }\n\n  /**\n   * Removes a state from the registry\n   *\n   * This removes a state from the registry.\n   * If the state has children, they are are also removed from the registry.\n   *\n   * @param stateOrName the state's name or object representation\n   * @returns {StateObject[]} a list of removed states\n   */\n  deregister(stateOrName: StateOrName) {\n    const _state = this.get(stateOrName);\n    if (!_state) throw new Error(\"Can't deregister state; not found: \" + stateOrName);\n    const deregisteredStates = this._deregisterTree(_state.$$state());\n\n    this.listeners.forEach((listener) =>\n      listener(\n        'deregistered',\n        deregisteredStates.map((s) => s.self)\n      )\n    );\n    return deregisteredStates;\n  }\n\n  /**\n   * Gets all registered states\n   *\n   * Calling this method with no arguments will return a list of all the states that are currently registered.\n   * Note: this does not return states that are *queued* but not yet registered.\n   *\n   * @return a list of [[StateDeclaration]]s\n   */\n  get(): StateDeclaration[];\n\n  /**\n   * Gets a registered state\n   *\n   * Given a state or a name, finds and returns the [[StateDeclaration]] from the registry.\n   * Note: this does not return states that are *queued* but not yet registered.\n   *\n   * @param stateOrName either the name of a state, or a state object.\n   * @param base the base state to use when stateOrName is relative.\n   * @return a registered [[StateDeclaration]] that matched the `stateOrName`, or null if the state isn't registered.\n   */\n  get(stateOrName: StateOrName, base?: StateOrName): StateDeclaration;\n  get(stateOrName?: StateOrName, base?: StateOrName): any {\n    if (arguments.length === 0)\n      return <StateDeclaration[]>Object.keys(this.states).map((name) => this.states[name].self);\n    const found = this.matcher.find(stateOrName, base);\n    return (found && found.self) || null;\n  }\n\n  /**\n   * Registers a [[BuilderFunction]] for a specific [[StateObject]] property (e.g., `parent`, `url`, or `path`).\n   * More than one BuilderFunction can be registered for a given property.\n   *\n   * The BuilderFunction(s) will be used to define the property on any subsequently built [[StateObject]] objects.\n   *\n   * @param property The name of the State property being registered for.\n   * @param builderFunction The BuilderFunction which will be used to build the State property\n   * @returns a function which deregisters the BuilderFunction\n   */\n  decorator(property: string, builderFunction: BuilderFunction) {\n    return this.builder.builder(property, builderFunction);\n  }\n}\n",
    "import { TransitionHookOptions, HookResult, TransitionHookPhase } from './interface';\nimport { defaults, noop, silentRejection } from '../common/common';\nimport { fnToString, maxLength } from '../common/strings';\nimport { isPromise } from '../common/predicates';\nimport { is, parse } from '../common/hof';\nimport { trace } from '../common/trace';\nimport { services } from '../common/coreservices';\nimport { Rejection } from './rejectFactory';\nimport { TargetState } from '../state/targetState';\nimport { Transition } from './transition';\nimport { TransitionEventType } from './transitionEventType';\nimport { RegisteredHook } from './hookRegistry';\nimport { StateDeclaration } from '../state/interface';\n\nconst defaultOptions: TransitionHookOptions = {\n  current: noop,\n  transition: null,\n  traceData: {},\n  bind: null,\n};\n\nexport type GetResultHandler = (hook: TransitionHook) => ResultHandler;\nexport type GetErrorHandler = (hook: TransitionHook) => ErrorHandler;\n\nexport type ResultHandler = (result: HookResult) => Promise<HookResult>;\nexport type ErrorHandler = (error: any) => Promise<any>;\n\nexport class TransitionHook {\n  type: TransitionEventType;\n\n  /**\n   * These GetResultHandler(s) are used by [[invokeHook]] below\n   * Each HookType chooses a GetResultHandler (See: [[TransitionService._defineCoreEvents]])\n   */\n  static HANDLE_RESULT: GetResultHandler = (hook: TransitionHook) => (result: HookResult) =>\n    hook.handleHookResult(result);\n\n  /**\n   * If the result is a promise rejection, log it.\n   * Otherwise, ignore the result.\n   */\n  static LOG_REJECTED_RESULT: GetResultHandler = (hook: TransitionHook) => (result: HookResult) => {\n    isPromise(result) && result.catch((err) => hook.logError(Rejection.normalize(err)));\n    return undefined;\n  };\n\n  /**\n   * These GetErrorHandler(s) are used by [[invokeHook]] below\n   * Each HookType chooses a GetErrorHandler (See: [[TransitionService._defineCoreEvents]])\n   */\n  static LOG_ERROR: GetErrorHandler = (hook: TransitionHook) => (error: any) => hook.logError(error);\n\n  static REJECT_ERROR: GetErrorHandler = (hook: TransitionHook) => (error: any) => silentRejection(error);\n\n  static THROW_ERROR: GetErrorHandler = (hook: TransitionHook) => (error: any) => {\n    throw error;\n  };\n\n  /**\n   * Chains together an array of TransitionHooks.\n   *\n   * Given a list of [[TransitionHook]] objects, chains them together.\n   * Each hook is invoked after the previous one completes.\n   *\n   * #### Example:\n   * ```js\n   * var hooks: TransitionHook[] = getHooks();\n   * let promise: Promise<any> = TransitionHook.chain(hooks);\n   *\n   * promise.then(handleSuccess, handleError);\n   * ```\n   *\n   * @param hooks the list of hooks to chain together\n   * @param waitFor if provided, the chain is `.then()`'ed off this promise\n   * @returns a `Promise` for sequentially invoking the hooks (in order)\n   */\n  static chain(hooks: TransitionHook[], waitFor?: Promise<any>): Promise<any> {\n    // Chain the next hook off the previous\n    const createHookChainR = (prev: Promise<any>, nextHook: TransitionHook) => prev.then(() => nextHook.invokeHook());\n    return hooks.reduce(createHookChainR, waitFor || services.$q.when());\n  }\n\n  /**\n   * Invokes all the provided TransitionHooks, in order.\n   * Each hook's return value is checked.\n   * If any hook returns a promise, then the rest of the hooks are chained off that promise, and the promise is returned.\n   * If no hook returns a promise, then all hooks are processed synchronously.\n   *\n   * @param hooks the list of TransitionHooks to invoke\n   * @param doneCallback a callback that is invoked after all the hooks have successfully completed\n   *\n   * @returns a promise for the async result, or the result of the callback\n   */\n  static invokeHooks<T>(hooks: TransitionHook[], doneCallback: (result?: HookResult) => T): Promise<any> | T {\n    for (let idx = 0; idx < hooks.length; idx++) {\n      const hookResult = hooks[idx].invokeHook();\n\n      if (isPromise(hookResult)) {\n        const remainingHooks = hooks.slice(idx + 1);\n\n        return TransitionHook.chain(remainingHooks, hookResult).then(doneCallback);\n      }\n    }\n\n    return doneCallback();\n  }\n\n  /**\n   * Run all TransitionHooks, ignoring their return value.\n   */\n  static runAllHooks(hooks: TransitionHook[]): void {\n    hooks.forEach((hook) => hook.invokeHook());\n  }\n\n  constructor(\n    private transition: Transition,\n    private stateContext: StateDeclaration,\n    private registeredHook: RegisteredHook,\n    private options: TransitionHookOptions\n  ) {\n    this.options = defaults(options, defaultOptions);\n    this.type = registeredHook.eventType;\n  }\n\n  private isSuperseded = () => this.type.hookPhase === TransitionHookPhase.RUN && !this.options.transition.isActive();\n\n  logError(err): any {\n    this.transition.router.stateService.defaultErrorHandler()(err);\n  }\n\n  invokeHook(): Promise<HookResult> | void {\n    const hook = this.registeredHook;\n    if (hook._deregistered) return;\n\n    const notCurrent = this.getNotCurrentRejection();\n    if (notCurrent) return notCurrent;\n\n    const options = this.options;\n    trace.traceHookInvocation(this, this.transition, options);\n\n    const invokeCallback = () => hook.callback.call(options.bind, this.transition, this.stateContext);\n\n    const normalizeErr = (err) => Rejection.normalize(err).toPromise();\n\n    const handleError = (err) => hook.eventType.getErrorHandler(this)(err);\n\n    const handleResult = (result) => hook.eventType.getResultHandler(this)(result);\n\n    try {\n      const result = invokeCallback();\n\n      if (!this.type.synchronous && isPromise(result)) {\n        return result.catch(normalizeErr).then(handleResult, handleError);\n      } else {\n        return handleResult(result);\n      }\n    } catch (err) {\n      // If callback throws (synchronously)\n      return handleError(Rejection.normalize(err));\n    } finally {\n      if (hook.invokeLimit && ++hook.invokeCount >= hook.invokeLimit) {\n        hook.deregister();\n      }\n    }\n  }\n\n  /**\n   * This method handles the return value of a Transition Hook.\n   *\n   * A hook can return false (cancel), a TargetState (redirect),\n   * or a promise (which may later resolve to false or a redirect)\n   *\n   * This also handles \"transition superseded\" -- when a new transition\n   * was started while the hook was still running\n   */\n  handleHookResult(result: HookResult): Promise<HookResult> {\n    const notCurrent = this.getNotCurrentRejection();\n    if (notCurrent) return notCurrent;\n\n    // Hook returned a promise\n    if (isPromise(result)) {\n      // Wait for the promise, then reprocess with the resulting value\n      return result.then((val) => this.handleHookResult(val));\n    }\n\n    trace.traceHookResult(result, this.transition, this.options);\n\n    // Hook returned false\n    if (result === false) {\n      // Abort this Transition\n      return Rejection.aborted('Hook aborted transition').toPromise();\n    }\n\n    const isTargetState = is(TargetState);\n    // hook returned a TargetState\n    if (isTargetState(result)) {\n      // Halt the current Transition and redirect (a new Transition) to the TargetState.\n      return Rejection.redirected(result).toPromise();\n    }\n  }\n\n  /**\n   * Return a Rejection promise if the transition is no longer current due\n   * to a stopped router (disposed), or a new transition has started and superseded this one.\n   */\n  private getNotCurrentRejection() {\n    const router = this.transition.router;\n\n    // The router is stopped\n    if (router._disposed) {\n      return Rejection.aborted(`UIRouter instance #${router.$id} has been stopped (disposed)`).toPromise();\n    }\n\n    if (this.transition._aborted) {\n      return Rejection.aborted().toPromise();\n    }\n\n    // This transition is no longer current.\n    // Another transition started while this hook was still running.\n    if (this.isSuperseded()) {\n      // Abort this transition\n      return Rejection.superseded(this.options.current()).toPromise();\n    }\n  }\n\n  toString() {\n    const { options, registeredHook } = this;\n    const event = parse('traceData.hookType')(options) || 'internal',\n      context = parse('traceData.context.state.name')(options) || parse('traceData.context')(options) || 'unknown',\n      name = fnToString(registeredHook.callback);\n    return `${event} context: ${context}, ${maxLength(200, name)}`;\n  }\n}\n",
    "import { isString, isFunction, Glob, extend, removeFrom, tail, values, identity, mapObj } from '../common';\nimport { PathNode } from '../path/pathNode';\nimport {\n  TransitionStateHookFn,\n  TransitionHookFn,\n  TransitionHookPhase, // has or is using\n  TransitionHookScope,\n  IHookRegistry,\n  PathType,\n} from './interface';\n\nimport {\n  HookRegOptions,\n  HookMatchCriteria,\n  TreeChanges,\n  HookMatchCriterion,\n  IMatchingNodes,\n  HookFn,\n} from './interface';\nimport { Transition } from './transition';\nimport { StateObject } from '../state/stateObject';\nimport { TransitionEventType } from './transitionEventType';\nimport { TransitionService } from './transitionService';\n\n/**\n * Determines if the given state matches the matchCriteria\n *\n * @internal\n *\n * @param state a State Object to test against\n * @param criterion\n * - If a string, matchState uses the string as a glob-matcher against the state name\n * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name\n *   and returns a positive match if any of the globs match.\n * - If a function, matchState calls the function with the state and returns true if the function's result is truthy.\n * @returns {boolean}\n */\nexport function matchState(state: StateObject, criterion: HookMatchCriterion, transition: Transition) {\n  const toMatch = isString(criterion) ? [criterion] : criterion;\n\n  function matchGlobs(_state: StateObject) {\n    const globStrings = <string[]>toMatch;\n    for (let i = 0; i < globStrings.length; i++) {\n      const glob = new Glob(globStrings[i]);\n\n      if ((glob && glob.matches(_state.name)) || (!glob && globStrings[i] === _state.name)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  const matchFn = <any>(isFunction(toMatch) ? toMatch : matchGlobs);\n  return !!matchFn(state, transition);\n}\n\n/**\n * The registration data for a registered transition hook\n */\nexport class RegisteredHook {\n  priority: number;\n  bind: any;\n  invokeCount = 0;\n  invokeLimit: number;\n  _deregistered = false;\n\n  constructor(\n    public tranSvc: TransitionService,\n    public eventType: TransitionEventType,\n    public callback: HookFn,\n    public matchCriteria: HookMatchCriteria,\n    public removeHookFromRegistry: (hook: RegisteredHook) => void,\n    options: HookRegOptions = {} as any\n  ) {\n    this.priority = options.priority || 0;\n    this.bind = options.bind || null;\n    this.invokeLimit = options.invokeLimit;\n  }\n\n  /**\n   * Gets the matching [[PathNode]]s\n   *\n   * Given an array of [[PathNode]]s, and a [[HookMatchCriterion]], returns an array containing\n   * the [[PathNode]]s that the criteria matches, or `null` if there were no matching nodes.\n   *\n   * Returning `null` is significant to distinguish between the default\n   * \"match-all criterion value\" of `true` compared to a `() => true` function,\n   * when the nodes is an empty array.\n   *\n   * This is useful to allow a transition match criteria of `entering: true`\n   * to still match a transition, even when `entering === []`.  Contrast that\n   * with `entering: (state) => true` which only matches when a state is actually\n   * being entered.\n   */\n  private _matchingNodes(nodes: PathNode[], criterion: HookMatchCriterion, transition: Transition): PathNode[] {\n    if (criterion === true) return nodes;\n    const matching = nodes.filter((node) => matchState(node.state, criterion, transition));\n    return matching.length ? matching : null;\n  }\n\n  /**\n   * Gets the default match criteria (all `true`)\n   *\n   * Returns an object which has all the criteria match paths as keys and `true` as values, i.e.:\n   *\n   * ```js\n   * {\n   *   to: true,\n   *   from: true,\n   *   entering: true,\n   *   exiting: true,\n   *   retained: true,\n   * }\n   */\n  private _getDefaultMatchCriteria(): HookMatchCriteria {\n    return mapObj(this.tranSvc._pluginapi._getPathTypes(), () => true);\n  }\n\n  /**\n   * Gets matching nodes as [[IMatchingNodes]]\n   *\n   * Create a IMatchingNodes object from the TransitionHookTypes that is roughly equivalent to:\n   *\n   * ```js\n   * let matches: IMatchingNodes = {\n   *   to:       _matchingNodes([tail(treeChanges.to)],   mc.to),\n   *   from:     _matchingNodes([tail(treeChanges.from)], mc.from),\n   *   exiting:  _matchingNodes(treeChanges.exiting,      mc.exiting),\n   *   retained: _matchingNodes(treeChanges.retained,     mc.retained),\n   *   entering: _matchingNodes(treeChanges.entering,     mc.entering),\n   * };\n   * ```\n   */\n  private _getMatchingNodes(treeChanges: TreeChanges, transition: Transition): IMatchingNodes {\n    const criteria = extend(this._getDefaultMatchCriteria(), this.matchCriteria);\n    const paths: PathType[] = values(this.tranSvc._pluginapi._getPathTypes());\n\n    return paths.reduce((mn: IMatchingNodes, pathtype: PathType) => {\n      // STATE scope criteria matches against every node in the path.\n      // TRANSITION scope criteria matches against only the last node in the path\n      const isStateHook = pathtype.scope === TransitionHookScope.STATE;\n      const path = treeChanges[pathtype.name] || [];\n      const nodes: PathNode[] = isStateHook ? path : [tail(path)];\n\n      mn[pathtype.name] = this._matchingNodes(nodes, criteria[pathtype.name], transition);\n      return mn;\n    }, {} as IMatchingNodes);\n  }\n\n  /**\n   * Determines if this hook's [[matchCriteria]] match the given [[TreeChanges]]\n   *\n   * @returns an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values\n   * are the matching [[PathNode]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)\n   */\n  matches(treeChanges: TreeChanges, transition: Transition): IMatchingNodes {\n    const matches = this._getMatchingNodes(treeChanges, transition);\n\n    // Check if all the criteria matched the TreeChanges object\n    const allMatched = values(matches).every(identity);\n    return allMatched ? matches : null;\n  }\n\n  deregister() {\n    this.removeHookFromRegistry(this);\n    this._deregistered = true;\n  }\n}\n\n/** Return a registration function of the requested type. */\nexport function makeEvent(\n  registry: IHookRegistry,\n  transitionService: TransitionService,\n  eventType: TransitionEventType\n) {\n  // Create the object which holds the registered transition hooks.\n  const _registeredHooks = (registry._registeredHooks = registry._registeredHooks || {});\n  const hooks = (_registeredHooks[eventType.name] = []);\n  const removeHookFn: (hook: RegisteredHook) => void = removeFrom(hooks);\n\n  // Create hook registration function on the IHookRegistry for the event\n  registry[eventType.name] = hookRegistrationFn;\n\n  function hookRegistrationFn(matchObject, callback, options = {}) {\n    const registeredHook = new RegisteredHook(\n      transitionService,\n      eventType,\n      callback,\n      matchObject,\n      removeHookFn,\n      options\n    );\n    hooks.push(registeredHook);\n    return registeredHook.deregister.bind(registeredHook);\n  }\n\n  return hookRegistrationFn;\n}\n",
    "import { extend, tail, assertPredicate, unnestR, identity } from '../common/common';\nimport { isArray } from '../common/predicates';\n\nimport {\n  TransitionOptions,\n  TransitionHookOptions,\n  IHookRegistry,\n  TreeChanges,\n  IMatchingNodes,\n  TransitionHookPhase,\n  TransitionHookScope,\n} from './interface';\n\nimport { Transition } from './transition';\nimport { TransitionHook } from './transitionHook';\nimport { StateObject } from '../state/stateObject';\nimport { PathNode } from '../path/pathNode';\nimport { TransitionService } from './transitionService';\nimport { TransitionEventType } from './transitionEventType';\nimport { RegisteredHook } from './hookRegistry';\n\n/**\n * This class returns applicable TransitionHooks for a specific Transition instance.\n *\n * Hooks ([[RegisteredHook]]) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.\n * myTransition.onEnter(...).  The HookBuilder finds matching RegisteredHooks (where the match criteria is\n * determined by the type of hook)\n *\n * The HookBuilder also converts RegisteredHooks objects to TransitionHook objects, which are used to run a Transition.\n *\n * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder\n * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private\n * in the Transition class, so we must also provide the Transition's _treeChanges)\n */\nexport class HookBuilder {\n  constructor(private transition: Transition) {}\n\n  buildHooksForPhase(phase: TransitionHookPhase): TransitionHook[] {\n    const $transitions = this.transition.router.transitionService;\n    return $transitions._pluginapi\n      ._getEvents(phase)\n      .map((type) => this.buildHooks(type))\n      .reduce(unnestR, [])\n      .filter(identity);\n  }\n\n  /**\n   * Returns an array of newly built TransitionHook objects.\n   *\n   * - Finds all RegisteredHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].\n   * - Finds [[PathNode]] (or `PathNode[]`) to use as the TransitionHook context(s)\n   * - For each of the [[PathNode]]s, creates a TransitionHook\n   *\n   * @param hookType the type of the hook registration function, e.g., 'onEnter', 'onFinish'.\n   */\n  buildHooks(hookType: TransitionEventType): TransitionHook[] {\n    const transition = this.transition;\n    const treeChanges = transition.treeChanges();\n\n    // Find all the matching registered hooks for a given hook type\n    const matchingHooks = this.getMatchingHooks(hookType, treeChanges, transition);\n    if (!matchingHooks) return [];\n\n    const baseHookOptions = <TransitionHookOptions>{\n      transition: transition,\n      current: transition.options().current,\n    };\n\n    const makeTransitionHooks = (hook: RegisteredHook) => {\n      // Fetch the Nodes that caused this hook to match.\n      const matches: IMatchingNodes = hook.matches(treeChanges, transition);\n      // Select the PathNode[] that will be used as TransitionHook context objects\n      const matchingNodes: PathNode[] = matches[hookType.criteriaMatchPath.name];\n\n      // Return an array of HookTuples\n      return matchingNodes.map((node) => {\n        const _options = extend(\n          {\n            bind: hook.bind,\n            traceData: { hookType: hookType.name, context: node },\n          },\n          baseHookOptions\n        );\n\n        const state = hookType.criteriaMatchPath.scope === TransitionHookScope.STATE ? node.state.self : null;\n        const transitionHook = new TransitionHook(transition, state, hook, _options);\n        return <HookTuple>{ hook, node, transitionHook };\n      });\n    };\n\n    return matchingHooks\n      .map(makeTransitionHooks)\n      .reduce(unnestR, [])\n      .sort(tupleSort(hookType.reverseSort))\n      .map((tuple) => tuple.transitionHook);\n  }\n\n  /**\n   * Finds all RegisteredHooks from:\n   * - The Transition object instance hook registry\n   * - The TransitionService ($transitions) global hook registry\n   *\n   * which matched:\n   * - the eventType\n   * - the matchCriteria (to, from, exiting, retained, entering)\n   *\n   * @returns an array of matched [[RegisteredHook]]s\n   */\n  public getMatchingHooks(\n    hookType: TransitionEventType,\n    treeChanges: TreeChanges,\n    transition: Transition\n  ): RegisteredHook[] {\n    const isCreate = hookType.hookPhase === TransitionHookPhase.CREATE;\n\n    // Instance and Global hook registries\n    const $transitions = this.transition.router.transitionService;\n    const registries = isCreate ? [$transitions] : [this.transition, $transitions];\n\n    return registries\n      .map((reg: IHookRegistry) => reg.getHooks(hookType.name)) // Get named hooks from registries\n      .filter(assertPredicate(isArray, `broken event named: ${hookType.name}`)) // Sanity check\n      .reduce(unnestR, []) // Un-nest RegisteredHook[][] to RegisteredHook[] array\n      .filter((hook) => hook.matches(treeChanges, transition)); // Only those satisfying matchCriteria\n  }\n}\n\ninterface HookTuple {\n  hook: RegisteredHook;\n  node: PathNode;\n  transitionHook: TransitionHook;\n}\n\n/**\n * A factory for a sort function for HookTuples.\n *\n * The sort function first compares the PathNode depth (how deep in the state tree a node is), then compares\n * the EventHook priority.\n *\n * @param reverseDepthSort a boolean, when true, reverses the sort order for the node depth\n * @returns a tuple sort function\n */\nfunction tupleSort(reverseDepthSort = false) {\n  return function nodeDepthThenPriority(l: HookTuple, r: HookTuple): number {\n    const factor = reverseDepthSort ? -1 : 1;\n    const depthDelta = (l.node.state.path.length - r.node.state.path.length) * factor;\n    return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;\n  };\n}\n",
    "import { trace } from '../common/trace';\nimport { services } from '../common/coreservices';\nimport { stringify } from '../common/strings';\nimport { map, find, extend, mergeR, tail, omit, arrayTuples, unnestR, identity, anyTrueR } from '../common/common';\nimport { isObject, isUndefined } from '../common/predicates';\nimport { prop, propEq, val, not, is } from '../common/hof';\nimport { StateDeclaration, StateOrName } from '../state/interface';\nimport {\n  TransitionOptions,\n  TreeChanges,\n  IHookRegistry,\n  TransitionHookPhase,\n  RegisteredHooks,\n  HookRegOptions,\n  HookMatchCriteria,\n  TransitionStateHookFn,\n  TransitionHookFn,\n} from './interface'; // has or is using\nimport { TransitionHook } from './transitionHook';\nimport { matchState, makeEvent, RegisteredHook } from './hookRegistry';\nimport { HookBuilder } from './hookBuilder';\nimport { PathNode } from '../path/pathNode';\nimport { PathUtils } from '../path/pathUtils';\nimport { StateObject } from '../state/stateObject';\nimport { TargetState } from '../state/targetState';\nimport { Param } from '../params/param';\nimport { Resolvable } from '../resolve/resolvable';\nimport { ViewConfig } from '../view/interface';\nimport { ResolveContext } from '../resolve/resolveContext';\nimport { UIRouter } from '../router';\nimport { UIInjector } from '../interface';\nimport { RawParams } from '../params/interface';\nimport { ResolvableLiteral } from '../resolve/interface';\nimport { Rejection } from './rejectFactory';\nimport { applyPairs, flattenR, uniqR } from '../common';\n\n/** @internal */\nconst stateSelf: (_state: StateObject) => StateDeclaration = prop('self');\n\n/**\n * Represents a transition between two states.\n *\n * When navigating to a state, we are transitioning **from** the current state **to** the new state.\n *\n * This object contains all contextual information about the to/from states, parameters, resolves.\n * It has information about all states being entered and exited as a result of the transition.\n */\nexport class Transition implements IHookRegistry {\n  /** @internal */\n  static diToken = Transition;\n\n  /**\n   * A unique identifier for the transition.\n   *\n   * This is an auto incrementing integer, starting from `0`.\n   */\n  $id: number;\n\n  /**\n   * A reference to the [[UIRouter]] instance\n   *\n   * This reference can be used to access the router services, such as the [[StateService]]\n   */\n  router: UIRouter;\n\n  /** @internal */\n  private _deferred = services.$q.defer();\n  /**\n   * This promise is resolved or rejected based on the outcome of the Transition.\n   *\n   * When the transition is successful, the promise is resolved\n   * When the transition is unsuccessful, the promise is rejected with the [[Rejection]] or javascript error\n   */\n  promise: Promise<any> = this._deferred.promise;\n  /**\n   * A boolean which indicates if the transition was successful\n   *\n   * After a successful transition, this value is set to true.\n   * After an unsuccessful transition, this value is set to false.\n   *\n   * The value will be undefined if the transition is not complete\n   */\n  success: boolean;\n  /** @internal */\n  _aborted: boolean;\n  /** @internal */\n  private _error: Rejection;\n\n  /** @internal Holds the hook registration functions such as those passed to Transition.onStart() */\n  _registeredHooks: RegisteredHooks = {};\n\n  /** @internal */\n  private _options: TransitionOptions;\n  /** @internal */\n  private _treeChanges: TreeChanges;\n  /** @internal */\n  private _targetState: TargetState;\n  /** @internal */\n  private _hookBuilder = new HookBuilder(this);\n\n  /** @internal */\n  onBefore(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onStart(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onExit(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onRetain(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onEnter(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onFinish(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onSuccess(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onError(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n\n  /** @internal\n   * Creates the transition-level hook registration functions\n   * (which can then be used to register hooks)\n   */\n  private createTransitionHookRegFns() {\n    this.router.transitionService._pluginapi\n      ._getEvents()\n      .filter((type) => type.hookPhase !== TransitionHookPhase.CREATE)\n      .forEach((type) => makeEvent(this, this.router.transitionService, type));\n  }\n\n  /** @internal */\n  getHooks(hookName: string): RegisteredHook[] {\n    return this._registeredHooks[hookName];\n  }\n\n  /**\n   * Creates a new Transition object.\n   *\n   * If the target state is not valid, an error is thrown.\n   *\n   * @internal\n   *\n   * @param fromPath The path of [[PathNode]]s from which the transition is leaving.  The last node in the `fromPath`\n   *        encapsulates the \"from state\".\n   * @param targetState The target state and parameters being transitioned to (also, the transition options)\n   * @param router The [[UIRouter]] instance\n   * @internal\n   */\n  constructor(fromPath: PathNode[], targetState: TargetState, router: UIRouter) {\n    this.router = router;\n    this._targetState = targetState;\n\n    if (!targetState.valid()) {\n      throw new Error(targetState.error());\n    }\n\n    // current() is assumed to come from targetState.options, but provide a naive implementation otherwise.\n    this._options = extend({ current: val(this) }, targetState.options());\n    this.$id = router.transitionService._transitionCount++;\n    const toPath = PathUtils.buildToPath(fromPath, targetState);\n    this._treeChanges = PathUtils.treeChanges(fromPath, toPath, this._options.reloadState);\n    this.createTransitionHookRegFns();\n\n    const onCreateHooks = this._hookBuilder.buildHooksForPhase(TransitionHookPhase.CREATE);\n    TransitionHook.invokeHooks(onCreateHooks, () => null);\n\n    this.applyViewConfigs(router);\n  }\n\n  private applyViewConfigs(router: UIRouter) {\n    const enteringStates = this._treeChanges.entering.map((node) => node.state);\n    PathUtils.applyViewConfigs(router.transitionService.$view, this._treeChanges.to, enteringStates);\n  }\n\n  /**\n   * @internal\n   * @returns the internal from [State] object\n   */\n  $from() {\n    return tail(this._treeChanges.from).state;\n  }\n\n  /**\n   * @internal\n   * @returns the internal to [State] object\n   */\n  $to() {\n    return tail(this._treeChanges.to).state;\n  }\n\n  /**\n   * Returns the \"from state\"\n   *\n   * Returns the state that the transition is coming *from*.\n   *\n   * @returns The state declaration object for the Transition's (\"from state\").\n   */\n  from(): StateDeclaration {\n    return this.$from().self;\n  }\n\n  /**\n   * Returns the \"to state\"\n   *\n   * Returns the state that the transition is going *to*.\n   *\n   * @returns The state declaration object for the Transition's target state (\"to state\").\n   */\n  to(): StateDeclaration {\n    return this.$to().self;\n  }\n\n  /**\n   * Gets the Target State\n   *\n   * A transition's [[TargetState]] encapsulates the [[to]] state, the [[params]], and the [[options]] as a single object.\n   *\n   * @returns the [[TargetState]] of this Transition\n   */\n  targetState() {\n    return this._targetState;\n  }\n\n  /**\n   * Determines whether two transitions are equivalent.\n   * @deprecated\n   */\n  is(compare: Transition | { to?: any; from?: any }): boolean {\n    if (compare instanceof Transition) {\n      // TODO: Also compare parameters\n      return this.is({ to: compare.$to().name, from: compare.$from().name });\n    }\n    return !(\n      (compare.to && !matchState(this.$to(), compare.to, this)) ||\n      (compare.from && !matchState(this.$from(), compare.from, this))\n    );\n  }\n\n  /**\n   * Gets transition parameter values\n   *\n   * Returns the parameter values for a transition as key/value pairs.\n   * This object is immutable.\n   *\n   * By default, returns the new parameter values (for the \"to state\").\n   *\n   * #### Example:\n   * ```js\n   * var toParams = transition.params();\n   * ```\n   *\n   * To return the previous parameter values,  supply `'from'` as the `pathname` argument.\n   *\n   * #### Example:\n   * ```js\n   * var fromParams = transition.params('from');\n   * ```\n   *\n   * @param pathname the name of the treeChanges path to get parameter values for:\n   *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n   *\n   * @returns transition parameter values for the desired path.\n   */\n  params(pathname?: string): { [paramName: string]: any };\n  params<T>(pathname?: string): T;\n  params(pathname = 'to') {\n    return Object.freeze(this._treeChanges[pathname].map(prop('paramValues')).reduce(mergeR, {}));\n  }\n\n  /**\n   * Gets the new values of any parameters that changed during this transition.\n   *\n   * Returns any parameter values that have changed during a transition, as key/value pairs.\n   *\n   * - Any parameter values that have changed will be present on the returned object reflecting the new value.\n   * - Any parameters that *not* have changed will not be present on the returned object.\n   * - Any new parameters that weren't present in the \"from\" state, but are now present in the \"to\" state will be present on the returned object.\n   * - Any previous parameters that are no longer present (because the \"to\" state doesn't have them) will be included with a value of `undefined`.\n   *\n   * The returned object is immutable.\n   *\n   * #### Examples:\n   *\n   * Given:\n   * ```js\n   * var stateA = { name: 'stateA', url: '/stateA/:param1/param2' }\n   * var stateB = { name: 'stateB', url: '/stateB/:param3' }\n   * var stateC = { name: 'stateB.nest', url: '/nest/:param4' }\n   * ```\n   *\n   * #### Example 1\n   *\n   * From `/stateA/abc/def` to `/stateA/abc/xyz`\n   *\n   * ```js\n   * var changed = transition.paramsChanged()\n   * // changed is { param2: 'xyz' }\n   * ```\n   *\n   * The value of `param2` changed to `xyz`.\n   * The value of `param1` stayed the same so its value is not present.\n   *\n   * #### Example 2\n   *\n   * From `/stateA/abc/def` to `/stateB/123`\n   *\n   * ```js\n   * var changed = transition.paramsChanged()\n   * // changed is { param1: undefined, param2: undefined, param3: '123' }\n   * ```\n   *\n   * The value `param3` is present because it is a new param.\n   * Both `param1` and `param2` are no longer present so their value is undefined.\n   *\n   * #### Example 3\n   *\n   * From `/stateB/123` to `/stateB/123/nest/456`\n   *\n   * ```js\n   * var changed = transition.paramsChanged()\n   * // changed is { param4: '456' }\n   * ```\n   *\n   * The value `param4` is present because it is a new param.\n   * The value of `param3` did not change, so its value is not present.\n   *\n   * @returns an immutable object with changed parameter keys/values.\n   */\n  paramsChanged(): { [paramName: string]: any };\n  paramsChanged<T>(): T;\n  paramsChanged() {\n    const fromParams = this.params('from');\n    const toParams = this.params('to');\n\n    // All the parameters declared on both the \"to\" and \"from\" paths\n    const allParamDescriptors: Param[] = []\n      .concat(this._treeChanges.to)\n      .concat(this._treeChanges.from)\n      .map((pathNode) => pathNode.paramSchema)\n      .reduce(flattenR, [])\n      .reduce(uniqR, []);\n\n    const changedParamDescriptors = Param.changed(allParamDescriptors, fromParams, toParams);\n\n    return changedParamDescriptors.reduce((changedValues, descriptor) => {\n      changedValues[descriptor.id] = toParams[descriptor.id];\n      return changedValues;\n    }, {});\n  }\n\n  /**\n   * Creates a [[UIInjector]] Dependency Injector\n   *\n   * Returns a Dependency Injector for the Transition's target state (to state).\n   * The injector provides resolve values which the target state has access to.\n   *\n   * The `UIInjector` can also provide values from the native root/global injector (ng1/ng2).\n   *\n   * #### Example:\n   * ```js\n   * .onEnter({ entering: 'myState' }, trans => {\n   *   var myResolveValue = trans.injector().get('myResolve');\n   *   // Inject a global service from the global/native injector (if it exists)\n   *   var MyService = trans.injector().get('MyService');\n   * })\n   * ```\n   *\n   * In some cases (such as `onBefore`), you may need access to some resolve data but it has not yet been fetched.\n   * You can use [[UIInjector.getAsync]] to get a promise for the data.\n   * #### Example:\n   * ```js\n   * .onBefore({}, trans => {\n   *   return trans.injector().getAsync('myResolve').then(myResolveValue =>\n   *     return myResolveValue !== 'ABORT';\n   *   });\n   * });\n   * ```\n   *\n   * If a `state` is provided, the injector that is returned will be limited to resolve values that the provided state has access to.\n   * This can be useful if both a parent state `foo` and a child state `foo.bar` have both defined a resolve such as `data`.\n   * #### Example:\n   * ```js\n   * .onEnter({ to: 'foo.bar' }, trans => {\n   *   // returns result of `foo` state's `myResolve` resolve\n   *   // even though `foo.bar` also has a `myResolve` resolve\n   *   var fooData = trans.injector('foo').get('myResolve');\n   * });\n   * ```\n   *\n   * If you need resolve data from the exiting states, pass `'from'` as `pathName`.\n   * The resolve data from the `from` path will be returned.\n   * #### Example:\n   * ```js\n   * .onExit({ exiting: 'foo.bar' }, trans => {\n   *   // Gets the resolve value of `myResolve` from the state being exited\n   *   var fooData = trans.injector(null, 'from').get('myResolve');\n   * });\n   * ```\n   *\n   *\n   * @param state Limits the resolves provided to only the resolves the provided state has access to.\n   * @param pathName Default: `'to'`: Chooses the path for which to create the injector. Use this to access resolves for `exiting` states.\n   *\n   * @returns a [[UIInjector]]\n   */\n  injector(state?: StateOrName, pathName = 'to'): UIInjector {\n    let path: PathNode[] = this._treeChanges[pathName];\n    if (state) path = PathUtils.subPath(path, (node) => node.state === state || node.state.name === state);\n    return new ResolveContext(path).injector();\n  }\n\n  /**\n   * Gets all available resolve tokens (keys)\n   *\n   * This method can be used in conjunction with [[injector]] to inspect the resolve values\n   * available to the Transition.\n   *\n   * This returns all the tokens defined on [[StateDeclaration.resolve]] blocks, for the states\n   * in the Transition's [[TreeChanges.to]] path.\n   *\n   * #### Example:\n   * This example logs all resolve values\n   * ```js\n   * let tokens = trans.getResolveTokens();\n   * tokens.forEach(token => console.log(token + \" = \" + trans.injector().get(token)));\n   * ```\n   *\n   * #### Example:\n   * This example creates promises for each resolve value.\n   * This triggers fetches of resolves (if any have not yet been fetched).\n   * When all promises have all settled, it logs the resolve values.\n   * ```js\n   * let tokens = trans.getResolveTokens();\n   * let promise = tokens.map(token => trans.injector().getAsync(token));\n   * Promise.all(promises).then(values => console.log(\"Resolved values: \" + values));\n   * ```\n   *\n   * Note: Angular 1 users whould use `$q.all()`\n   *\n   * @param pathname resolve context's path name (e.g., `to` or `from`)\n   *\n   * @returns an array of resolve tokens (keys)\n   */\n  getResolveTokens(pathname = 'to'): any[] {\n    return new ResolveContext(this._treeChanges[pathname]).getTokens();\n  }\n\n  /**\n   * Dynamically adds a new [[Resolvable]] (i.e., [[StateDeclaration.resolve]]) to this transition.\n   *\n   * Allows a transition hook to dynamically add a Resolvable to this Transition.\n   *\n   * Use the [[Transition.injector]] to retrieve the resolved data in subsequent hooks ([[UIInjector.get]]).\n   *\n   * If a `state` argument is provided, the Resolvable is processed when that state is being entered.\n   * If no `state` is provided then the root state is used.\n   * If the given `state` has already been entered, the Resolvable is processed when any child state is entered.\n   * If no child states will be entered, the Resolvable is processed during the `onFinish` phase of the Transition.\n   *\n   * The `state` argument also scopes the resolved data.\n   * The resolved data is available from the injector for that `state` and any children states.\n   *\n   * #### Example:\n   * ```js\n   * transitionService.onBefore({}, transition => {\n   *   transition.addResolvable({\n   *     token: 'myResolve',\n   *     deps: ['MyService'],\n   *     resolveFn: myService => myService.getData()\n   *   });\n   * });\n   * ```\n   *\n   * @param resolvable a [[ResolvableLiteral]] object (or a [[Resolvable]])\n   * @param state the state in the \"to path\" which should receive the new resolve (otherwise, the root state)\n   */\n  addResolvable(resolvable: Resolvable | ResolvableLiteral, state: StateOrName = ''): void {\n    resolvable = is(Resolvable)(resolvable) ? resolvable : new Resolvable(resolvable);\n\n    const stateName: string = typeof state === 'string' ? state : state.name;\n    const topath = this._treeChanges.to;\n    const targetNode = find(topath, (node) => node.state.name === stateName);\n    const resolveContext: ResolveContext = new ResolveContext(topath);\n    resolveContext.addResolvables([resolvable as Resolvable], targetNode.state);\n  }\n\n  /**\n   * Gets the transition from which this transition was redirected.\n   *\n   * If the current transition is a redirect, this method returns the transition that was redirected.\n   *\n   * #### Example:\n   * ```js\n   * let transitionA = $state.go('A').transition\n   * transitionA.onStart({}, () => $state.target('B'));\n   * $transitions.onSuccess({ to: 'B' }, (trans) => {\n   *   trans.to().name === 'B'; // true\n   *   trans.redirectedFrom() === transitionA; // true\n   * });\n   * ```\n   *\n   * @returns The previous Transition, or null if this Transition is not the result of a redirection\n   */\n  redirectedFrom(): Transition {\n    return this._options.redirectedFrom || null;\n  }\n\n  /**\n   * Gets the original transition in a redirect chain\n   *\n   * A transition might belong to a long chain of multiple redirects.\n   * This method walks the [[redirectedFrom]] chain back to the original (first) transition in the chain.\n   *\n   * #### Example:\n   * ```js\n   * // states\n   * registry.register({ name: 'A', redirectTo: 'B' });\n   * registry.register({ name: 'B', redirectTo: 'C' });\n   * registry.register({ name: 'C', redirectTo: 'D' });\n   * registry.register({ name: 'D' });\n   *\n   * let transitionA = $state.go('A').transition\n   *\n   * $transitions.onSuccess({ to: 'D' }, (trans) => {\n   *   trans.to().name === 'D'; // true\n   *   trans.redirectedFrom().to().name === 'C'; // true\n   *   trans.originalTransition() === transitionA; // true\n   *   trans.originalTransition().to().name === 'A'; // true\n   * });\n   * ```\n   *\n   * @returns The original Transition that started a redirect chain\n   */\n  originalTransition(): Transition {\n    const rf = this.redirectedFrom();\n    return (rf && rf.originalTransition()) || this;\n  }\n\n  /**\n   * Get the transition options\n   *\n   * @returns the options for this Transition.\n   */\n  options(): TransitionOptions {\n    return this._options;\n  }\n\n  /**\n   * Gets the states being entered.\n   *\n   * @returns an array of states that will be entered during this transition.\n   */\n  entering(): StateDeclaration[] {\n    return map(this._treeChanges.entering, prop('state')).map(stateSelf);\n  }\n\n  /**\n   * Gets the states being exited.\n   *\n   * @returns an array of states that will be exited during this transition.\n   */\n  exiting(): StateDeclaration[] {\n    return map(this._treeChanges.exiting, prop('state')).map(stateSelf).reverse();\n  }\n\n  /**\n   * Gets the states being retained.\n   *\n   * @returns an array of states that are already entered from a previous Transition, that will not be\n   *    exited during this Transition\n   */\n  retained(): StateDeclaration[] {\n    return map(this._treeChanges.retained, prop('state')).map(stateSelf);\n  }\n\n  /**\n   * Get the [[ViewConfig]]s associated with this Transition\n   *\n   * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.\n   * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., \"to\" or \"entering\").\n   *\n   * @param pathname the name of the path to fetch views for:\n   *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n   * @param state If provided, only returns the `ViewConfig`s for a single state in the path\n   *\n   * @returns a list of ViewConfig objects for the given path.\n   */\n  views(pathname = 'entering', state?: StateObject): ViewConfig[] {\n    let path = this._treeChanges[pathname];\n    path = !state ? path : path.filter(propEq('state', state));\n    return path.map(prop('views')).filter(identity).reduce(unnestR, []);\n  }\n\n  /**\n   * Return the transition's tree changes\n   *\n   * A transition goes from one state/parameters to another state/parameters.\n   * During a transition, states are entered and/or exited.\n   *\n   * This function returns various branches (paths) which represent the changes to the\n   * active state tree that are caused by the transition.\n   *\n   * @param pathname The name of the tree changes path to get:\n   *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n   */\n  treeChanges(pathname: string): PathNode[];\n  treeChanges(): TreeChanges;\n  treeChanges(pathname?: string) {\n    return pathname ? this._treeChanges[pathname] : this._treeChanges;\n  }\n\n  /**\n   * Creates a new transition that is a redirection of the current one.\n   *\n   * This transition can be returned from a [[TransitionService]] hook to\n   * redirect a transition to a new state and/or set of parameters.\n   *\n   * @internal\n   *\n   * @returns Returns a new [[Transition]] instance.\n   */\n  redirect(targetState: TargetState): Transition {\n    let redirects = 1,\n      trans: Transition = this;\n    // tslint:disable-next-line:no-conditional-assignment\n    while ((trans = trans.redirectedFrom()) != null) {\n      if (++redirects > 20) throw new Error(`Too many consecutive Transition redirects (20+)`);\n    }\n\n    const redirectOpts: TransitionOptions = { redirectedFrom: this, source: 'redirect' };\n    // If the original transition was caused by URL sync, then use { location: 'replace' }\n    // on the new transition (unless the target state explicitly specifies location: false).\n    // This causes the original url to be replaced with the url for the redirect target\n    // so the original url disappears from the browser history.\n    if (this.options().source === 'url' && targetState.options().location !== false) {\n      redirectOpts.location = 'replace';\n    }\n\n    const newOptions = extend({}, this.options(), targetState.options(), redirectOpts);\n    targetState = targetState.withOptions(newOptions, true);\n\n    const newTransition = this.router.transitionService.create(this._treeChanges.from, targetState);\n    const originalEnteringNodes = this._treeChanges.entering;\n    const redirectEnteringNodes = newTransition._treeChanges.entering;\n\n    // --- Re-use resolve data from original transition ---\n    // When redirecting from a parent state to a child state where the parent parameter values haven't changed\n    // (because of the redirect), the resolves fetched by the original transition are still valid in the\n    // redirected transition.\n    //\n    // This allows you to define a redirect on a parent state which depends on an async resolve value.\n    // You can wait for the resolve, then redirect to a child state based on the result.\n    // The redirected transition does not have to re-fetch the resolve.\n    // ---------------------------------------------------------\n\n    const nodeIsReloading = (reloadState: StateObject) => (node: PathNode) => {\n      return reloadState && node.state.includes[reloadState.name];\n    };\n\n    // Find any \"entering\" nodes in the redirect path that match the original path and aren't being reloaded\n    const matchingEnteringNodes: PathNode[] = PathUtils.matching(\n      redirectEnteringNodes,\n      originalEnteringNodes,\n      PathUtils.nonDynamicParams\n    ).filter(not(nodeIsReloading(targetState.options().reloadState)));\n\n    // Use the existing (possibly pre-resolved) resolvables for the matching entering nodes.\n    matchingEnteringNodes.forEach((node, idx) => {\n      node.resolvables = originalEnteringNodes[idx].resolvables;\n    });\n\n    return newTransition;\n  }\n\n  /** @internal If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed */\n  private _changedParams(): Param[] {\n    const tc = this._treeChanges;\n\n    /** Return undefined if it's not a \"dynamic\" transition, for the following reasons */\n    // If user explicitly wants a reload\n    if (this._options.reload) return undefined;\n    // If any states are exiting or entering\n    if (tc.exiting.length || tc.entering.length) return undefined;\n    // If to/from path lengths differ\n    if (tc.to.length !== tc.from.length) return undefined;\n    // If the to/from paths are different\n    const pathsDiffer: boolean = arrayTuples(tc.to, tc.from)\n      .map((tuple) => tuple[0].state !== tuple[1].state)\n      .reduce(anyTrueR, false);\n    if (pathsDiffer) return undefined;\n\n    // Find any parameter values that differ\n    const nodeSchemas: Param[][] = tc.to.map((node: PathNode) => node.paramSchema);\n    const [toValues, fromValues] = [tc.to, tc.from].map((path) => path.map((x) => x.paramValues));\n    const tuples = arrayTuples(nodeSchemas, toValues, fromValues);\n\n    return tuples.map(([schema, toVals, fromVals]) => Param.changed(schema, toVals, fromVals)).reduce(unnestR, []);\n  }\n\n  /**\n   * Returns true if the transition is dynamic.\n   *\n   * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.\n   *\n   * @returns true if the Transition is dynamic\n   */\n  dynamic(): boolean {\n    const changes = this._changedParams();\n    return !changes ? false : changes.map((x) => x.dynamic).reduce(anyTrueR, false);\n  }\n\n  /**\n   * Returns true if the transition is ignored.\n   *\n   * A transition is ignored if no states are entered nor exited, and no parameter values have changed.\n   *\n   * @returns true if the Transition is ignored.\n   */\n  ignored(): boolean {\n    return !!this._ignoredReason();\n  }\n\n  /** @internal */\n  _ignoredReason(): 'SameAsCurrent' | 'SameAsPending' | undefined {\n    const pending = this.router.globals.transition;\n    const reloadState = this._options.reloadState;\n\n    const same = (pathA, pathB) => {\n      if (pathA.length !== pathB.length) return false;\n      const matching = PathUtils.matching(pathA, pathB);\n      return pathA.length === matching.filter((node) => !reloadState || !node.state.includes[reloadState.name]).length;\n    };\n\n    const newTC = this.treeChanges();\n    const pendTC = pending && pending.treeChanges();\n\n    if (pendTC && same(pendTC.to, newTC.to) && same(pendTC.exiting, newTC.exiting)) return 'SameAsPending';\n    if (newTC.exiting.length === 0 && newTC.entering.length === 0 && same(newTC.from, newTC.to)) return 'SameAsCurrent';\n  }\n\n  /**\n   * Runs the transition\n   *\n   * This method is generally called from the [[StateService.transitionTo]]\n   *\n   * @internal\n   *\n   * @returns a promise for a successful transition.\n   */\n  run(): Promise<any> {\n    const runAllHooks = TransitionHook.runAllHooks;\n\n    // Gets transition hooks array for the given phase\n    const getHooksFor = (phase: TransitionHookPhase) => this._hookBuilder.buildHooksForPhase(phase);\n\n    // When the chain is complete, then resolve or reject the deferred\n    const transitionSuccess = () => {\n      trace.traceSuccess(this.$to(), this);\n      this.success = true;\n      this._deferred.resolve(this.to());\n      runAllHooks(getHooksFor(TransitionHookPhase.SUCCESS));\n    };\n\n    const transitionError = (reason: Rejection) => {\n      trace.traceError(reason, this);\n      this.success = false;\n      this._deferred.reject(reason);\n      this._error = reason;\n      runAllHooks(getHooksFor(TransitionHookPhase.ERROR));\n    };\n\n    const runTransition = () => {\n      // Wait to build the RUN hook chain until the BEFORE hooks are done\n      // This allows a BEFORE hook to dynamically add additional RUN hooks via the Transition object.\n      const allRunHooks = getHooksFor(TransitionHookPhase.RUN);\n      const done = () => services.$q.when(undefined);\n      return TransitionHook.invokeHooks(allRunHooks, done);\n    };\n\n    const startTransition = () => {\n      const globals = this.router.globals;\n\n      globals.lastStartedTransitionId = this.$id;\n      globals.transition = this;\n      globals.transitionHistory.enqueue(this);\n\n      trace.traceTransitionStart(this);\n\n      return services.$q.when(undefined);\n    };\n\n    const allBeforeHooks = getHooksFor(TransitionHookPhase.BEFORE);\n    TransitionHook.invokeHooks(allBeforeHooks, startTransition)\n      .then(runTransition)\n      .then(transitionSuccess, transitionError);\n\n    return this.promise;\n  }\n\n  /** Checks if this transition is currently active/running. */\n  isActive = () => this.router.globals.transition === this;\n\n  /**\n   * Checks if the Transition is valid\n   *\n   * @returns true if the Transition is valid\n   */\n  valid() {\n    return !this.error() || this.success !== undefined;\n  }\n\n  /**\n   * Aborts this transition\n   *\n   * Imperative API to abort a Transition.\n   * This only applies to Transitions that are not yet complete.\n   */\n  abort() {\n    // Do not set flag if the transition is already complete\n    if (isUndefined(this.success)) {\n      this._aborted = true;\n    }\n  }\n\n  /**\n   * The Transition error reason.\n   *\n   * If the transition is invalid (and could not be run), returns the reason the transition is invalid.\n   * If the transition was valid and ran, but was not successful, returns the reason the transition failed.\n   *\n   * @returns a transition rejection explaining why the transition is invalid, or the reason the transition failed.\n   */\n  error(): Rejection {\n    const state: StateObject = this.$to();\n\n    if (state.self.abstract) {\n      return Rejection.invalid(`Cannot transition to abstract state '${state.name}'`);\n    }\n\n    const paramDefs = state.parameters();\n    const values = this.params();\n    const invalidParams = paramDefs.filter((param) => !param.validates(values[param.id]));\n\n    if (invalidParams.length) {\n      const invalidValues = invalidParams.map((param) => `[${param.id}:${stringify(values[param.id])}]`).join(', ');\n      const detail = `The following parameter values are not valid for state '${state.name}': ${invalidValues}`;\n      return Rejection.invalid(detail);\n    }\n\n    if (this.success === false) return this._error;\n  }\n\n  /**\n   * A string representation of the Transition\n   *\n   * @returns A string representation of the Transition\n   */\n  toString() {\n    const fromStateOrName = this.from();\n    const toStateOrName = this.to();\n\n    const avoidEmptyHash = (params: RawParams) =>\n      params['#'] !== null && params['#'] !== undefined ? params : omit(params, ['#']);\n\n    // (X) means the to state is invalid.\n    const id = this.$id,\n      from = isObject(fromStateOrName) ? fromStateOrName.name : fromStateOrName,\n      fromParams = stringify(avoidEmptyHash(this._treeChanges.from.map(prop('paramValues')).reduce(mergeR, {}))),\n      toValid = this.valid() ? '' : '(X) ',\n      to = isObject(toStateOrName) ? toStateOrName.name : toStateOrName,\n      toParams = stringify(avoidEmptyHash(this.params()));\n\n    return `Transition#${id}( '${from}'${fromParams} -> ${toValid}'${to}'${toParams} )`;\n  }\n}\n",
    "import { map, inherit, identity, unnest, tail, find, Obj, allTrueR, unnestR, arrayTuples } from '../common/common';\nimport { prop, propEq } from '../common/hof';\nimport { isArray, isString, isDefined } from '../common/predicates';\nimport { Param, DefType } from '../params/param';\nimport { ParamTypes } from '../params/paramTypes';\nimport { RawParams } from '../params/interface';\nimport { UrlMatcherCompileConfig } from './interface';\nimport { joinNeighborsR, splitOnDelim } from '../common/strings';\nimport { ParamType } from '../params';\nimport { defaults } from '../common';\nimport { ParamFactory } from './urlMatcherFactory';\n\nfunction quoteRegExp(str: any, param?: any) {\n  let surroundPattern = ['', ''],\n    result = str.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, '\\\\$&');\n  if (!param) return result;\n\n  switch (param.squash) {\n    case false:\n      surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')];\n      break;\n    case true:\n      result = result.replace(/\\/$/, '');\n      surroundPattern = ['(?:/(', ')|/)?'];\n      break;\n    default:\n      surroundPattern = [`(${param.squash}|`, ')?'];\n      break;\n  }\n  return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];\n}\n\nconst memoizeTo = (obj: Obj, _prop: string, fn: Function) => (obj[_prop] = obj[_prop] || fn());\n\nconst splitOnSlash = splitOnDelim('/');\n\ninterface UrlMatcherCache {\n  segments?: any[];\n  weights?: number[];\n  path?: UrlMatcher[];\n  parent?: UrlMatcher;\n  pattern?: RegExp;\n}\n\ninterface MatchDetails {\n  id: string;\n  regexp: string;\n  segment: string;\n  type: ParamType;\n}\n\nconst defaultConfig: UrlMatcherCompileConfig = {\n  state: { params: {} },\n  strict: true,\n  caseInsensitive: true,\n  decodeParams: true,\n};\n\n/**\n * Matches URLs against patterns.\n *\n * Matches URLs against patterns and extracts named parameters from the path or the search\n * part of the URL.\n *\n * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)\n * parameters. Multiple search parameter names are separated by '&'. Search parameters\n * do not influence whether or not a URL is matched, but their values are passed through into\n * the matched parameters returned by [[UrlMatcher.exec]].\n *\n * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)\n * or colon placeholders (`/somePath/:param`).\n *\n * - *A parameter RegExp* may be defined for a param after a colon\n * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.\n * The regexp must match for the url to be matched.\n * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n *\n * Note: a RegExp parameter will encode its value using either [[ParamTypes.path]] or [[ParamTypes.query]].\n *\n * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`) in curly brace parameters.\n *   See [[UrlMatcherFactory.type]] for more information.\n *\n * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).\n *   A catch-all * parameter value will contain the remainder of the URL.\n *\n * ---\n *\n * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n * must be unique within the pattern (across both path and search parameters).\n * A path parameter matches any number of characters other than '/'. For catch-all\n * placeholders the path parameter matches any number of characters.\n *\n * Examples:\n *\n * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n * * `'/user/{id:[^/]*}'` - Same as the previous example.\n * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n *   parameter consists of 1 to 8 hex digits.\n * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n *   path into the parameter 'path'.\n * * `'/files/*path'` - ditto.\n * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start\n *\n */\nexport class UrlMatcher {\n  /** @internal */\n  static nameValidator: RegExp = /^\\w+([-.]+\\w+)*(?:\\[\\])?$/;\n\n  /** @internal */\n  private _cache: UrlMatcherCache = { path: [this] };\n  /** @internal */\n  private _children: UrlMatcher[] = [];\n  /** @internal */\n  private _params: Param[] = [];\n  /** @internal */\n  private _segments: string[] = [];\n  /** @internal */\n  private _compiled: string[] = [];\n  /** @internal */\n  private readonly config: UrlMatcherCompileConfig;\n\n  /** The pattern that was passed into the constructor */\n  public pattern: string;\n\n  /** @internal */\n  static encodeDashes(str: string) {\n    // Replace dashes with encoded \"\\-\"\n    return encodeURIComponent(str).replace(/-/g, (c) => `%5C%${c.charCodeAt(0).toString(16).toUpperCase()}`);\n  }\n\n  /** @internal Given a matcher, return an array with the matcher's path segments and path params, in order */\n  static pathSegmentsAndParams(matcher: UrlMatcher) {\n    const staticSegments = matcher._segments;\n    const pathParams = matcher._params.filter((p) => p.location === DefType.PATH);\n    return arrayTuples(staticSegments, pathParams.concat(undefined))\n      .reduce(unnestR, [])\n      .filter((x) => x !== '' && isDefined(x));\n  }\n\n  /** @internal Given a matcher, return an array with the matcher's query params */\n  static queryParams(matcher: UrlMatcher): Param[] {\n    return matcher._params.filter((p) => p.location === DefType.SEARCH);\n  }\n\n  /**\n   * Compare two UrlMatchers\n   *\n   * This comparison function converts a UrlMatcher into static and dynamic path segments.\n   * Each static path segment is a static string between a path separator (slash character).\n   * Each dynamic segment is a path parameter.\n   *\n   * The comparison function sorts static segments before dynamic ones.\n   */\n  static compare(a: UrlMatcher, b: UrlMatcher): number {\n    /**\n     * Turn a UrlMatcher and all its parent matchers into an array\n     * of slash literals '/', string literals, and Param objects\n     *\n     * This example matcher matches strings like \"/foo/:param/tail\":\n     * var matcher = $umf.compile(\"/foo\").append($umf.compile(\"/:param\")).append($umf.compile(\"/\")).append($umf.compile(\"tail\"));\n     * var result = segments(matcher); // [ '/', 'foo', '/', Param, '/', 'tail' ]\n     *\n     * Caches the result as `matcher._cache.segments`\n     */\n    const segments = (matcher: UrlMatcher) =>\n      (matcher._cache.segments =\n        matcher._cache.segments ||\n        matcher._cache.path\n          .map(UrlMatcher.pathSegmentsAndParams)\n          .reduce(unnestR, [])\n          .reduce(joinNeighborsR, [])\n          .map((x) => (isString(x) ? splitOnSlash(x) : x))\n          .reduce(unnestR, []));\n\n    /**\n     * Gets the sort weight for each segment of a UrlMatcher\n     *\n     * Caches the result as `matcher._cache.weights`\n     */\n    const weights = (matcher: UrlMatcher) =>\n      (matcher._cache.weights =\n        matcher._cache.weights ||\n        segments(matcher).map((segment) => {\n          // Sort slashes first, then static strings, the Params\n          if (segment === '/') return 1;\n          if (isString(segment)) return 2;\n          if (segment instanceof Param) return 3;\n        }));\n\n    /**\n     * Pads shorter array in-place (mutates)\n     */\n    const padArrays = (l: any[], r: any[], padVal: any) => {\n      const len = Math.max(l.length, r.length);\n      while (l.length < len) l.push(padVal);\n      while (r.length < len) r.push(padVal);\n    };\n\n    const weightsA = weights(a),\n      weightsB = weights(b);\n    padArrays(weightsA, weightsB, 0);\n\n    const _pairs = arrayTuples(weightsA, weightsB);\n    let cmp, i;\n\n    for (i = 0; i < _pairs.length; i++) {\n      cmp = _pairs[i][0] - _pairs[i][1];\n      if (cmp !== 0) return cmp;\n    }\n\n    return 0;\n  }\n\n  /**\n   * @param pattern The pattern to compile into a matcher.\n   * @param paramTypes The [[ParamTypes]] registry\n   * @param paramFactory A [[ParamFactory]] object\n   * @param config  A [[UrlMatcherCompileConfig]] configuration object\n   */\n  constructor(pattern: string, paramTypes: ParamTypes, paramFactory: ParamFactory, config?: UrlMatcherCompileConfig) {\n    this.config = config = defaults(config, defaultConfig);\n    this.pattern = pattern;\n\n    // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n    //   '*' name\n    //   ':' name\n    //   '{' name '}'\n    //   '{' name ':' regexp '}'\n    // The regular expression is somewhat complicated due to the need to allow curly braces\n    // inside the regular expression. The placeholder regexp breaks down as follows:\n    //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n    //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n    //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n    //    [^{}\\\\]+                       - anything other than curly braces or backslash\n    //    \\\\.                            - a backslash escape\n    //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n    const placeholder = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g;\n    const searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g;\n    const patterns: any[][] = [];\n    let last = 0;\n    let matchArray: RegExpExecArray;\n\n    const checkParamErrors = (id: string) => {\n      if (!UrlMatcher.nameValidator.test(id)) throw new Error(`Invalid parameter name '${id}' in pattern '${pattern}'`);\n      if (find(this._params, propEq('id', id)))\n        throw new Error(`Duplicate parameter name '${id}' in pattern '${pattern}'`);\n    };\n\n    // Split into static segments separated by path parameter placeholders.\n    // The number of segments is always 1 more than the number of parameters.\n    const matchDetails = (m: RegExpExecArray, isSearch: boolean): MatchDetails => {\n      // IE[78] returns '' for unmatched groups instead of null\n      const id: string = m[2] || m[3];\n      const regexp: string = isSearch ? m[4] : m[4] || (m[1] === '*' ? '[\\\\s\\\\S]*' : null);\n\n      const makeRegexpType = (str) =>\n        inherit(paramTypes.type(isSearch ? 'query' : 'path'), {\n          pattern: new RegExp(str, this.config.caseInsensitive ? 'i' : undefined),\n        });\n\n      return {\n        id,\n        regexp,\n        segment: pattern.substring(last, m.index),\n        type: !regexp ? null : paramTypes.type(regexp) || makeRegexpType(regexp),\n      };\n    };\n\n    let details: MatchDetails;\n    let segment: string;\n\n    // tslint:disable-next-line:no-conditional-assignment\n    while ((matchArray = placeholder.exec(pattern))) {\n      details = matchDetails(matchArray, false);\n      if (details.segment.indexOf('?') >= 0) break; // we're into the search part\n\n      checkParamErrors(details.id);\n      this._params.push(paramFactory.fromPath(details.id, details.type, config.state));\n      this._segments.push(details.segment);\n      patterns.push([details.segment, tail(this._params)]);\n      last = placeholder.lastIndex;\n    }\n    segment = pattern.substring(last);\n\n    // Find any search parameter names and remove them from the last segment\n    const i = segment.indexOf('?');\n\n    if (i >= 0) {\n      const search = segment.substring(i);\n      segment = segment.substring(0, i);\n\n      if (search.length > 0) {\n        last = 0;\n\n        // tslint:disable-next-line:no-conditional-assignment\n        while ((matchArray = searchPlaceholder.exec(search))) {\n          details = matchDetails(matchArray, true);\n          checkParamErrors(details.id);\n          this._params.push(paramFactory.fromSearch(details.id, details.type, config.state));\n          last = placeholder.lastIndex;\n          // check if ?&\n        }\n      }\n    }\n\n    this._segments.push(segment);\n    this._compiled = patterns.map((_pattern) => quoteRegExp.apply(null, _pattern)).concat(quoteRegExp(segment));\n  }\n\n  /**\n   * Creates a new concatenated UrlMatcher\n   *\n   * Builds a new UrlMatcher by appending another UrlMatcher to this one.\n   *\n   * @param url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.\n   */\n  append(url: UrlMatcher): UrlMatcher {\n    this._children.push(url);\n    url._cache = {\n      path: this._cache.path.concat(url),\n      parent: this,\n      pattern: null,\n    };\n    return url;\n  }\n\n  /** @internal */\n  isRoot(): boolean {\n    return this._cache.path[0] === this;\n  }\n\n  /** Returns the input pattern string */\n  toString(): string {\n    return this.pattern;\n  }\n\n  private _getDecodedParamValue(value: any, param: Param): any {\n    if (isDefined(value)) {\n      if (this.config.decodeParams && !param.type.raw) {\n        if (isArray(value)) {\n          value = value.map((paramValue) => decodeURIComponent(paramValue));\n        } else {\n          value = decodeURIComponent(value);\n        }\n      }\n\n      value = param.type.decode(value);\n    }\n\n    return param.value(value);\n  }\n\n  /**\n   * Tests the specified url/path against this matcher.\n   *\n   * Tests if the given url matches this matcher's pattern, and returns an object containing the captured\n   * parameter values.  Returns null if the path does not match.\n   *\n   * The returned object contains the values\n   * of any search parameters that are mentioned in the pattern, but their value may be null if\n   * they are not present in `search`. This means that search parameters are always treated\n   * as optional.\n   *\n   * #### Example:\n   * ```js\n   * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n   *   x: '1', q: 'hello'\n   * });\n   * // returns { id: 'bob', q: 'hello', r: null }\n   * ```\n   *\n   * @param path    The URL path to match, e.g. `$location.path()`.\n   * @param search  URL search parameters, e.g. `$location.search()`.\n   * @param hash    URL hash e.g. `$location.hash()`.\n   * @param options\n   *\n   * @returns The captured parameter values.\n   */\n  exec(path: string, search: any = {}, hash?: string, options: any = {}): RawParams {\n    const match = memoizeTo(this._cache, 'pattern', () => {\n      return new RegExp(\n        [\n          '^',\n          unnest(this._cache.path.map(prop('_compiled'))).join(''),\n          this.config.strict === false ? '/?' : '',\n          '$',\n        ].join(''),\n        this.config.caseInsensitive ? 'i' : undefined\n      );\n    }).exec(path);\n\n    if (!match) return null;\n\n    // options = defaults(options, { isolate: false });\n\n    const allParams: Param[] = this.parameters(),\n      pathParams: Param[] = allParams.filter((param) => !param.isSearch()),\n      searchParams: Param[] = allParams.filter((param) => param.isSearch()),\n      nPathSegments = this._cache.path.map((urlm) => urlm._segments.length - 1).reduce((a, x) => a + x),\n      values: RawParams = {};\n\n    if (nPathSegments !== match.length - 1) throw new Error(`Unbalanced capture group in route '${this.pattern}'`);\n\n    function decodePathArray(paramVal: string) {\n      const reverseString = (str: string) => str.split('').reverse().join('');\n      const unquoteDashes = (str: string) => str.replace(/\\\\-/g, '-');\n\n      const split = reverseString(paramVal).split(/-(?!\\\\)/);\n      const allReversed = map(split, reverseString);\n      return map(allReversed, unquoteDashes).reverse();\n    }\n\n    for (let i = 0; i < nPathSegments; i++) {\n      const param: Param = pathParams[i];\n      let value: any | any[] = match[i + 1];\n\n      // if the param value matches a pre-replace pair, replace the value before decoding.\n      for (let j = 0; j < param.replace.length; j++) {\n        if (param.replace[j].from === value) value = param.replace[j].to;\n      }\n\n      if (value && param.array === true) value = decodePathArray(value);\n\n      values[param.id] = this._getDecodedParamValue(value, param);\n    }\n    searchParams.forEach((param: Param) => {\n      let value = search[param.id];\n\n      for (let j = 0; j < param.replace.length; j++) {\n        if (param.replace[j].from === value) value = param.replace[j].to;\n      }\n\n      values[param.id] = this._getDecodedParamValue(value, param);\n    });\n\n    if (hash) values['#'] = hash;\n\n    return values;\n  }\n\n  /**\n   * @internal\n   * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.\n   *\n   * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the\n   *    pattern has no parameters, an empty array is returned.\n   */\n  parameters(opts: any = {}): Param[] {\n    if (opts.inherit === false) return this._params;\n    return unnest(this._cache.path.map((matcher) => matcher._params));\n  }\n\n  /**\n   * @internal\n   * Returns a single parameter from this UrlMatcher by id\n   *\n   * @param id\n   * @param opts\n   * @returns {T|Param|any|boolean|UrlMatcher|null}\n   */\n  parameter(id: string, opts: any = {}): Param {\n    const findParam = () => {\n      for (const param of this._params) {\n        if (param.id === id) return param;\n      }\n    };\n\n    const parent = this._cache.parent;\n    return findParam() || (opts.inherit !== false && parent && parent.parameter(id, opts)) || null;\n  }\n\n  /**\n   * Validates the input parameter values against this UrlMatcher\n   *\n   * Checks an object hash of parameters to validate their correctness according to the parameter\n   * types of this `UrlMatcher`.\n   *\n   * @param params The object hash of parameters to validate.\n   * @returns Returns `true` if `params` validates, otherwise `false`.\n   */\n  validates(params: RawParams): boolean {\n    const validParamVal = (param: Param, val: any) => !param || param.validates(val);\n\n    params = params || {};\n\n    // I'm not sure why this checks only the param keys passed in, and not all the params known to the matcher\n    const paramSchema = this.parameters().filter((paramDef) => params.hasOwnProperty(paramDef.id));\n    return paramSchema.map((paramDef) => validParamVal(paramDef, params[paramDef.id])).reduce(allTrueR, true);\n  }\n\n  /**\n   * Given a set of parameter values, creates a URL from this UrlMatcher.\n   *\n   * Creates a URL that matches this pattern by substituting the specified values\n   * for the path and search parameters.\n   *\n   * #### Example:\n   * ```js\n   * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n   * // returns '/user/bob?q=yes'\n   * ```\n   *\n   * @param values  the values to substitute for the parameters in this pattern.\n   * @returns the formatted URL (path and optionally search part).\n   */\n  format(values: RawParams = {}) {\n    // Build the full path of UrlMatchers (including all parent UrlMatchers)\n    const urlMatchers = this._cache.path;\n\n    // Extract all the static segments and Params (processed as ParamDetails)\n    // into an ordered array\n    const pathSegmentsAndParams: Array<string | ParamDetails> = urlMatchers\n      .map(UrlMatcher.pathSegmentsAndParams)\n      .reduce(unnestR, [])\n      .map((x) => (isString(x) ? x : getDetails(x)));\n\n    // Extract the query params into a separate array\n    const queryParams: Array<ParamDetails> = urlMatchers\n      .map(UrlMatcher.queryParams)\n      .reduce(unnestR, [])\n      .map(getDetails);\n\n    const isInvalid = (param: ParamDetails) => param.isValid === false;\n    if (pathSegmentsAndParams.concat(queryParams).filter(isInvalid).length) {\n      return null;\n    }\n\n    /**\n     * Given a Param, applies the parameter value, then returns detailed information about it\n     */\n    function getDetails(param: Param): ParamDetails {\n      // Normalize to typed value\n      const value = param.value(values[param.id]);\n      const isValid = param.validates(value);\n      const isDefaultValue = param.isDefaultValue(value);\n      // Check if we're in squash mode for the parameter\n      const squash = isDefaultValue ? param.squash : false;\n      // Allow the Parameter's Type to encode the value\n      const encoded = param.type.encode(value);\n\n      return { param, value, isValid, isDefaultValue, squash, encoded };\n    }\n\n    // Build up the path-portion from the list of static segments and parameters\n    const pathString = pathSegmentsAndParams.reduce((acc: string, x: string | ParamDetails) => {\n      // The element is a static segment (a raw string); just append it\n      if (isString(x)) return acc + x;\n\n      // Otherwise, it's a ParamDetails.\n      const { squash, encoded, param } = x;\n\n      // If squash is === true, try to remove a slash from the path\n      if (squash === true) return acc.match(/\\/$/) ? acc.slice(0, -1) : acc;\n      // If squash is a string, use the string for the param value\n      if (isString(squash)) return acc + squash;\n      if (squash !== false) return acc; // ?\n      if (encoded == null) return acc;\n      // If this parameter value is an array, encode the value using encodeDashes\n      if (isArray(encoded)) return acc + map(<string[]>encoded, UrlMatcher.encodeDashes).join('-');\n      // If the parameter type is \"raw\", then do not encodeURIComponent\n      if (param.raw) return acc + encoded;\n      // Encode the value\n      return acc + encodeURIComponent(<string>encoded);\n    }, '');\n\n    // Build the query string by applying parameter values (array or regular)\n    // then mapping to key=value, then flattening and joining using \"&\"\n    const queryString = queryParams\n      .map((paramDetails: ParamDetails) => {\n        let { param, squash, encoded, isDefaultValue } = paramDetails;\n        if (encoded == null || (isDefaultValue && squash !== false)) return;\n        if (!isArray(encoded)) encoded = [<string>encoded];\n        if (encoded.length === 0) return;\n        if (!param.raw) encoded = map(<string[]>encoded, encodeURIComponent);\n\n        return (<string[]>encoded).map((val) => `${param.id}=${val}`);\n      })\n      .filter(identity)\n      .reduce(unnestR, [])\n      .join('&');\n\n    // Concat the pathstring with the queryString (if exists) and the hashString (if exists)\n    return pathString + (queryString ? `?${queryString}` : '') + (values['#'] ? '#' + values['#'] : '');\n  }\n}\n\n/** @internal */\ninterface ParamDetails {\n  param: Param;\n  value: any;\n  isValid: boolean;\n  isDefaultValue: boolean;\n  squash: boolean | string;\n  encoded: string | string[];\n}\n",
    "import { extend, forEach, isDefined, isFunction, isObject } from '../common';\nimport { UrlMatcher } from './urlMatcher';\nimport { DefType, Param, ParamType, ParamTypeDefinition } from '../params';\nimport { UrlMatcherCompileConfig } from './interface';\nimport { StateDeclaration } from '../state';\nimport { UIRouter } from '../router';\n\nexport class ParamFactory {\n  fromConfig(id: string, type: ParamType, state: StateDeclaration) {\n    return new Param(id, type, DefType.CONFIG, this.router.urlService.config, state);\n  }\n\n  fromPath(id: string, type: ParamType, state: StateDeclaration) {\n    return new Param(id, type, DefType.PATH, this.router.urlService.config, state);\n  }\n\n  fromSearch(id: string, type: ParamType, state: StateDeclaration) {\n    return new Param(id, type, DefType.SEARCH, this.router.urlService.config, state);\n  }\n\n  constructor(private router: UIRouter) {}\n}\n\n/**\n * Factory for [[UrlMatcher]] instances.\n *\n * The factory is available to ng1 services as\n * `$urlMatcherFactory` or ng1 providers as `$urlMatcherFactoryProvider`.\n */\nexport class UrlMatcherFactory {\n  /** Creates a new [[Param]] for a given location (DefType) */\n  paramFactory = new ParamFactory(this.router);\n  // TODO: Check if removal of this will break anything, then remove these\n  UrlMatcher: typeof UrlMatcher = UrlMatcher;\n  Param: typeof Param = Param;\n\n  // TODO: move implementations to UrlConfig (urlService.config)\n  constructor(/** @internal */ private router: UIRouter) {}\n\n  /**\n   * Creates a [[UrlMatcher]] for the specified pattern.\n   *\n   * @param pattern  The URL pattern.\n   * @param config  The config object hash.\n   * @returns The UrlMatcher.\n   */\n  compile(pattern: string, config?: UrlMatcherCompileConfig) {\n    const urlConfig = this.router.urlService.config;\n    // backward-compatible support for config.params -> config.state.params\n    const params = config && !config.state && (config as any).params;\n    config = params ? { state: { params }, ...config } : config;\n    const globalConfig: UrlMatcherCompileConfig = {\n      strict: urlConfig._isStrictMode,\n      caseInsensitive: urlConfig._isCaseInsensitive,\n      decodeParams: urlConfig._decodeParams,\n    };\n    return new UrlMatcher(pattern, urlConfig.paramTypes, this.paramFactory, extend(globalConfig, config));\n  }\n\n  /**\n   * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.\n   *\n   * @param object  The object to perform the type check against.\n   * @returns `true` if the object matches the `UrlMatcher` interface, by\n   *          implementing all the same methods.\n   */\n  isMatcher(object: any): boolean {\n    // TODO: typeof?\n    if (!isObject(object)) return false;\n    let result = true;\n\n    forEach(UrlMatcher.prototype, (val, name) => {\n      if (isFunction(val)) result = result && isDefined(object[name]) && isFunction(object[name]);\n    });\n    return result;\n  }\n\n  /** @internal */\n  $get() {\n    const urlConfig = this.router.urlService.config;\n    urlConfig.paramTypes.enqueue = false;\n    urlConfig.paramTypes._flushTypeQueue();\n    return this;\n  }\n\n  /** @deprecated use [[UrlConfig.caseInsensitive]] */\n  caseInsensitive = (value?: boolean) => this.router.urlService.config.caseInsensitive(value);\n\n  /** @deprecated use [[UrlConfig.defaultSquashPolicy]] */\n  defaultSquashPolicy = (value?: boolean | string) => this.router.urlService.config.defaultSquashPolicy(value);\n\n  /** @deprecated use [[UrlConfig.strictMode]] */\n  strictMode = (value?: boolean) => this.router.urlService.config.strictMode(value);\n\n  /** @deprecated use [[UrlConfig.type]] */\n  type = (name: string, definition?: ParamTypeDefinition, definitionFn?: () => ParamTypeDefinition) => {\n    return this.router.urlService.config.type(name, definition, definitionFn) || this;\n  };\n}\n",
    "import { StateDeclaration } from '../state';\nimport { UrlMatcher } from './urlMatcher';\nimport { isString, isDefined, isFunction } from '../common/predicates';\nimport { UIRouter } from '../router';\nimport { identity, extend } from '../common/common';\nimport { is, or, pattern } from '../common/hof';\nimport { StateObject } from '../state/stateObject';\nimport { RawParams } from '../params/interface';\nimport {\n  UrlRule,\n  UrlRuleMatchFn,\n  UrlRuleHandlerFn,\n  UrlRuleType,\n  UrlParts,\n  MatcherUrlRule,\n  StateRule,\n  RegExpRule,\n} from './interface';\n\n/**\n * Creates a [[UrlRule]]\n *\n * Creates a [[UrlRule]] from a:\n *\n * - `string`\n * - [[UrlMatcher]]\n * - `RegExp`\n * - [[StateObject]]\n */\nexport class UrlRuleFactory {\n  static isUrlRule = (obj) => obj && ['type', 'match', 'handler'].every((key) => isDefined(obj[key]));\n\n  constructor(public router: UIRouter) {}\n\n  compile(str: string) {\n    return this.router.urlMatcherFactory.compile(str);\n  }\n\n  create(\n    what: string | UrlMatcher | StateObject | StateDeclaration | RegExp | UrlRuleMatchFn,\n    handler?: string | UrlRuleHandlerFn\n  ): UrlRule {\n    const { isState, isStateDeclaration } = StateObject;\n    const makeRule = pattern([\n      [isString, (_what: string) => makeRule(this.compile(_what))],\n      [is(UrlMatcher), (_what: UrlMatcher) => this.fromUrlMatcher(_what, handler)],\n      [or(isState, isStateDeclaration), (_what: StateObject | StateDeclaration) => this.fromState(_what, this.router)],\n      [is(RegExp), (_what: RegExp) => this.fromRegExp(_what, handler)],\n      [isFunction, (_what: UrlRuleMatchFn) => new BaseUrlRule(_what, handler as UrlRuleHandlerFn)],\n    ]);\n\n    const rule = makeRule(what);\n    if (!rule) throw new Error(\"invalid 'what' in when()\");\n    return rule;\n  }\n\n  /**\n   * A UrlRule which matches based on a UrlMatcher\n   *\n   * The `handler` may be either a `string`, a [[UrlRuleHandlerFn]] or another [[UrlMatcher]]\n   *\n   * ## Handler as a function\n   *\n   * If `handler` is a function, the function is invoked with:\n   *\n   * - matched parameter values ([[RawParams]] from [[UrlMatcher.exec]])\n   * - url: the current Url ([[UrlParts]])\n   * - router: the router object ([[UIRouter]])\n   *\n   * #### Example:\n   * ```js\n   * var urlMatcher = $umf.compile(\"/foo/:fooId/:barId\");\n   * var rule = factory.fromUrlMatcher(urlMatcher, match => \"/home/\" + match.fooId + \"/\" + match.barId);\n   * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }\n   * var result = rule.handler(match); // '/home/123/456'\n   * ```\n   *\n   * ## Handler as UrlMatcher\n   *\n   * If `handler` is a UrlMatcher, the handler matcher is used to create the new url.\n   * The `handler` UrlMatcher is formatted using the matched param from the first matcher.\n   * The url is replaced with the result.\n   *\n   * #### Example:\n   * ```js\n   * var urlMatcher = $umf.compile(\"/foo/:fooId/:barId\");\n   * var handler = $umf.compile(\"/home/:fooId/:barId\");\n   * var rule = factory.fromUrlMatcher(urlMatcher, handler);\n   * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }\n   * var result = rule.handler(match); // '/home/123/456'\n   * ```\n   */\n  fromUrlMatcher(urlMatcher: UrlMatcher, handler: string | UrlMatcher | UrlRuleHandlerFn): MatcherUrlRule {\n    let _handler: UrlRuleHandlerFn = handler as any;\n    if (isString(handler)) handler = this.router.urlMatcherFactory.compile(handler);\n    if (is(UrlMatcher)(handler)) _handler = (match: RawParams) => (handler as UrlMatcher).format(match);\n\n    function matchUrlParamters(url: UrlParts): RawParams {\n      const params = urlMatcher.exec(url.path, url.search, url.hash);\n      return urlMatcher.validates(params) && params;\n    }\n\n    // Prioritize URLs, lowest to highest:\n    // - Some optional URL parameters, but none matched\n    // - No optional parameters in URL\n    // - Some optional parameters, some matched\n    // - Some optional parameters, all matched\n    function matchPriority(params: RawParams): number {\n      const optional = urlMatcher.parameters().filter((param) => param.isOptional);\n      if (!optional.length) return 0.000001;\n      const matched = optional.filter((param) => params[param.id]);\n      return matched.length / optional.length;\n    }\n\n    const details = { urlMatcher, matchPriority, type: 'URLMATCHER' };\n    return extend(new BaseUrlRule(matchUrlParamters, _handler), details) as MatcherUrlRule;\n  }\n\n  /**\n   * A UrlRule which matches a state by its url\n   *\n   * #### Example:\n   * ```js\n   * var rule = factory.fromState($state.get('foo'), router);\n   * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }\n   * var result = rule.handler(match);\n   * // Starts a transition to 'foo' with params: { fooId: '123', barId: '456' }\n   * ```\n   */\n  fromState(stateOrDecl: StateObject | StateDeclaration, router: UIRouter): StateRule {\n    const state = StateObject.isStateDeclaration(stateOrDecl) ? stateOrDecl.$$state() : stateOrDecl;\n\n    /**\n     * Handles match by transitioning to matched state\n     *\n     * First checks if the router should start a new transition.\n     * A new transition is not required if the current state's URL\n     * and the new URL are already identical\n     */\n    const handler = (match: RawParams) => {\n      const $state = router.stateService;\n      const globals = router.globals;\n      if ($state.href(state, match) !== $state.href(globals.current, globals.params)) {\n        $state.transitionTo(state, match, { inherit: true, source: 'url' });\n      }\n    };\n\n    const details = { state, type: 'STATE' };\n    return extend(this.fromUrlMatcher(state.url, handler), details) as StateRule;\n  }\n\n  /**\n   * A UrlRule which matches based on a regular expression\n   *\n   * The `handler` may be either a [[UrlRuleHandlerFn]] or a string.\n   *\n   * ## Handler as a function\n   *\n   * If `handler` is a function, the function is invoked with:\n   *\n   * - regexp match array (from `regexp`)\n   * - url: the current Url ([[UrlParts]])\n   * - router: the router object ([[UIRouter]])\n   *\n   * #### Example:\n   * ```js\n   * var rule = factory.fromRegExp(/^\\/foo\\/(bar|baz)$/, match => \"/home/\" + match[1])\n   * var match = rule.match('/foo/bar'); // results in [ '/foo/bar', 'bar' ]\n   * var result = rule.handler(match); // '/home/bar'\n   * ```\n   *\n   * ## Handler as string\n   *\n   * If `handler` is a string, the url is *replaced by the string* when the Rule is invoked.\n   * The string is first interpolated using `string.replace()` style pattern.\n   *\n   * #### Example:\n   * ```js\n   * var rule = factory.fromRegExp(/^\\/foo\\/(bar|baz)$/, \"/home/$1\")\n   * var match = rule.match('/foo/bar'); // results in [ '/foo/bar', 'bar' ]\n   * var result = rule.handler(match); // '/home/bar'\n   * ```\n   */\n  fromRegExp(regexp: RegExp, handler: string | UrlRuleHandlerFn): RegExpRule {\n    if (regexp.global || regexp.sticky) throw new Error('Rule RegExp must not be global or sticky');\n\n    /**\n     * If handler is a string, the url will be replaced by the string.\n     * If the string has any String.replace() style variables in it (like `$2`),\n     * they will be replaced by the captures from [[match]]\n     */\n    const redirectUrlTo = (match: RegExpExecArray) =>\n      // Interpolates matched values into $1 $2, etc using a String.replace()-style pattern\n      (handler as string).replace(/\\$(\\$|\\d{1,2})/, (m, what) => match[what === '$' ? 0 : Number(what)]);\n\n    const _handler = isString(handler) ? redirectUrlTo : handler;\n\n    const matchParamsFromRegexp = (url: UrlParts): RegExpExecArray => regexp.exec(url.path);\n\n    const details = { regexp, type: 'REGEXP' };\n    return extend(new BaseUrlRule(matchParamsFromRegexp, _handler), details) as RegExpRule;\n  }\n}\n\n/**\n * A base rule which calls `match`\n *\n * The value from the `match` function is passed through to the `handler`.\n * @internal\n */\nexport class BaseUrlRule implements UrlRule {\n  $id: number;\n  priority: number;\n  _group: number;\n  type: UrlRuleType = 'RAW';\n  handler: UrlRuleHandlerFn;\n  matchPriority = (match) => 0 - this.$id;\n\n  constructor(public match: UrlRuleMatchFn, handler?: UrlRuleHandlerFn) {\n    this.handler = handler || identity;\n  }\n}\n",
    "import { UIRouter } from '../router';\nimport { Disposable } from '../interface';\nimport { MatcherUrlRule, UrlRule, UrlRuleHandlerFn, UrlRuleMatchFn, UrlRulesApi } from './interface';\nimport { TargetState, TargetStateDef } from '../state';\nimport { UrlMatcher } from './urlMatcher';\nimport { is, isDefined, isFunction, isString, removeFrom, val } from '../common';\nimport { UrlRuleFactory } from './urlRule';\n\nconst prioritySort = (a: UrlRule, b: UrlRule) => (b.priority || 0) - (a.priority || 0);\n\nconst typeSort = (a: UrlRule, b: UrlRule) => {\n  const weights = { STATE: 4, URLMATCHER: 4, REGEXP: 3, RAW: 2, OTHER: 1 };\n  return (weights[a.type] || 0) - (weights[b.type] || 0);\n};\n\nconst urlMatcherSort = (a: MatcherUrlRule, b: MatcherUrlRule) =>\n  !a.urlMatcher || !b.urlMatcher ? 0 : UrlMatcher.compare(a.urlMatcher, b.urlMatcher);\n\nconst idSort = (a: UrlRule, b: UrlRule) => {\n  // Identically sorted STATE and URLMATCHER best rule will be chosen by `matchPriority` after each rule matches the URL\n  const useMatchPriority = { STATE: true, URLMATCHER: true };\n  const equal = useMatchPriority[a.type] && useMatchPriority[b.type];\n  return equal ? 0 : (a.$id || 0) - (b.$id || 0);\n};\n\n/**\n * Default rule priority sorting function.\n *\n * Sorts rules by:\n *\n * - Explicit priority (set rule priority using [[UrlRules.when]])\n * - Rule type (STATE: 4, URLMATCHER: 4, REGEXP: 3, RAW: 2, OTHER: 1)\n * - `UrlMatcher` specificity ([[UrlMatcher.compare]]): works for STATE and URLMATCHER types to pick the most specific rule.\n * - Rule registration order (for rule types other than STATE and URLMATCHER)\n *   - Equally sorted State and UrlMatcher rules will each match the URL.\n *     Then, the *best* match is chosen based on how many parameter values were matched.\n */\nlet defaultRuleSortFn: (a: UrlRule, b: UrlRule) => number;\ndefaultRuleSortFn = (a, b) => {\n  let cmp = prioritySort(a, b);\n  if (cmp !== 0) return cmp;\n\n  cmp = typeSort(a, b);\n  if (cmp !== 0) return cmp;\n\n  cmp = urlMatcherSort(a as MatcherUrlRule, b as MatcherUrlRule);\n  if (cmp !== 0) return cmp;\n\n  return idSort(a, b);\n};\n\nfunction getHandlerFn(handler: string | UrlRuleHandlerFn | TargetState | TargetStateDef): UrlRuleHandlerFn {\n  if (!isFunction(handler) && !isString(handler) && !is(TargetState)(handler) && !TargetState.isDef(handler)) {\n    throw new Error(\"'handler' must be a string, function, TargetState, or have a state: 'newtarget' property\");\n  }\n  return isFunction(handler) ? (handler as UrlRuleHandlerFn) : val(handler);\n}\n\n/**\n * API for managing URL rules\n *\n * This API is used to create and manage URL rules.\n * URL rules are a mechanism to respond to specific URL patterns.\n *\n * The most commonly used methods are [[otherwise]] and [[when]].\n *\n * This API is found at `router.urlService.rules` (see: [[UIRouter.urlService]], [[URLService.rules]])\n */\nexport class UrlRules implements Disposable {\n  /** used to create [[UrlRule]] objects for common cases */\n  public urlRuleFactory: UrlRuleFactory;\n\n  /** @internal */ private _sortFn = defaultRuleSortFn;\n  /** @internal */ private _otherwiseFn: UrlRule;\n  /** @internal */ private _sorted: boolean;\n  /** @internal */ private _rules: UrlRule[] = [];\n  /** @internal */ private _id = 0;\n\n  /** @internal */\n  constructor(/** @internal */ private router: UIRouter) {\n    this.urlRuleFactory = new UrlRuleFactory(router);\n  }\n\n  /** @internal */\n  public dispose(router?: UIRouter) {\n    this._rules = [];\n    delete this._otherwiseFn;\n  }\n\n  /**\n   * Defines the initial state, path, or behavior to use when the app starts.\n   *\n   * This rule defines the initial/starting state for the application.\n   *\n   * This rule is triggered the first time the URL is checked (when the app initially loads).\n   * The rule is triggered only when the url matches either `\"\"` or `\"/\"`.\n   *\n   * Note: The rule is intended to be used when the root of the application is directly linked to.\n   * When the URL is *not* `\"\"` or `\"/\"` and doesn't match other rules, the [[otherwise]] rule is triggered.\n   * This allows 404-like behavior when an unknown URL is deep-linked.\n   *\n   * #### Example:\n   * Start app at `home` state.\n   * ```js\n   * .initial({ state: 'home' });\n   * ```\n   *\n   * #### Example:\n   * Start app at `/home` (by url)\n   * ```js\n   * .initial('/home');\n   * ```\n   *\n   * #### Example:\n   * When no other url rule matches, go to `home` state\n   * ```js\n   * .initial((matchValue, url, router) => {\n   *   console.log('initial state');\n   *   return { state: 'home' };\n   * })\n   * ```\n   *\n   * @param handler The initial state or url path, or a function which returns the state or url path (or performs custom logic).\n   */\n  public initial(handler: string | UrlRuleHandlerFn | TargetState | TargetStateDef) {\n    const handlerFn: UrlRuleHandlerFn = getHandlerFn(handler);\n    const matchFn: UrlRuleMatchFn = (urlParts, router) =>\n      router.globals.transitionHistory.size() === 0 && !!/^\\/?$/.exec(urlParts.path);\n\n    this.rule(this.urlRuleFactory.create(matchFn, handlerFn));\n  }\n\n  /**\n   * Defines the state, url, or behavior to use when no other rule matches the URL.\n   *\n   * This rule is matched when *no other rule* matches.\n   * It is generally used to handle unknown URLs (similar to \"404\" behavior, but on the client side).\n   *\n   * - If `handler` a string, it is treated as a url redirect\n   *\n   * #### Example:\n   * When no other url rule matches, redirect to `/index`\n   * ```js\n   * .otherwise('/index');\n   * ```\n   *\n   * - If `handler` is an object with a `state` property, the state is activated.\n   *\n   * #### Example:\n   * When no other url rule matches, redirect to `home` and provide a `dashboard` parameter value.\n   * ```js\n   * .otherwise({ state: 'home', params: { dashboard: 'default' } });\n   * ```\n   *\n   * - If `handler` is a function, the function receives the current url ([[UrlParts]]) and the [[UIRouter]] object.\n   *   The function can perform actions, and/or return a value.\n   *\n   * #### Example:\n   * When no other url rule matches, manually trigger a transition to the `home` state\n   * ```js\n   * .otherwise((matchValue, urlParts, router) => {\n   *   router.stateService.go('home');\n   * });\n   * ```\n   *\n   * #### Example:\n   * When no other url rule matches, go to `home` state\n   * ```js\n   * .otherwise((matchValue, urlParts, router) => {\n   *   return { state: 'home' };\n   * });\n   * ```\n   *\n   * @param handler The url path to redirect to, or a function which returns the url path (or performs custom logic).\n   */\n  public otherwise(handler: string | UrlRuleHandlerFn | TargetState | TargetStateDef) {\n    const handlerFn: UrlRuleHandlerFn = getHandlerFn(handler);\n\n    this._otherwiseFn = this.urlRuleFactory.create(val(true), handlerFn);\n    this._sorted = false;\n  }\n\n  /**\n   * Remove a rule previously registered\n   *\n   * @param rule the matcher rule that was previously registered using [[rule]]\n   */\n  public removeRule(rule): void {\n    removeFrom(this._rules, rule);\n  }\n\n  /**\n   * Manually adds a URL Rule.\n   *\n   * Usually, a url rule is added using [[StateDeclaration.url]] or [[when]].\n   * This api can be used directly for more control (to register a [[BaseUrlRule]], for example).\n   * Rules can be created using [[urlRuleFactory]], or created manually as simple objects.\n   *\n   * A rule should have a `match` function which returns truthy if the rule matched.\n   * It should also have a `handler` function which is invoked if the rule is the best match.\n   *\n   * @return a function that deregisters the rule\n   */\n  public rule(rule: UrlRule): Function {\n    if (!UrlRuleFactory.isUrlRule(rule)) throw new Error('invalid rule');\n    rule.$id = this._id++;\n    rule.priority = rule.priority || 0;\n\n    this._rules.push(rule);\n    this._sorted = false;\n\n    return () => this.removeRule(rule);\n  }\n\n  /**\n   * Gets all registered rules\n   *\n   * @returns an array of all the registered rules\n   */\n  public rules(): UrlRule[] {\n    this.ensureSorted();\n    return this._rules.concat(this._otherwiseFn ? [this._otherwiseFn] : []);\n  }\n\n  /**\n   * Defines URL Rule priorities\n   *\n   * More than one rule ([[UrlRule]]) might match a given URL.\n   * This `compareFn` is used to sort the rules by priority.\n   * Higher priority rules should sort earlier.\n   *\n   * The [[defaultRuleSortFn]] is used by default.\n   *\n   * You only need to call this function once.\n   * The `compareFn` will be used to sort the rules as each is registered.\n   *\n   * If called without any parameter, it will re-sort the rules.\n   *\n   * ---\n   *\n   * Url rules may come from multiple sources: states's urls ([[StateDeclaration.url]]), [[when]], and [[rule]].\n   * Each rule has a (user-provided) [[UrlRule.priority]], a [[UrlRule.type]], and a [[UrlRule.$id]]\n   * The `$id` is is the order in which the rule was registered.\n   *\n   * The sort function should use these data, or data found on a specific type\n   * of [[UrlRule]] (such as [[StateRule.state]]), to order the rules as desired.\n   *\n   * #### Example:\n   * This compare function prioritizes rules by the order in which the rules were registered.\n   * A rule registered earlier has higher priority.\n   *\n   * ```js\n   * function compareFn(a, b) {\n   *   return a.$id - b.$id;\n   * }\n   * ```\n   *\n   * @param compareFn a function that compares to [[UrlRule]] objects.\n   *    The `compareFn` should abide by the `Array.sort` compare function rules.\n   *    Given two rules, `a` and `b`, return a negative number if `a` should be higher priority.\n   *    Return a positive number if `b` should be higher priority.\n   *    Return `0` if the rules are identical.\n   *\n   *    See the [mozilla reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Description)\n   *    for details.\n   */\n  sort(compareFn?: (a: UrlRule, b: UrlRule) => number) {\n    const sorted = this.stableSort(this._rules, (this._sortFn = compareFn || this._sortFn));\n\n    // precompute _sortGroup values and apply to each rule\n    let group = 0;\n    for (let i = 0; i < sorted.length; i++) {\n      sorted[i]._group = group;\n      if (i < sorted.length - 1 && this._sortFn(sorted[i], sorted[i + 1]) !== 0) {\n        group++;\n      }\n    }\n\n    this._rules = sorted;\n    this._sorted = true;\n  }\n\n  /** @internal */\n  private ensureSorted() {\n    this._sorted || this.sort();\n  }\n\n  /** @internal */\n  private stableSort(arr, compareFn) {\n    const arrOfWrapper = arr.map((elem, idx) => ({ elem, idx }));\n\n    arrOfWrapper.sort((wrapperA, wrapperB) => {\n      const cmpDiff = compareFn(wrapperA.elem, wrapperB.elem);\n      return cmpDiff === 0 ? wrapperA.idx - wrapperB.idx : cmpDiff;\n    });\n\n    return arrOfWrapper.map((wrapper) => wrapper.elem);\n  }\n\n  /**\n   * Registers a `matcher` and `handler` for custom URLs handling.\n   *\n   * The `matcher` can be:\n   *\n   * - a [[UrlMatcher]]: See: [[UrlMatcherFactory.compile]]\n   * - a `string`: The string is compiled to a [[UrlMatcher]]\n   * - a `RegExp`: The regexp is used to match the url.\n   *\n   * The `handler` can be:\n   *\n   * - a string: The url is redirected to the value of the string.\n   * - a function: The url is redirected to the return value of the function.\n   *\n   * ---\n   *\n   * When the `handler` is a `string` and the `matcher` is a `UrlMatcher` (or string), the redirect\n   * string is interpolated with parameter values.\n   *\n   * #### Example:\n   * When the URL is `/foo/123` the rule will redirect to `/bar/123`.\n   * ```js\n   * .when(\"/foo/:param1\", \"/bar/:param1\")\n   * ```\n   *\n   * ---\n   *\n   * When the `handler` is a string and the `matcher` is a `RegExp`, the redirect string is\n   * interpolated with capture groups from the RegExp.\n   *\n   * #### Example:\n   * When the URL is `/foo/123` the rule will redirect to `/bar/123`.\n   * ```js\n   * .when(new RegExp(\"^/foo/(.*)$\"), \"/bar/$1\");\n   * ```\n   *\n   * ---\n   *\n   * When the handler is a function, it receives the matched value, the current URL, and the `UIRouter` object (See [[UrlRuleHandlerFn]]).\n   * The \"matched value\" differs based on the `matcher`.\n   * For [[UrlMatcher]]s, it will be the matched state params.\n   * For `RegExp`, it will be the match array from `regexp.exec()`.\n   *\n   * If the handler returns a string, the URL is redirected to the string.\n   *\n   * #### Example:\n   * When the URL is `/foo/123` the rule will redirect to `/bar/123`.\n   * ```js\n   * .when(new RegExp(\"^/foo/(.*)$\"), match => \"/bar/\" + match[1]);\n   * ```\n   *\n   * Note: the `handler` may also invoke arbitrary code, such as `$state.go()`\n   *\n   * @param matcher A pattern `string` to match, compiled as a [[UrlMatcher]], or a `RegExp`.\n   * @param handler The path to redirect to, or a function that returns the path.\n   * @param options `{ priority: number }`\n   *\n   * @return the registered [[UrlRule]]\n   */\n  public when(\n    matcher: RegExp | UrlMatcher | string,\n    handler: string | UrlRuleHandlerFn,\n    options?: { priority: number }\n  ): UrlRule {\n    const rule = this.urlRuleFactory.create(matcher, handler);\n    if (isDefined(options && options.priority)) rule.priority = options.priority;\n    this.rule(rule);\n    return rule;\n  }\n}\n",
    "import { stripLastPathElement } from '../common';\nimport { UrlMatcher } from './urlMatcher';\nimport { RawParams } from '../params';\nimport { UIRouter } from '../router';\nimport { UrlRuleFactory } from './urlRule';\nimport { MatchResult, UrlParts, UrlRule, UrlRuleHandlerFn } from './interface';\nimport { TargetState, TargetStateDef } from '../state';\n\nfunction appendBasePath(url: string, isHtml5: boolean, absolute: boolean, baseHref: string): string {\n  if (baseHref === '/') return url;\n  if (isHtml5) return stripLastPathElement(baseHref) + url;\n  if (absolute) return baseHref.slice(1) + url;\n  return url;\n}\n\n/**\n * Updates URL and responds to URL changes\n *\n * ### Deprecation warning:\n * This class is now considered to be an internal API\n * Use the [[UrlService]] instead.\n * For configuring URL rules, use the [[UrlRules]] which can be found as [[UrlService.rules]].\n */\nexport class UrlRouter {\n  /** used to create [[UrlRule]] objects for common cases */\n  public urlRuleFactory: UrlRuleFactory;\n  /** @internal */ private location: string;\n\n  /** @internal */\n  constructor(/** @internal */ private router: UIRouter) {\n    this.urlRuleFactory = new UrlRuleFactory(router);\n  }\n\n  /** Internal API. */\n  update(read?: boolean) {\n    const $url = this.router.locationService;\n    if (read) {\n      this.location = $url.url();\n      return;\n    }\n    if ($url.url() === this.location) return;\n\n    $url.url(this.location, true);\n  }\n\n  /**\n   * Internal API.\n   *\n   * Pushes a new location to the browser history.\n   *\n   * @internal\n   * @param urlMatcher\n   * @param params\n   * @param options\n   */\n  push(urlMatcher: UrlMatcher, params?: RawParams, options?: { replace?: string | boolean }) {\n    const replace = options && !!options.replace;\n    this.router.urlService.url(urlMatcher.format(params || {}), replace);\n  }\n\n  /**\n   * Builds and returns a URL with interpolated parameters\n   *\n   * #### Example:\n   * ```js\n   * matcher = $umf.compile(\"/about/:person\");\n   * params = { person: \"bob\" };\n   * $bob = $urlRouter.href(matcher, params);\n   * // $bob == \"/about/bob\";\n   * ```\n   *\n   * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.\n   * @param params An object of parameter values to fill the matcher's required parameters.\n   * @param options Options object. The options are:\n   *\n   * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n   *\n   * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n   */\n  href(urlMatcher: UrlMatcher, params?: any, options?: { absolute: boolean }): string {\n    let url = urlMatcher.format(params);\n    if (url == null) return null;\n\n    options = options || { absolute: false };\n\n    const cfg = this.router.urlService.config;\n    const isHtml5 = cfg.html5Mode();\n    if (!isHtml5 && url !== null) {\n      url = '#' + cfg.hashPrefix() + url;\n    }\n    url = appendBasePath(url, isHtml5, options.absolute, cfg.baseHref());\n\n    if (!options.absolute || !url) {\n      return url;\n    }\n\n    const slash = !isHtml5 && url ? '/' : '';\n    const cfgPort = cfg.port();\n    const port = <any>(cfgPort === 80 || cfgPort === 443 ? '' : ':' + cfgPort);\n\n    return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');\n  }\n\n  // Delegate these calls to [[UrlService]]\n  /** @deprecated use [[UrlService.sync]]*/\n  public sync = (evt?) => this.router.urlService.sync(evt);\n  /** @deprecated use [[UrlService.listen]]*/\n  public listen = (enabled?: boolean): Function => this.router.urlService.listen(enabled);\n  /** @deprecated use [[UrlService.deferIntercept]]*/\n  public deferIntercept = (defer?: boolean) => this.router.urlService.deferIntercept(defer);\n  /** @deprecated use [[UrlService.interceptDeferred]]*/\n  public get interceptDeferred() {\n    return this.router.urlService.interceptDeferred;\n  }\n  /** @deprecated use [[UrlService.match]]*/\n  public match = (urlParts: UrlParts): MatchResult => this.router.urlService.match(urlParts);\n\n  // Delegate these calls to [[UrlRules]]\n  /** @deprecated use [[UrlRules.initial]]*/\n  public initial = (handler: string | UrlRuleHandlerFn | TargetState | TargetStateDef): void =>\n    this.router.urlService.rules.initial(handler);\n  /** @deprecated use [[UrlRules.otherwise]]*/\n  public otherwise = (handler: string | UrlRuleHandlerFn | TargetState | TargetStateDef): void =>\n    this.router.urlService.rules.otherwise(handler);\n  /** @deprecated use [[UrlRules.removeRule]]*/\n  public removeRule = (rule: UrlRule): void => this.router.urlService.rules.removeRule(rule);\n  /** @deprecated use [[UrlRules.rule]]*/\n  public rule = (rule: UrlRule): Function => this.router.urlService.rules.rule(rule);\n  /** @deprecated use [[UrlRules.rules]]*/\n  public rules = (): UrlRule[] => this.router.urlService.rules.rules();\n  /** @deprecated use [[UrlRules.sort]]*/\n  public sort = (compareFn?: (a: UrlRule, b: UrlRule) => number) => this.router.urlService.rules.sort(compareFn);\n  /** @deprecated use [[UrlRules.when]]*/\n  public when = (\n    matcher: RegExp | UrlMatcher | string,\n    handler: string | UrlRuleHandlerFn,\n    options?: { priority: number }\n  ): UrlRule => this.router.urlService.rules.when(matcher, handler, options);\n}\n",
    "import { equals, applyPairs, removeFrom, TypedMap, inArray, find } from '../common/common';\nimport { curry, prop } from '../common/hof';\nimport { isString, isArray } from '../common/predicates';\nimport { trace } from '../common/trace';\nimport { PathNode } from '../path/pathNode';\nimport { ActiveUIView, ViewContext, ViewConfig } from './interface';\nimport { _ViewDeclaration } from '../state/interface';\nimport { UIRouter } from '../router';\n\nexport type ViewConfigFactory = (path: PathNode[], decl: _ViewDeclaration) => ViewConfig | ViewConfig[];\n\nexport interface ViewServicePluginAPI {\n  _rootViewContext(context?: ViewContext): ViewContext;\n  _viewConfigFactory(viewType: string, factory: ViewConfigFactory);\n  /** @param id router.$id + \".\" + uiView.id */\n  _registeredUIView(id: string): ActiveUIView;\n  _registeredUIViews(): ActiveUIView[];\n  _activeViewConfigs(): ViewConfig[];\n  _onSync(listener: ViewSyncListener): Function;\n}\n\n// A uiView and its matching viewConfig\nexport interface ViewTuple {\n  uiView: ActiveUIView;\n  viewConfig: ViewConfig;\n}\n\nexport interface ViewSyncListener {\n  (viewTuples: ViewTuple[]): void;\n}\n\n/**\n * The View service\n *\n * This service pairs existing `ui-view` components (which live in the DOM)\n * with view configs (from the state declaration objects: [[StateDeclaration.views]]).\n *\n * - After a successful Transition, the views from the newly entered states are activated via [[activateViewConfig]].\n *   The views from exited states are deactivated via [[deactivateViewConfig]].\n *   (See: the [[registerActivateViews]] Transition Hook)\n *\n * - As `ui-view` components pop in and out of existence, they register themselves using [[registerUIView]].\n *\n * - When the [[sync]] function is called, the registered `ui-view`(s) ([[ActiveUIView]])\n * are configured with the matching [[ViewConfig]](s)\n *\n */\nexport class ViewService {\n  /** @internal */ private _uiViews: ActiveUIView[] = [];\n  /** @internal */ private _viewConfigs: ViewConfig[] = [];\n  /** @internal */ private _rootContext: ViewContext;\n  /** @internal */ private _viewConfigFactories: { [key: string]: ViewConfigFactory } = {};\n  /** @internal */ private _listeners: ViewSyncListener[] = [];\n\n  /** @internal */\n  public _pluginapi: ViewServicePluginAPI = {\n    _rootViewContext: this._rootViewContext.bind(this),\n    _viewConfigFactory: this._viewConfigFactory.bind(this),\n    _registeredUIView: (id: string) => find(this._uiViews, (view) => `${this.router.$id}.${view.id}` === id),\n    _registeredUIViews: () => this._uiViews,\n    _activeViewConfigs: () => this._viewConfigs,\n    _onSync: (listener: ViewSyncListener) => {\n      this._listeners.push(listener);\n      return () => removeFrom(this._listeners, listener);\n    },\n  };\n\n  /**\n   * Given a ui-view and a ViewConfig, determines if they \"match\".\n   *\n   * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\n   * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.\n   *\n   * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or\n   * can be a segmented ui-view path, describing a portion of a ui-view fqn.\n   *\n   * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type\n   *\n   * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:\n   * - the ui-view's name matches the ViewConfig's target name\n   * - the ui-view's context matches the ViewConfig's anchor\n   *\n   * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:\n   * - There exists a parent ui-view where:\n   *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name\n   *    - the parent ui-view's context matches the ViewConfig's anchor\n   * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn\n   *\n   * Example:\n   *\n   * DOM:\n   * <ui-view>                        <!-- created in the root context (name: \"\") -->\n   *   <ui-view name=\"foo\">                <!-- created in the context named: \"A\"      -->\n   *     <ui-view>                    <!-- created in the context named: \"A.B\"    -->\n   *       <ui-view name=\"bar\">            <!-- created in the context named: \"A.B.C\"  -->\n   *       </ui-view>\n   *     </ui-view>\n   *   </ui-view>\n   * </ui-view>\n   *\n   * uiViews: [\n   *  { fqn: \"$default\",                  creationContext: { name: \"\" } },\n   *  { fqn: \"$default.foo\",              creationContext: { name: \"A\" } },\n   *  { fqn: \"$default.foo.$default\",     creationContext: { name: \"A.B\" } }\n   *  { fqn: \"$default.foo.$default.bar\", creationContext: { name: \"A.B.C\" } }\n   * ]\n   *\n   * These four view configs all match the ui-view with the fqn: \"$default.foo.$default.bar\":\n   *\n   * - ViewConfig1: { uiViewName: \"bar\",                       uiViewContextAnchor: \"A.B.C\" }\n   * - ViewConfig2: { uiViewName: \"$default.bar\",              uiViewContextAnchor: \"A.B\" }\n   * - ViewConfig3: { uiViewName: \"foo.$default.bar\",          uiViewContextAnchor: \"A\" }\n   * - ViewConfig4: { uiViewName: \"$default.foo.$default.bar\", uiViewContextAnchor: \"\" }\n   *\n   * Using ViewConfig3 as an example, it matches the ui-view with fqn \"$default.foo.$default.bar\" because:\n   * - The ViewConfig's segmented target name is: [ \"foo\", \"$default\", \"bar\" ]\n   * - There exists a parent ui-view (which has fqn: \"$default.foo\") where:\n   *    - the parent ui-view's name \"foo\" matches the first segment \"foo\" of the ViewConfig's target name\n   *    - the parent ui-view's context \"A\" matches the ViewConfig's anchor context \"A\"\n   * - And the remaining segments [ \"$default\", \"bar\" ].join(\".\"_ of the ViewConfig's target name match\n   *   the tail of the ui-view's fqn \"default.bar\"\n   *\n   * @internal\n   */\n  static matches = (uiViewsByFqn: TypedMap<ActiveUIView>, uiView: ActiveUIView) => (viewConfig: ViewConfig) => {\n    // Don't supply an ng1 ui-view with an ng2 ViewConfig, etc\n    if (uiView.$type !== viewConfig.viewDecl.$type) return false;\n\n    // Split names apart from both viewConfig and uiView into segments\n    const vc = viewConfig.viewDecl;\n    const vcSegments = vc.$uiViewName.split('.');\n    const uivSegments = uiView.fqn.split('.');\n\n    // Check if the tails of the segment arrays match. ex, these arrays' tails match:\n    // vc: [\"foo\", \"bar\"], uiv fqn: [\"$default\", \"foo\", \"bar\"]\n    if (!equals(vcSegments, uivSegments.slice(0 - vcSegments.length))) return false;\n\n    // Now check if the fqn ending at the first segment of the viewConfig matches the context:\n    // [\"$default\", \"foo\"].join(\".\") == \"$default.foo\", does the ui-view $default.foo context match?\n    const negOffset = 1 - vcSegments.length || undefined;\n    const fqnToFirstSegment = uivSegments.slice(0, negOffset).join('.');\n    const uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;\n    return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);\n  };\n\n  /**\n   * Normalizes a view's name from a state.views configuration block.\n   *\n   * This should be used by a framework implementation to calculate the values for\n   * [[_ViewDeclaration.$uiViewName]] and [[_ViewDeclaration.$uiViewContextAnchor]].\n   *\n   * @param context the context object (state declaration) that the view belongs to\n   * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]\n   *\n   * @returns the normalized uiViewName and uiViewContextAnchor that the view targets\n   */\n  static normalizeUIViewTarget(context: ViewContext, rawViewName = '') {\n    // TODO: Validate incoming view name with a regexp to allow:\n    // ex: \"view.name@foo.bar\" , \"^.^.view.name\" , \"view.name@^.^\" , \"\" ,\n    // \"@\" , \"$default@^\" , \"!$default.$default\" , \"!foo.bar\"\n    const viewAtContext: string[] = rawViewName.split('@');\n    let uiViewName = viewAtContext[0] || '$default'; // default to unnamed view\n    let uiViewContextAnchor = isString(viewAtContext[1]) ? viewAtContext[1] : '^'; // default to parent context\n\n    // Handle relative view-name sugar syntax.\n    // Matches rawViewName \"^.^.^.foo.bar\" into array: [\"^.^.^.foo.bar\", \"^.^.^\", \"foo.bar\"],\n    const relativeViewNameSugar = /^(\\^(?:\\.\\^)*)\\.(.*$)/.exec(uiViewName);\n    if (relativeViewNameSugar) {\n      // Clobbers existing contextAnchor (rawViewName validation will fix this)\n      uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to \"^.^.^\"\n      uiViewName = relativeViewNameSugar[2]; // set view-name to \"foo.bar\"\n    }\n\n    if (uiViewName.charAt(0) === '!') {\n      uiViewName = uiViewName.substr(1);\n      uiViewContextAnchor = ''; // target absolutely from root\n    }\n\n    // handle parent relative targeting \"^.^.^\"\n    const relativeMatch = /^(\\^(?:\\.\\^)*)$/;\n    if (relativeMatch.exec(uiViewContextAnchor)) {\n      const anchorState = uiViewContextAnchor.split('.').reduce((anchor, x) => anchor.parent, context);\n      uiViewContextAnchor = anchorState.name;\n    } else if (uiViewContextAnchor === '.') {\n      uiViewContextAnchor = context.name;\n    }\n\n    return { uiViewName, uiViewContextAnchor };\n  }\n\n  /** @internal */\n  constructor(/** @internal */ private router: UIRouter) {}\n\n  /** @internal */\n  private _rootViewContext(context?: ViewContext): ViewContext {\n    return (this._rootContext = context || this._rootContext);\n  }\n  /** @internal */\n  private _viewConfigFactory(viewType: string, factory: ViewConfigFactory) {\n    this._viewConfigFactories[viewType] = factory;\n  }\n\n  createViewConfig(path: PathNode[], decl: _ViewDeclaration): ViewConfig[] {\n    const cfgFactory = this._viewConfigFactories[decl.$type];\n    if (!cfgFactory) throw new Error('ViewService: No view config factory registered for type ' + decl.$type);\n    const cfgs = cfgFactory(path, decl);\n    return isArray(cfgs) ? cfgs : [cfgs];\n  }\n\n  /**\n   * Deactivates a ViewConfig.\n   *\n   * This function deactivates a `ViewConfig`.\n   * After calling [[sync]], it will un-pair from any `ui-view` with which it is currently paired.\n   *\n   * @param viewConfig The ViewConfig view to deregister.\n   */\n  deactivateViewConfig(viewConfig: ViewConfig) {\n    trace.traceViewServiceEvent('<- Removing', viewConfig);\n    removeFrom(this._viewConfigs, viewConfig);\n  }\n\n  activateViewConfig(viewConfig: ViewConfig) {\n    trace.traceViewServiceEvent('-> Registering', <any>viewConfig);\n    this._viewConfigs.push(viewConfig);\n  }\n\n  sync() {\n    const uiViewsByFqn: TypedMap<ActiveUIView> = this._uiViews.map((uiv) => [uiv.fqn, uiv]).reduce(applyPairs, <any>{});\n\n    // Return a weighted depth value for a uiView.\n    // The depth is the nesting depth of ui-views (based on FQN; times 10,000)\n    // plus the depth of the state that is populating the uiView\n    function uiViewDepth(uiView: ActiveUIView) {\n      const stateDepth = (context: ViewContext) => (context && context.parent ? stateDepth(context.parent) + 1 : 1);\n      return uiView.fqn.split('.').length * 10000 + stateDepth(uiView.creationContext);\n    }\n\n    // Return the ViewConfig's context's depth in the context tree.\n    function viewConfigDepth(config: ViewConfig) {\n      let context: ViewContext = config.viewDecl.$context,\n        count = 0;\n      while (++count && context.parent) context = context.parent;\n      return count;\n    }\n\n    // Given a depth function, returns a compare function which can return either ascending or descending order\n    const depthCompare = curry((depthFn, posNeg, left, right) => posNeg * (depthFn(left) - depthFn(right)));\n\n    const matchingConfigPair = (uiView: ActiveUIView): ViewTuple => {\n      const matchingConfigs = this._viewConfigs.filter(ViewService.matches(uiViewsByFqn, uiView));\n      if (matchingConfigs.length > 1) {\n        // This is OK.  Child states can target a ui-view that the parent state also targets (the child wins)\n        // Sort by depth and return the match from the deepest child\n        // console.log(`Multiple matching view configs for ${uiView.fqn}`, matchingConfigs);\n        matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending\n      }\n      return { uiView, viewConfig: matchingConfigs[0] };\n    };\n\n    const configureUIView = (tuple: ViewTuple) => {\n      // If a parent ui-view is reconfigured, it could destroy child ui-views.\n      // Before configuring a child ui-view, make sure it's still in the active uiViews array.\n      if (this._uiViews.indexOf(tuple.uiView) !== -1) tuple.uiView.configUpdated(tuple.viewConfig);\n    };\n\n    // Sort views by FQN and state depth. Process uiviews nearest the root first.\n    const uiViewTuples = this._uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair);\n    const matchedViewConfigs = uiViewTuples.map((tuple) => tuple.viewConfig);\n    const unmatchedConfigTuples = this._viewConfigs\n      .filter((config) => !inArray(matchedViewConfigs, config))\n      .map((viewConfig) => ({ uiView: undefined, viewConfig }));\n\n    uiViewTuples.forEach(configureUIView);\n\n    const allTuples: ViewTuple[] = uiViewTuples.concat(unmatchedConfigTuples);\n    this._listeners.forEach((cb) => cb(allTuples));\n    trace.traceViewSync(allTuples);\n  }\n\n  /**\n   * Registers a `ui-view` component\n   *\n   * When a `ui-view` component is created, it uses this method to register itself.\n   * After registration the [[sync]] method is used to ensure all `ui-view` are configured with the proper [[ViewConfig]].\n   *\n   * Note: the `ui-view` component uses the `ViewConfig` to determine what view should be loaded inside the `ui-view`,\n   * and what the view's state context is.\n   *\n   * Note: There is no corresponding `deregisterUIView`.\n   *       A `ui-view` should hang on to the return value of `registerUIView` and invoke it to deregister itself.\n   *\n   * @param uiView The metadata for a UIView\n   * @return a de-registration function used when the view is destroyed.\n   */\n  registerUIView(uiView: ActiveUIView) {\n    trace.traceViewServiceUIViewEvent('-> Registering', uiView);\n    const uiViews = this._uiViews;\n    const fqnAndTypeMatches = (uiv: ActiveUIView) => uiv.fqn === uiView.fqn && uiv.$type === uiView.$type;\n    if (uiViews.filter(fqnAndTypeMatches).length)\n      trace.traceViewServiceUIViewEvent('!!!! duplicate uiView named:', uiView);\n\n    uiViews.push(uiView);\n    this.sync();\n\n    return () => {\n      const idx = uiViews.indexOf(uiView);\n      if (idx === -1) {\n        trace.traceViewServiceUIViewEvent('Tried removing non-registered uiView', uiView);\n        return;\n      }\n      trace.traceViewServiceUIViewEvent('<- Deregistering', uiView);\n      removeFrom(uiViews)(uiView);\n    };\n  }\n\n  /**\n   * Returns the list of views currently available on the page, by fully-qualified name.\n   *\n   * @return {Array} Returns an array of fully-qualified view names.\n   */\n  available() {\n    return this._uiViews.map(prop('fqn'));\n  }\n\n  /**\n   * Returns the list of views on the page containing loaded content.\n   *\n   * @return {Array} Returns an array of fully-qualified view names.\n   */\n  active() {\n    return this._uiViews.filter(prop('$config')).map(prop('name'));\n  }\n}\n",
    "import { StateParams } from './params/stateParams';\nimport { StateDeclaration } from './state/interface';\nimport { StateObject } from './state/stateObject';\nimport { Transition } from './transition/transition';\nimport { Queue } from './common/queue';\nimport { Disposable } from './interface';\n\n/**\n * Global router state\n *\n * This is where we hold the global mutable state such as current state, current\n * params, current transition, etc.\n */\nexport class UIRouterGlobals implements Disposable {\n  /**\n   * Current parameter values\n   *\n   * The parameter values from the latest successful transition\n   */\n  params: StateParams = new StateParams();\n\n  /**\n   * Current state\n   *\n   * The to-state from the latest successful transition\n   */\n  current: StateDeclaration;\n\n  /**\n   * Current state (internal object)\n   *\n   * The to-state from the latest successful transition\n   * @internal\n   */\n  $current: StateObject;\n\n  /**\n   * The current started/running transition.\n   * This transition has reached at least the onStart phase, but is not yet complete\n   */\n  transition: Transition;\n\n  /** @internal */\n  lastStartedTransitionId = -1;\n\n  /** @internal */\n  transitionHistory = new Queue<Transition>([], 1);\n\n  /** @internal */\n  successfulTransitions = new Queue<Transition>([], 1);\n\n  dispose() {\n    this.transitionHistory.clear();\n    this.successfulTransitions.clear();\n    this.transition = null;\n  }\n}\n",
    "import { Disposable } from '../interface';\nimport { UIRouter } from '../router';\nimport { ParamTypeDefinition, ParamTypes } from '../params';\nimport { isDefined, isString } from '../common';\n\n/**\n * An API to customize the URL behavior and retrieve URL configuration\n *\n * This API is used to customize the behavior of the URL.\n * This includes optional trailing slashes ([[strictMode]]), case sensitivity ([[caseInsensitive]]),\n * and custom parameter encoding (custom [[type]]).\n *\n * It also has information about the location (url) configuration such as [[port]] and [[baseHref]].\n * This information can be used to build absolute URLs, such as\n * `https://example.com:443/basepath/state/substate?param1=a#hashvalue`;\n *\n * This API is found at `router.urlService.config` (see: [[UIRouter.urlService]], [[URLService.config]])\n */\nexport class UrlConfig implements Disposable {\n  /** @internal */ paramTypes = new ParamTypes();\n  /** @internal */ _decodeParams = true;\n  /** @internal */ _isCaseInsensitive = false;\n  /** @internal */ _isStrictMode = true;\n  /** @internal */ _defaultSquashPolicy: boolean | string = false;\n\n  /** @internal */ constructor(/** @internal */ private router: UIRouter) {}\n  /** @internal */ public dispose = () => this.paramTypes.dispose();\n\n  // Delegate these calls to the current LocationConfig implementation\n\n  /**\n   * Gets the base Href, e.g., `http://localhost/approot/`\n   *\n   * @return the application's base href\n   */\n  public baseHref = (): string => this.router.locationConfig.baseHref();\n\n  /**\n   * Gets or sets the hashPrefix\n   *\n   * This only applies when not running in [[html5Mode]] (pushstate mode)\n   *\n   * If the current url is `http://localhost/app#!/uirouter/path/#anchor`, it returns `!` which is the prefix for the \"hashbang\" portion.\n   *\n   * @return the hash prefix\n   */\n\n  public hashPrefix = (newprefix?: string): string => this.router.locationConfig.hashPrefix(newprefix);\n  /**\n   * Gets the host, e.g., `localhost`\n   *\n   * @return the protocol\n   */\n  public host = (): string => this.router.locationConfig.host();\n\n  /**\n   * Returns true when running in pushstate mode\n   *\n   * @return true when running in html5 mode (pushstate mode).\n   */\n  public html5Mode = (): boolean => this.router.locationConfig.html5Mode();\n\n  /**\n   * Gets the port, e.g., `80`\n   *\n   * @return the port number\n   */\n  public port = (): number => this.router.locationConfig.port();\n\n  /**\n   * Gets the protocol, e.g., `http`\n   *\n   * @return the protocol\n   */\n  public protocol = (): string => this.router.locationConfig.protocol();\n\n  /**\n   * Defines whether URL matching should be case sensitive (the default behavior), or not.\n   *\n   * #### Example:\n   * ```js\n   * // Allow case insensitive url matches\n   * urlService.config.caseInsensitive(true);\n   * ```\n   *\n   * @param value `false` to match URL in a case sensitive manner; otherwise `true`;\n   * @returns the current value of caseInsensitive\n   */\n  public caseInsensitive(value?: boolean): boolean {\n    return (this._isCaseInsensitive = isDefined(value) ? value : this._isCaseInsensitive);\n  }\n\n  /**\n   * Sets the default behavior when generating or matching URLs with default parameter values.\n   *\n   * #### Example:\n   * ```js\n   * // Remove default parameter values from the url\n   * urlService.config.defaultSquashPolicy(true);\n   * ```\n   *\n   * @param value A string that defines the default parameter URL squashing behavior.\n   *    - `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL\n   *    - `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the\n   *      parameter is surrounded by slashes, squash (remove) one slash from the URL\n   *    - any other string, e.g. \"~\": When generating an href with a default parameter value, squash (remove)\n   *      the parameter value from the URL and replace it with this string.\n   * @returns the current value of defaultSquashPolicy\n   */\n  public defaultSquashPolicy(value?: boolean | string) {\n    if (isDefined(value) && value !== true && value !== false && !isString(value))\n      throw new Error(`Invalid squash policy: ${value}. Valid policies: false, true, arbitrary-string`);\n    return (this._defaultSquashPolicy = isDefined(value) ? value : this._defaultSquashPolicy);\n  }\n\n  /**\n   * Defines whether URLs should match trailing slashes, or not (the default behavior).\n   *\n   * #### Example:\n   * ```js\n   * // Allow optional trailing slashes\n   * urlService.config.strictMode(false);\n   * ```\n   *\n   * @param value `false` to match trailing slashes in URLs, otherwise `true`.\n   * @returns the current value of strictMode\n   */\n  public strictMode(value?: boolean): boolean {\n    return (this._isStrictMode = isDefined(value) ? value : this._isStrictMode);\n  }\n\n  /**\n   * Creates and registers a custom [[ParamType]] object\n   *\n   * A custom parameter type can be used to generate URLs with typed parameters or custom encoding/decoding.\n   *\n   * #### Note: Register custom types *before using them* in a state definition.\n   *\n   * #### Example:\n   * ```js\n   * // Encode object parameter as JSON string\n   * urlService.config.type('myjson', {\n   *   encode: (obj) => JSON.stringify(obj),\n   *   decode: (str) => JSON.parse(str),\n   *   is: (val) => typeof(val) === 'object',\n   *   pattern: /[^/]+/,\n   *   equals: (a, b) => _.isEqual(a, b),\n   * });\n   * ```\n   *\n   * See [[ParamTypeDefinition]] for more examples\n   *\n   * @param name The type name.\n   * @param definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.\n   * @param definitionFn A function that is injected before the app runtime starts.\n   *        The result of this function should be a [[ParamTypeDefinition]].\n   *        The result is merged into the existing `definition`.\n   *        See [[ParamType]] for information on the values accepted.\n   *\n   * @returns if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined\n   */\n  type(name: string, definition?: ParamTypeDefinition, definitionFn?: () => ParamTypeDefinition) {\n    const type = this.paramTypes.type(name, definition, definitionFn);\n    return !isDefined(definition) ? type : this;\n  }\n}\n",
    "import { UIRouter } from '../router';\nimport { extend, is, isString, LocationServices, pattern } from '../common';\nimport { MatchResult, UrlParts, UrlRule, UrlSyncApi } from './interface';\nimport { UrlRules } from './urlRules';\nimport { UrlConfig } from './urlConfig';\nimport { TargetState, TargetStateDef } from '../state';\n\n/**\n * API for URL management\n */\nexport class UrlService implements LocationServices, UrlSyncApi {\n  /** @internal */ private _stopListeningFn: Function;\n  /** @internal */ interceptDeferred = false;\n\n  /**\n   * The nested [[UrlRules]] API for managing URL rules and rewrites\n   *\n   * See: [[UrlRules]] for details\n   */\n  public rules = new UrlRules(this.router);\n\n  /**\n   * The nested [[UrlConfig]] API to configure the URL and retrieve URL information\n   *\n   * See: [[UrlConfig]] for details\n   */\n  public config = new UrlConfig(this.router);\n\n  /** @internal */\n  constructor(/** @internal */ private router: UIRouter) {}\n  /** @internal */\n  public dispose() {\n    this.listen(false);\n    (this.rules as UrlRules).dispose();\n  }\n\n  /**\n   * Gets the current URL parts\n   *\n   * This method returns the different parts of the current URL (the [[path]], [[search]], and [[hash]]) as a [[UrlParts]] object.\n   */\n  public parts(): UrlParts {\n    return { path: this.path(), search: this.search(), hash: this.hash() };\n  }\n\n  /**\n   * Activates the best rule for the current URL\n   *\n   * Checks the current URL for a matching [[UrlRule]], then invokes that rule's handler.\n   * This method is called internally any time the URL has changed.\n   *\n   * This effectively activates the state (or redirect, etc) which matches the current URL.\n   *\n   * #### Example:\n   * ```js\n   * urlService.deferIntercept();\n   *\n   * fetch('/states.json').then(resp => resp.json()).then(data => {\n   *   data.forEach(state => $stateRegistry.register(state));\n   *   urlService.listen();\n   *   // Find the matching URL and invoke the handler.\n   *   urlService.sync();\n   * });\n   * ```\n   */\n  public sync(evt?) {\n    if (evt && evt.defaultPrevented) return;\n    const { urlService, stateService } = this.router;\n\n    const url: UrlParts = { path: urlService.path(), search: urlService.search(), hash: urlService.hash() };\n    const best = this.match(url);\n\n    const applyResult = pattern([\n      [isString, (newurl: string) => urlService.url(newurl, true)],\n      [TargetState.isDef, (def: TargetStateDef) => stateService.go(def.state, def.params, def.options)],\n      [is(TargetState), (target: TargetState) => stateService.go(target.state(), target.params(), target.options())],\n    ]);\n\n    applyResult(best && best.rule.handler(best.match, url, this.router));\n  }\n\n  /**\n   * Starts or stops listening for URL changes\n   *\n   * Call this sometime after calling [[deferIntercept]] to start monitoring the url.\n   * This causes UI-Router to start listening for changes to the URL, if it wasn't already listening.\n   *\n   * If called with `false`, UI-Router will stop listening (call listen(true) to start listening again).\n   *\n   * #### Example:\n   * ```js\n   * urlService.deferIntercept();\n   *\n   * fetch('/states.json').then(resp => resp.json()).then(data => {\n   *   data.forEach(state => $stateRegistry.register(state));\n   *   // Start responding to URL changes\n   *   urlService.listen();\n   *   urlService.sync();\n   * });\n   * ```\n   *\n   * @param enabled `true` or `false` to start or stop listening to URL changes\n   */\n  public listen(enabled?: boolean): Function {\n    if (enabled === false) {\n      this._stopListeningFn && this._stopListeningFn();\n      delete this._stopListeningFn;\n    } else {\n      return (this._stopListeningFn =\n        this._stopListeningFn || this.router.urlService.onChange((evt) => this.sync(evt)));\n    }\n  }\n\n  /**\n   * Disables monitoring of the URL.\n   *\n   * Call this method before UI-Router has bootstrapped.\n   * It will stop UI-Router from performing the initial url sync.\n   *\n   * This can be useful to perform some asynchronous initialization before the router starts.\n   * Once the initialization is complete, call [[listen]] to tell UI-Router to start watching and synchronizing the URL.\n   *\n   * #### Example:\n   * ```js\n   * // Prevent UI-Router from automatically intercepting URL changes when it starts;\n   * urlService.deferIntercept();\n   *\n   * fetch('/states.json').then(resp => resp.json()).then(data => {\n   *   data.forEach(state => $stateRegistry.register(state));\n   *   urlService.listen();\n   *   urlService.sync();\n   * });\n   * ```\n   *\n   * @param defer Indicates whether to defer location change interception.\n   *        Passing no parameter is equivalent to `true`.\n   */\n  public deferIntercept(defer?: boolean) {\n    if (defer === undefined) defer = true;\n    this.interceptDeferred = defer;\n  }\n\n  /**\n   * Matches a URL\n   *\n   * Given a URL (as a [[UrlParts]] object), check all rules and determine the best matching rule.\n   * Return the result as a [[MatchResult]].\n   */\n  public match(url: UrlParts): MatchResult {\n    url = extend({ path: '', search: {}, hash: '' }, url);\n    const rules = this.rules.rules();\n\n    // Checks a single rule. Returns { rule: rule, match: match, weight: weight } if it matched, or undefined\n    const checkRule = (rule: UrlRule): MatchResult => {\n      const match = rule.match(url, this.router);\n      return match && { match, rule, weight: rule.matchPriority(match) };\n    };\n\n    // The rules are pre-sorted.\n    // - Find the first matching rule.\n    // - Find any other matching rule that sorted *exactly the same*, according to `.sort()`.\n    // - Choose the rule with the highest match weight.\n    let best: MatchResult;\n    for (let i = 0; i < rules.length; i++) {\n      // Stop when there is a 'best' rule and the next rule sorts differently than it.\n      if (best && best.rule._group !== rules[i]._group) break;\n\n      const current = checkRule(rules[i]);\n      // Pick the best MatchResult\n      best = !best || (current && current.weight > best.weight) ? current : best;\n    }\n\n    return best;\n  }\n\n  // Delegate these calls to the current LocationServices implementation\n  /**\n   * Gets the current url, or updates the url\n   *\n   * ### Getting the current URL\n   *\n   * When no arguments are passed, returns the current URL.\n   * The URL is normalized using the internal [[path]]/[[search]]/[[hash]] values.\n   *\n   * For example, the URL may be stored in the hash ([[HashLocationServices]]) or\n   * have a base HREF prepended ([[PushStateLocationServices]]).\n   *\n   * The raw URL in the browser might be:\n   *\n   * ```\n   * http://mysite.com/somepath/index.html#/internal/path/123?param1=foo#anchor\n   * ```\n   *\n   * or\n   *\n   * ```\n   * http://mysite.com/basepath/internal/path/123?param1=foo#anchor\n   * ```\n   *\n   * then this method returns:\n   *\n   * ```\n   * /internal/path/123?param1=foo#anchor\n   * ```\n   *\n   *\n   * #### Example:\n   * ```js\n   * locationServices.url(); // \"/some/path?query=value#anchor\"\n   * ```\n   *\n   * ### Updating the URL\n   *\n   * When `newurl` arguments is provided, changes the URL to reflect `newurl`\n   *\n   * #### Example:\n   * ```js\n   * locationServices.url(\"/some/path?query=value#anchor\", true);\n   * ```\n   *\n   * @param newurl The new value for the URL.\n   *               This url should reflect only the new internal [[path]], [[search]], and [[hash]] values.\n   *               It should not include the protocol, site, port, or base path of an absolute HREF.\n   * @param replace When true, replaces the current history entry (instead of appending it) with this new url\n   * @param state The history's state object, i.e., pushState (if the LocationServices implementation supports it)\n   *\n   * @return the url (after potentially being processed)\n   */\n  public url = (newurl?: string, replace?: boolean, state?: any): string =>\n    this.router.locationService.url(newurl, replace, state);\n\n  /**\n   * Gets the path part of the current url\n   *\n   * If the current URL is `/some/path?query=value#anchor`, this returns `/some/path`\n   *\n   * @return the path portion of the url\n   */\n  public path = (): string => this.router.locationService.path();\n\n  /**\n   * Gets the search part of the current url as an object\n   *\n   * If the current URL is `/some/path?query=value#anchor`, this returns `{ query: 'value' }`\n   *\n   * @return the search (query) portion of the url, as an object\n   */\n  public search = (): { [key: string]: any } => this.router.locationService.search();\n\n  /**\n   * Gets the hash part of the current url\n   *\n   * If the current URL is `/some/path?query=value#anchor`, this returns `anchor`\n   *\n   * @return the hash (anchor) portion of the url\n   */\n  public hash = (): string => this.router.locationService.hash();\n\n  /**\n   * @internal\n   *\n   * Registers a low level url change handler\n   *\n   * Note: Because this is a low level handler, it's not recommended for general use.\n   *\n   * #### Example:\n   * ```js\n   * let deregisterFn = locationServices.onChange((evt) => console.log(\"url change\", evt));\n   * ```\n   *\n   * @param callback a function that will be called when the url is changing\n   * @return a function that de-registers the callback\n   */\n  public onChange = (callback: EventListener): Function => this.router.locationService.onChange(callback);\n}\n",
    "import { UrlMatcherFactory } from './url/urlMatcherFactory';\nimport { UrlRouter } from './url/urlRouter';\nimport { TransitionService } from './transition/transitionService';\nimport { ViewService } from './view/view';\nimport { StateRegistry } from './state/stateRegistry';\nimport { StateService } from './state/stateService';\nimport { UIRouterGlobals } from './globals';\nimport { UIRouterPlugin, Disposable } from './interface';\nimport { values, removeFrom } from './common/common';\nimport { isFunction } from './common/predicates';\nimport { UrlService } from './url/urlService';\nimport { LocationServices, LocationConfig } from './common/coreservices';\nimport { Trace, trace } from './common/trace';\nimport { makeStub } from './common';\n\n/** @internal */\nlet _routerInstance = 0;\n\n/** @internal */\nconst locSvcFns: (keyof LocationServices)[] = ['url', 'path', 'search', 'hash', 'onChange'];\n/** @internal */\nconst locCfgFns: (keyof LocationConfig)[] = ['port', 'protocol', 'host', 'baseHref', 'html5Mode', 'hashPrefix'];\n/** @internal */\nconst locationServiceStub = makeStub<LocationServices>('LocationServices', locSvcFns);\n/** @internal */\nconst locationConfigStub = makeStub<LocationConfig>('LocationConfig', locCfgFns);\n\n/**\n * An instance of UI-Router.\n *\n * This object contains references to service APIs which define your application's routing behavior.\n */\nexport class UIRouter {\n  /** @internal */ $id = _routerInstance++;\n  /** @internal */ _disposed = false;\n  /** @internal */ private _disposables: Disposable[] = [];\n\n  /** Enable/disable tracing to the javascript console */\n  trace: Trace = trace;\n\n  /** Provides services related to ui-view synchronization */\n  viewService = new ViewService(this);\n\n  /** An object that contains global router state, such as the current state and params */\n  globals: UIRouterGlobals = new UIRouterGlobals();\n\n  /** A service that exposes global Transition Hooks */\n  transitionService: TransitionService = new TransitionService(this);\n\n  /**\n   * Deprecated for public use. Use [[urlService]] instead.\n   * @deprecated Use [[urlService]] instead\n   */\n  urlMatcherFactory: UrlMatcherFactory = new UrlMatcherFactory(this);\n\n  /**\n   * Deprecated for public use. Use [[urlService]] instead.\n   * @deprecated Use [[urlService]] instead\n   */\n  urlRouter: UrlRouter = new UrlRouter(this);\n\n  /** Provides services related to the URL */\n  urlService: UrlService = new UrlService(this);\n\n  /** Provides a registry for states, and related registration services */\n  stateRegistry: StateRegistry = new StateRegistry(this);\n\n  /** Provides services related to states */\n  stateService = new StateService(this);\n\n  /** @internal plugin instances are registered here */\n  private _plugins: { [key: string]: UIRouterPlugin } = {};\n\n  /** Registers an object to be notified when the router is disposed */\n  disposable(disposable: Disposable) {\n    this._disposables.push(disposable);\n  }\n\n  /**\n   * Disposes this router instance\n   *\n   * When called, clears resources retained by the router by calling `dispose(this)` on all\n   * registered [[disposable]] objects.\n   *\n   * Or, if a `disposable` object is provided, calls `dispose(this)` on that object only.\n   *\n   * @internal\n   * @param disposable (optional) the disposable to dispose\n   */\n  dispose(disposable?: any): void {\n    if (disposable && isFunction(disposable.dispose)) {\n      disposable.dispose(this);\n      return undefined;\n    }\n\n    this._disposed = true;\n    this._disposables.slice().forEach((d) => {\n      try {\n        typeof d.dispose === 'function' && d.dispose(this);\n        removeFrom(this._disposables, d);\n      } catch (ignored) {}\n    });\n  }\n\n  /**\n   * Creates a new `UIRouter` object\n   *\n   * @param locationService a [[LocationServices]] implementation\n   * @param locationConfig a [[LocationConfig]] implementation\n   * @internal\n   */\n  constructor(\n    public locationService: LocationServices = locationServiceStub,\n    public locationConfig: LocationConfig = locationConfigStub\n  ) {\n    this.viewService._pluginapi._rootViewContext(this.stateRegistry.root());\n    this.globals.$current = this.stateRegistry.root();\n    this.globals.current = this.globals.$current.self;\n\n    this.disposable(this.globals);\n    this.disposable(this.stateService);\n    this.disposable(this.stateRegistry);\n    this.disposable(this.transitionService);\n    this.disposable(this.urlService);\n    this.disposable(locationService);\n    this.disposable(locationConfig);\n  }\n\n  /** Add plugin (as ES6 class) */\n  plugin<T extends UIRouterPlugin>(plugin: { new (router: UIRouter, options?: any): T }, options?: any): T;\n  /** Add plugin (as javascript constructor function) */\n  plugin<T extends UIRouterPlugin>(plugin: { (router: UIRouter, options?: any): void }, options?: any): T;\n  /** Add plugin (as javascript factory function) */\n  plugin<T extends UIRouterPlugin>(plugin: PluginFactory<T>, options?: any): T;\n  /**\n   * Adds a plugin to UI-Router\n   *\n   * This method adds a UI-Router Plugin.\n   * A plugin can enhance or change UI-Router behavior using any public API.\n   *\n   * #### Example:\n   * ```js\n   * import { MyCoolPlugin } from \"ui-router-cool-plugin\";\n   *\n   * var plugin = router.addPlugin(MyCoolPlugin);\n   * ```\n   *\n   * ### Plugin authoring\n   *\n   * A plugin is simply a class (or constructor function) which accepts a [[UIRouter]] instance and (optionally) an options object.\n   *\n   * The plugin can implement its functionality using any of the public APIs of [[UIRouter]].\n   * For example, it may configure router options or add a Transition Hook.\n   *\n   * The plugin can then be published as a separate module.\n   *\n   * #### Example:\n   * ```js\n   * export class MyAuthPlugin implements UIRouterPlugin {\n   *   constructor(router: UIRouter, options: any) {\n   *     this.name = \"MyAuthPlugin\";\n   *     let $transitions = router.transitionService;\n   *     let $state = router.stateService;\n   *\n   *     let authCriteria = {\n   *       to: (state) => state.data && state.data.requiresAuth\n   *     };\n   *\n   *     function authHook(transition: Transition) {\n   *       let authService = transition.injector().get('AuthService');\n   *       if (!authService.isAuthenticated()) {\n   *         return $state.target('login');\n   *       }\n   *     }\n   *\n   *     $transitions.onStart(authCriteria, authHook);\n   *   }\n   * }\n   * ```\n   *\n   * @param plugin one of:\n   *        - a plugin class which implements [[UIRouterPlugin]]\n   *        - a constructor function for a [[UIRouterPlugin]] which accepts a [[UIRouter]] instance\n   *        - a factory function which accepts a [[UIRouter]] instance and returns a [[UIRouterPlugin]] instance\n   * @param options options to pass to the plugin class/factory\n   * @returns the registered plugin instance\n   */\n  plugin<T extends UIRouterPlugin>(plugin: any, options: any = {}): T {\n    const pluginInstance = new plugin(this, options);\n    if (!pluginInstance.name) throw new Error('Required property `name` missing on plugin: ' + pluginInstance);\n    this._disposables.push(pluginInstance);\n    return (this._plugins[pluginInstance.name] = pluginInstance);\n  }\n\n  /**\n   * Returns a plugin registered with the given `pluginName`.\n   *\n   * @param pluginName the name of the plugin to get\n   * @return the plugin, or undefined\n   */\n  getPlugin(pluginName: string): UIRouterPlugin;\n  /**\n   * Returns all registered plugins\n   * @return all registered plugins\n   */\n  getPlugin(): UIRouterPlugin[];\n  getPlugin(pluginName?: string): UIRouterPlugin | UIRouterPlugin[] {\n    return pluginName ? this._plugins[pluginName] : values(this._plugins);\n  }\n}\n\n/** @internal */\nexport type PluginFactory<T> = (router: UIRouter, options?: any) => T;\n",
    "import { Transition } from '../transition/transition';\nimport { UIRouter } from '../router';\nimport { TransitionService } from '../transition/transitionService';\nimport { Resolvable } from '../resolve';\nimport { inArray, uniqR, unnestR, values } from '../common';\nimport { PathNode } from '../path';\n\nfunction addCoreResolvables(trans: Transition) {\n  trans.addResolvable(Resolvable.fromData(UIRouter, trans.router), '');\n  trans.addResolvable(Resolvable.fromData(Transition, trans), '');\n  trans.addResolvable(Resolvable.fromData('$transition$', trans), '');\n  trans.addResolvable(Resolvable.fromData('$stateParams', trans.params()), '');\n\n  trans.entering().forEach((state) => {\n    trans.addResolvable(Resolvable.fromData('$state$', state), state);\n  });\n}\n\nexport const registerAddCoreResolvables = (transitionService: TransitionService) =>\n  transitionService.onCreate({}, addCoreResolvables);\n\nconst TRANSITION_TOKENS = ['$transition$', Transition];\nconst isTransition = inArray(TRANSITION_TOKENS);\n\n// References to Transition in the treeChanges pathnodes makes all\n// previous Transitions reachable in memory, causing a memory leak\n// This function removes resolves for '$transition$' and `Transition` from the treeChanges.\n// Do not use this on current transitions, only on old ones.\nexport const treeChangesCleanup = (trans: Transition) => {\n  const nodes = values(trans.treeChanges()).reduce(unnestR, []).reduce(uniqR, []);\n\n  // If the resolvable is a Transition, return a new resolvable with null data\n  const replaceTransitionWithNull = (r: Resolvable): Resolvable => {\n    return isTransition(r.token) ? Resolvable.fromData(r.token, null) : r;\n  };\n\n  nodes.forEach((node: PathNode) => {\n    node.resolvables = node.resolvables.map(replaceTransitionWithNull);\n  });\n};\n",
    "import { isString, isFunction } from '../common/predicates';\nimport { Transition } from '../transition/transition';\nimport { services } from '../common/coreservices';\nimport { TargetState } from '../state/targetState';\nimport { TransitionService } from '../transition/transitionService';\nimport { TransitionHookFn } from '../transition/interface';\n\n/**\n * A [[TransitionHookFn]] that redirects to a different state or params\n *\n * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`\n *\n * See [[StateDeclaration.redirectTo]]\n */\nconst redirectToHook: TransitionHookFn = (trans: Transition) => {\n  const redirect = trans.to().redirectTo;\n  if (!redirect) return;\n\n  const $state = trans.router.stateService;\n\n  function handleResult(result: any) {\n    if (!result) return;\n    if (result instanceof TargetState) return result;\n    if (isString(result)) return $state.target(<any>result, trans.params(), trans.options());\n    if (result['state'] || result['params'])\n      return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());\n  }\n\n  if (isFunction(redirect)) {\n    return services.$q.when(redirect(trans)).then(handleResult);\n  }\n  return handleResult(redirect);\n};\n\nexport const registerRedirectToHook = (transitionService: TransitionService) =>\n  transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectToHook);\n",
    "import { TransitionStateHookFn } from '../transition/interface';\nimport { Transition } from '../transition/transition';\nimport { TransitionService } from '../transition/transitionService';\nimport { StateDeclaration } from '../state/interface';\nimport { StateObject } from '../state/stateObject';\n\n/**\n * A factory which creates an onEnter, onExit or onRetain transition hook function\n *\n * The returned function invokes the (for instance) state.onEnter hook when the\n * state is being entered.\n */\nfunction makeEnterExitRetainHook(hookName: string): TransitionStateHookFn {\n  return (transition: Transition, state: StateDeclaration) => {\n    const _state: StateObject = state.$$state();\n    const hookFn: TransitionStateHookFn = _state[hookName];\n    return hookFn(transition, state);\n  };\n}\n\n/**\n * The [[TransitionStateHookFn]] for onExit\n *\n * When the state is being exited, the state's .onExit function is invoked.\n *\n * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`\n *\n * See: [[IHookRegistry.onExit]]\n */\nconst onExitHook: TransitionStateHookFn = makeEnterExitRetainHook('onExit');\nexport const registerOnExitHook = (transitionService: TransitionService) =>\n  transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);\n\n/**\n * The [[TransitionStateHookFn]] for onRetain\n *\n * When the state was already entered, and is not being exited or re-entered, the state's .onRetain function is invoked.\n *\n * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`\n *\n * See: [[IHookRegistry.onRetain]]\n */\nconst onRetainHook: TransitionStateHookFn = makeEnterExitRetainHook('onRetain');\nexport const registerOnRetainHook = (transitionService: TransitionService) =>\n  transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);\n\n/**\n * The [[TransitionStateHookFn]] for onEnter\n *\n * When the state is being entered, the state's .onEnter function is invoked.\n *\n * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`\n *\n * See: [[IHookRegistry.onEnter]]\n */\nconst onEnterHook: TransitionStateHookFn = makeEnterExitRetainHook('onEnter');\nexport const registerOnEnterHook = (transitionService: TransitionService) =>\n  transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);\n",
    "import { noop } from '../common/common';\nimport { Transition } from '../transition/transition';\nimport { ResolveContext } from '../resolve/resolveContext';\nimport { TransitionStateHookFn, TransitionHookFn } from '../transition/interface';\nimport { TransitionService } from '../transition/transitionService';\nimport { val } from '../common/hof';\nimport { StateDeclaration } from '../state/interface';\n\nexport const RESOLVE_HOOK_PRIORITY = 1000;\n\n/**\n * A [[TransitionHookFn]] which resolves all EAGER Resolvables in the To Path\n *\n * Registered using `transitionService.onStart({}, eagerResolvePath, { priority: 1000 });`\n *\n * When a Transition starts, this hook resolves all the EAGER Resolvables, which the transition then waits for.\n *\n * See [[StateDeclaration.resolve]]\n */\nconst eagerResolvePath: TransitionHookFn = (trans: Transition) =>\n  new ResolveContext(trans.treeChanges().to).resolvePath('EAGER', trans).then(noop);\n\nexport const registerEagerResolvePath = (transitionService: TransitionService) =>\n  transitionService.onStart({}, eagerResolvePath, { priority: RESOLVE_HOOK_PRIORITY });\n\n/**\n * A [[TransitionHookFn]] which resolves all LAZY Resolvables for the state (and all its ancestors) in the To Path\n *\n * Registered using `transitionService.onEnter({ entering: () => true }, lazyResolveState, { priority: 1000 });`\n *\n * When a State is being entered, this hook resolves all the Resolvables for this state, which the transition then waits for.\n *\n * See [[StateDeclaration.resolve]]\n */\nconst lazyResolveState: TransitionStateHookFn = (trans: Transition, state: StateDeclaration) =>\n  new ResolveContext(trans.treeChanges().to).subContext(state.$$state()).resolvePath('LAZY', trans).then(noop);\n\nexport const registerLazyResolveState = (transitionService: TransitionService) =>\n  transitionService.onEnter({ entering: val(true) }, lazyResolveState, { priority: RESOLVE_HOOK_PRIORITY });\n\n/**\n * A [[TransitionHookFn]] which resolves any dynamically added (LAZY or EAGER) Resolvables.\n *\n * Registered using `transitionService.onFinish({}, eagerResolvePath, { priority: 1000 });`\n *\n * After all entering states have been entered, this hook resolves any remaining Resolvables.\n * These are typically dynamic resolves which were added by some Transition Hook using [[Transition.addResolvable]].\n *\n * See [[StateDeclaration.resolve]]\n */\nconst resolveRemaining: TransitionHookFn = (trans: Transition) =>\n  new ResolveContext(trans.treeChanges().to).resolvePath('LAZY', trans).then(noop);\n\nexport const registerResolveRemaining = (transitionService: TransitionService) =>\n  transitionService.onFinish({}, resolveRemaining, { priority: RESOLVE_HOOK_PRIORITY });\n",
    "import { noop } from '../common/common';\nimport { services } from '../common/coreservices';\nimport { Transition } from '../transition/transition';\nimport { ViewService } from '../view/view';\nimport { ViewConfig } from '../view/interface';\nimport { TransitionHookFn } from '../transition/interface';\nimport { TransitionService } from '../transition/transitionService';\n\n/**\n * A [[TransitionHookFn]] which waits for the views to load\n *\n * Registered using `transitionService.onStart({}, loadEnteringViews);`\n *\n * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.\n * In angular 1, this includes loading the templates.\n */\nconst loadEnteringViews: TransitionHookFn = (transition: Transition) => {\n  const $q = services.$q;\n  const enteringViews = transition.views('entering');\n  if (!enteringViews.length) return;\n  return $q.all(enteringViews.map((view) => $q.when(view.load()))).then(noop);\n};\n\nexport const registerLoadEnteringViews = (transitionService: TransitionService) =>\n  transitionService.onFinish({}, loadEnteringViews);\n\n/**\n * A [[TransitionHookFn]] which activates the new views when a transition is successful.\n *\n * Registered using `transitionService.onSuccess({}, activateViews);`\n *\n * After a transition is complete, this hook deactivates the old views from the previous state,\n * and activates the new views from the destination state.\n *\n * See [[ViewService]]\n */\nconst activateViews: TransitionHookFn = (transition: Transition) => {\n  const enteringViews = transition.views('entering');\n  const exitingViews = transition.views('exiting');\n  if (!enteringViews.length && !exitingViews.length) return;\n\n  const $view: ViewService = transition.router.viewService;\n\n  exitingViews.forEach((vc: ViewConfig) => $view.deactivateViewConfig(vc));\n  enteringViews.forEach((vc: ViewConfig) => $view.activateViewConfig(vc));\n\n  $view.sync();\n};\n\nexport const registerActivateViews = (transitionService: TransitionService) =>\n  transitionService.onSuccess({}, activateViews);\n",
    "import { Transition } from '../transition/transition';\nimport { copy } from '../common/common';\nimport { TransitionService } from '../transition/transitionService';\n\n/**\n * A [[TransitionHookFn]] which updates global UI-Router state\n *\n * Registered using `transitionService.onBefore({}, updateGlobalState);`\n *\n * Before a [[Transition]] starts, updates the global value of \"the current transition\" ([[Globals.transition]]).\n * After a successful [[Transition]], updates the global values of \"the current state\"\n * ([[Globals.current]] and [[Globals.$current]]) and \"the current param values\" ([[Globals.params]]).\n *\n * See also the deprecated properties:\n * [[StateService.transition]], [[StateService.current]], [[StateService.params]]\n */\nconst updateGlobalState = (trans: Transition) => {\n  const globals = trans.router.globals;\n\n  const transitionSuccessful = () => {\n    globals.successfulTransitions.enqueue(trans);\n    globals.$current = trans.$to();\n    globals.current = globals.$current.self;\n\n    copy(trans.params(), globals.params);\n  };\n\n  const clearCurrentTransition = () => {\n    // Do not clear globals.transition if a different transition has started in the meantime\n    if (globals.transition === trans) globals.transition = null;\n  };\n\n  trans.onSuccess({}, transitionSuccessful, { priority: 10000 });\n  trans.promise.then(clearCurrentTransition, clearCurrentTransition);\n};\n\nexport const registerUpdateGlobalState = (transitionService: TransitionService) =>\n  transitionService.onCreate({}, updateGlobalState);\n",
    "import { UrlRouter } from '../url/urlRouter';\nimport { StateService } from '../state/stateService';\nimport { Transition } from '../transition/transition';\nimport { TransitionHookFn } from '../transition/interface';\nimport { TransitionService } from '../transition/transitionService';\n\n/**\n * A [[TransitionHookFn]] which updates the URL after a successful transition\n *\n * Registered using `transitionService.onSuccess({}, updateUrl);`\n */\nconst updateUrl: TransitionHookFn = (transition: Transition) => {\n  const options = transition.options();\n  const $state: StateService = transition.router.stateService;\n  const $urlRouter: UrlRouter = transition.router.urlRouter;\n\n  // Dont update the url in these situations:\n  // The transition was triggered by a URL sync (options.source === 'url')\n  // The user doesn't want the url to update (options.location === false)\n  // The destination state, and all parents have no navigable url\n  if (options.source !== 'url' && options.location && $state.$current.navigable) {\n    const urlOptions = { replace: options.location === 'replace' };\n    $urlRouter.push($state.$current.navigable.url, $state.params, urlOptions);\n  }\n\n  $urlRouter.update(true);\n};\n\nexport const registerUpdateUrl = (transitionService: TransitionService) =>\n  transitionService.onSuccess({}, updateUrl, { priority: 9999 });\n",
    "import { Transition } from '../transition/transition';\nimport { TransitionService } from '../transition/transitionService';\nimport { TransitionHookFn } from '../transition/interface';\nimport { StateDeclaration, LazyLoadResult } from '../state/interface';\nimport { services } from '../common/coreservices';\nimport { StateRule } from '../url/interface';\n\n/**\n * A [[TransitionHookFn]] that performs lazy loading\n *\n * When entering a state \"abc\" which has a `lazyLoad` function defined:\n * - Invoke the `lazyLoad` function (unless it is already in process)\n *   - Flag the hook function as \"in process\"\n *   - The function should return a promise (that resolves when lazy loading is complete)\n * - Wait for the promise to settle\n *   - If the promise resolves to a [[LazyLoadResult]], then register those states\n *   - Flag the hook function as \"not in process\"\n * - If the hook was successful\n *   - Remove the `lazyLoad` function from the state declaration\n * - If all the hooks were successful\n *   - Retry the transition (by returning a TargetState)\n *\n * ```\n * .state('abc', {\n *   component: 'fooComponent',\n *   lazyLoad: () => import('./fooComponent')\n *   });\n * ```\n *\n * See [[StateDeclaration.lazyLoad]]\n */\nconst lazyLoadHook: TransitionHookFn = (transition: Transition) => {\n  const router = transition.router;\n\n  function retryTransition() {\n    if (transition.originalTransition().options().source !== 'url') {\n      // The original transition was not triggered via url sync\n      // The lazy state should be loaded now, so re-try the original transition\n      const orig = transition.targetState();\n      return router.stateService.target(orig.identifier(), orig.params(), orig.options());\n    }\n\n    // The original transition was triggered via url sync\n    // Run the URL rules and find the best match\n    const $url = router.urlService;\n    const result = $url.match($url.parts());\n    const rule = result && result.rule;\n\n    // If the best match is a state, redirect the transition (instead\n    // of calling sync() which supersedes the current transition)\n    if (rule && rule.type === 'STATE') {\n      const state = (rule as StateRule).state;\n      const params = result.match;\n      return router.stateService.target(state, params, transition.options());\n    }\n\n    // No matching state found, so let .sync() choose the best non-state match/otherwise\n    router.urlService.sync();\n  }\n\n  const promises = transition\n    .entering()\n    .filter((state) => !!state.$$state().lazyLoad)\n    .map((state) => lazyLoadState(transition, state));\n\n  return services.$q.all(promises).then(retryTransition);\n};\n\nexport const registerLazyLoadHook = (transitionService: TransitionService) =>\n  transitionService.onBefore({ entering: (state) => !!state.lazyLoad }, lazyLoadHook);\n\n/**\n * Invokes a state's lazy load function\n *\n * @param transition a Transition context\n * @param state the state to lazy load\n * @returns A promise for the lazy load result\n */\nexport function lazyLoadState(transition: Transition, state: StateDeclaration): Promise<LazyLoadResult> {\n  const lazyLoadFn = state.$$state().lazyLoad;\n\n  // Store/get the lazy load promise on/from the hookfn so it doesn't get re-invoked\n  let promise = lazyLoadFn['_promise'];\n  if (!promise) {\n    const success = (result) => {\n      delete state.lazyLoad;\n      delete state.$$state().lazyLoad;\n      delete lazyLoadFn['_promise'];\n      return result;\n    };\n\n    const error = (err) => {\n      delete lazyLoadFn['_promise'];\n      return services.$q.reject(err);\n    };\n\n    promise = lazyLoadFn['_promise'] = services.$q\n      .when(lazyLoadFn(transition, state))\n      .then(updateStateRegistry)\n      .then(success, error);\n  }\n\n  /** Register any lazy loaded state definitions */\n  function updateStateRegistry(result: LazyLoadResult) {\n    if (result && Array.isArray(result.states)) {\n      result.states.forEach((_state) => transition.router.stateRegistry.register(_state));\n    }\n    return result;\n  }\n\n  return promise;\n}\n",
    "import { TransitionHookPhase, PathType } from './interface';\nimport { GetErrorHandler, GetResultHandler, TransitionHook } from './transitionHook';\n/**\n * This class defines a type of hook, such as `onBefore` or `onEnter`.\n * Plugins can define custom hook types, such as sticky states does for `onInactive`.\n */\nexport class TransitionEventType {\n  /* tslint:disable:no-inferrable-types */\n  constructor(\n    public name: string,\n    public hookPhase: TransitionHookPhase,\n    public hookOrder: number,\n    public criteriaMatchPath: PathType,\n    public reverseSort: boolean = false,\n    public getResultHandler: GetResultHandler = TransitionHook.HANDLE_RESULT,\n    public getErrorHandler: GetErrorHandler = TransitionHook.REJECT_ERROR,\n    public synchronous: boolean = false\n  ) {}\n}\n",
    "import { trace } from '../common/trace';\nimport { Rejection } from '../transition/rejectFactory';\nimport { TransitionService } from '../transition/transitionService';\nimport { Transition } from '../transition/transition';\n\n/**\n * A [[TransitionHookFn]] that skips a transition if it should be ignored\n *\n * This hook is invoked at the end of the onBefore phase.\n *\n * If the transition should be ignored (because no parameter or states changed)\n * then the transition is ignored and not processed.\n */\nfunction ignoredHook(trans: Transition) {\n  const ignoredReason = trans._ignoredReason();\n  if (!ignoredReason) return;\n\n  trace.traceTransitionIgnored(trans);\n\n  const pending = trans.router.globals.transition;\n\n  // The user clicked a link going back to the *current state* ('A')\n  // However, there is also a pending transition in flight (to 'B')\n  // Abort the transition to 'B' because the user now wants to be back at 'A'.\n  if (ignoredReason === 'SameAsCurrent' && pending) {\n    pending.abort();\n  }\n\n  return Rejection.ignored().toPromise();\n}\n\nexport const registerIgnoredTransitionHook = (transitionService: TransitionService) =>\n  transitionService.onBefore({}, ignoredHook, { priority: -9999 });\n",
    "import { TransitionService } from '../transition/transitionService';\nimport { Transition } from '../transition/transition';\n\n/**\n * A [[TransitionHookFn]] that rejects the Transition if it is invalid\n *\n * This hook is invoked at the end of the onBefore phase.\n * If the transition is invalid (for example, param values do not validate)\n * then the transition is rejected.\n */\nfunction invalidTransitionHook(trans: Transition) {\n  if (!trans.valid()) {\n    throw new Error(trans.error().toString());\n  }\n}\n\nexport const registerInvalidTransitionHook = (transitionService: TransitionService) =>\n  transitionService.onBefore({}, invalidTransitionHook, { priority: -10000 });\n",
    "import {\n  IHookRegistry,\n  TransitionOptions,\n  TransitionHookScope,\n  TransitionHookPhase,\n  TransitionCreateHookFn,\n  HookMatchCriteria,\n  HookRegOptions,\n  PathTypes,\n  PathType,\n  RegisteredHooks,\n  TransitionHookFn,\n  TransitionStateHookFn,\n} from './interface';\nimport { Transition } from './transition';\nimport { makeEvent, RegisteredHook } from './hookRegistry';\nimport { TargetState } from '../state/targetState';\nimport { PathNode } from '../path/pathNode';\nimport { ViewService } from '../view/view';\nimport { UIRouter } from '../router';\nimport { registerAddCoreResolvables, treeChangesCleanup } from '../hooks/coreResolvables';\nimport { registerRedirectToHook } from '../hooks/redirectTo';\nimport { registerOnExitHook, registerOnRetainHook, registerOnEnterHook } from '../hooks/onEnterExitRetain';\nimport { registerEagerResolvePath, registerLazyResolveState, registerResolveRemaining } from '../hooks/resolve';\nimport { registerLoadEnteringViews, registerActivateViews } from '../hooks/views';\nimport { registerUpdateGlobalState } from '../hooks/updateGlobals';\nimport { registerUpdateUrl } from '../hooks/url';\nimport { registerLazyLoadHook } from '../hooks/lazyLoad';\nimport { TransitionEventType } from './transitionEventType';\nimport { TransitionHook, GetResultHandler, GetErrorHandler } from './transitionHook';\nimport { isDefined } from '../common/predicates';\nimport { removeFrom, values, createProxyFunctions } from '../common/common';\nimport { Disposable } from '../interface'; // has or is using\nimport { val } from '../common/hof';\nimport { registerIgnoredTransitionHook } from '../hooks/ignoredTransition';\nimport { registerInvalidTransitionHook } from '../hooks/invalidTransition';\n\n/**\n * The default [[Transition]] options.\n *\n * Include this object when applying custom defaults:\n * let reloadOpts = { reload: true, notify: true }\n * let options = defaults(theirOpts, customDefaults, defaultOptions);\n */\nexport let defaultTransOpts: TransitionOptions = {\n  location: true,\n  relative: null,\n  inherit: false,\n  notify: true,\n  reload: false,\n  supercede: true,\n  custom: {},\n  current: () => null,\n  source: 'unknown',\n};\n\n/**\n * Plugin API for Transition Service\n */\nexport interface TransitionServicePluginAPI {\n  /**\n   * Adds a Path to be used as a criterion against a TreeChanges path\n   *\n   * For example: the `exiting` path in [[HookMatchCriteria]] is a STATE scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('exiting', TransitionHookScope.STATE)`\n   * Each state in the exiting path is checked against the criteria and returned as part of the match.\n   *\n   * Another example: the `to` path in [[HookMatchCriteria]] is a TRANSITION scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('to', TransitionHookScope.TRANSITION)`\n   * Only the tail of the `to` path is checked against the criteria and returned as part of the match.\n   */\n  _definePathType(name: string, hookScope: TransitionHookScope);\n\n  /**\n   * Gets a Path definition used as a criterion against a TreeChanges path\n   */\n  _getPathTypes(): PathTypes;\n\n  /**\n   * Defines a transition hook type and returns a transition hook registration\n   * function (which can then be used to register hooks of this type).\n   */\n  _defineEvent(\n    name: string,\n    hookPhase: TransitionHookPhase,\n    hookOrder: number,\n    criteriaMatchPath: PathType,\n    reverseSort?: boolean,\n    getResultHandler?: GetResultHandler,\n    getErrorHandler?: GetErrorHandler,\n    rejectIfSuperseded?: boolean\n  );\n\n  /**\n   * Returns the known event types, such as `onBefore`\n   * If a phase argument is provided, returns only events for the given phase.\n   */\n  _getEvents(phase?: TransitionHookPhase): TransitionEventType[];\n\n  /** Returns the hooks registered for the given hook name */\n  getHooks(hookName: string): RegisteredHook[];\n}\n\n/**\n * This class provides services related to Transitions.\n *\n * - Most importantly, it allows global Transition Hooks to be registered.\n * - It allows the default transition error handler to be set.\n * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).\n *\n * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.\n *\n * This API is located at `router.transitionService` ([[UIRouter.transitionService]])\n */\nexport class TransitionService implements IHookRegistry, Disposable {\n  /** @internal */\n  _transitionCount = 0;\n\n  /** @internal */\n  public $view: ViewService;\n\n  /** The transition hook types, such as `onEnter`, `onStart`, etc */\n  private _eventTypes: TransitionEventType[] = [];\n  /** @internal The registered transition hooks */\n  _registeredHooks = {} as RegisteredHooks;\n  /** The  paths on a criteria object */\n  private _criteriaPaths = {} as PathTypes;\n  private _router: UIRouter;\n\n  /** @internal */\n  _pluginapi: TransitionServicePluginAPI;\n\n  /**\n   * This object has hook de-registration functions for the built-in hooks.\n   * This can be used by third parties libraries that wish to customize the behaviors\n   *\n   * @internal\n   */\n  _deregisterHookFns: {\n    addCoreResolves: Function;\n    ignored: Function;\n    invalid: Function;\n    redirectTo: Function;\n    onExit: Function;\n    onRetain: Function;\n    onEnter: Function;\n    eagerResolve: Function;\n    lazyResolve: Function;\n    resolveAll: Function;\n    loadViews: Function;\n    activateViews: Function;\n    updateGlobals: Function;\n    updateUrl: Function;\n    lazyLoad: Function;\n  };\n\n  /** @internal */\n  constructor(_router: UIRouter) {\n    this._router = _router;\n    this.$view = _router.viewService;\n    this._deregisterHookFns = <any>{};\n    this._pluginapi = <TransitionServicePluginAPI>(\n      createProxyFunctions(val(this), {}, val(this), [\n        '_definePathType',\n        '_defineEvent',\n        '_getPathTypes',\n        '_getEvents',\n        'getHooks',\n      ])\n    );\n\n    this._defineCorePaths();\n    this._defineCoreEvents();\n    this._registerCoreTransitionHooks();\n    _router.globals.successfulTransitions.onEvict(treeChangesCleanup);\n  }\n\n  /**\n   * Registers a [[TransitionHookFn]], called *while a transition is being constructed*.\n   *\n   * Registers a transition lifecycle hook, which is invoked during transition construction.\n   *\n   * This low level hook should only be used by plugins.\n   * This can be a useful time for plugins to add resolves or mutate the transition as needed.\n   * The Sticky States plugin uses this hook to modify the treechanges.\n   *\n   * ### Lifecycle\n   *\n   * `onCreate` hooks are invoked *while a transition is being constructed*.\n   *\n   * ### Return value\n   *\n   * The hook's return value is ignored\n   *\n   * @internal\n   * @param criteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be invoked.\n   * @param options the registration options\n   * @returns a function which deregisters the hook.\n   */\n  onCreate(criteria: HookMatchCriteria, callback: TransitionCreateHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onBefore(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onStart(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onExit(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onRetain(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onEnter(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onFinish(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onSuccess(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onError(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n\n  /**\n   * dispose\n   * @internal\n   */\n  dispose(router: UIRouter) {\n    values(this._registeredHooks).forEach((hooksArray: RegisteredHook[]) =>\n      hooksArray.forEach((hook) => {\n        hook._deregistered = true;\n        removeFrom(hooksArray, hook);\n      })\n    );\n  }\n\n  /**\n   * Creates a new [[Transition]] object\n   *\n   * This is a factory function for creating new Transition objects.\n   * It is used internally by the [[StateService]] and should generally not be called by application code.\n   *\n   * @internal\n   * @param fromPath the path to the current state (the from state)\n   * @param targetState the target state (destination)\n   * @returns a Transition\n   */\n  create(fromPath: PathNode[], targetState: TargetState): Transition {\n    return new Transition(fromPath, targetState, this._router);\n  }\n\n  /** @internal */\n  private _defineCoreEvents() {\n    const Phase = TransitionHookPhase;\n    const TH = TransitionHook;\n    const paths = this._criteriaPaths;\n    const NORMAL_SORT = false,\n      REVERSE_SORT = true;\n    const SYNCHRONOUS = true;\n\n    this._defineEvent(\n      'onCreate',\n      Phase.CREATE,\n      0,\n      paths.to,\n      NORMAL_SORT,\n      TH.LOG_REJECTED_RESULT,\n      TH.THROW_ERROR,\n      SYNCHRONOUS\n    );\n\n    this._defineEvent('onBefore', Phase.BEFORE, 0, paths.to);\n\n    this._defineEvent('onStart', Phase.RUN, 0, paths.to);\n    this._defineEvent('onExit', Phase.RUN, 100, paths.exiting, REVERSE_SORT);\n    this._defineEvent('onRetain', Phase.RUN, 200, paths.retained);\n    this._defineEvent('onEnter', Phase.RUN, 300, paths.entering);\n    this._defineEvent('onFinish', Phase.RUN, 400, paths.to);\n\n    this._defineEvent(\n      'onSuccess',\n      Phase.SUCCESS,\n      0,\n      paths.to,\n      NORMAL_SORT,\n      TH.LOG_REJECTED_RESULT,\n      TH.LOG_ERROR,\n      SYNCHRONOUS\n    );\n    this._defineEvent(\n      'onError',\n      Phase.ERROR,\n      0,\n      paths.to,\n      NORMAL_SORT,\n      TH.LOG_REJECTED_RESULT,\n      TH.LOG_ERROR,\n      SYNCHRONOUS\n    );\n  }\n\n  /** @internal */\n  private _defineCorePaths() {\n    const { STATE, TRANSITION } = TransitionHookScope;\n\n    this._definePathType('to', TRANSITION);\n    this._definePathType('from', TRANSITION);\n    this._definePathType('exiting', STATE);\n    this._definePathType('retained', STATE);\n    this._definePathType('entering', STATE);\n  }\n\n  /** @internal */\n  _defineEvent(\n    name: string,\n    hookPhase: TransitionHookPhase,\n    hookOrder: number,\n    criteriaMatchPath: PathType,\n    reverseSort = false,\n    getResultHandler: GetResultHandler = TransitionHook.HANDLE_RESULT,\n    getErrorHandler: GetErrorHandler = TransitionHook.REJECT_ERROR,\n    synchronous = false\n  ) {\n    const eventType = new TransitionEventType(\n      name,\n      hookPhase,\n      hookOrder,\n      criteriaMatchPath,\n      reverseSort,\n      getResultHandler,\n      getErrorHandler,\n      synchronous\n    );\n\n    this._eventTypes.push(eventType);\n    makeEvent(this, this, eventType);\n  }\n\n  /** @internal */\n  private _getEvents(phase?: TransitionHookPhase): TransitionEventType[] {\n    const transitionHookTypes = isDefined(phase)\n      ? this._eventTypes.filter((type) => type.hookPhase === phase)\n      : this._eventTypes.slice();\n\n    return transitionHookTypes.sort((l, r) => {\n      const cmpByPhase = l.hookPhase - r.hookPhase;\n      return cmpByPhase === 0 ? l.hookOrder - r.hookOrder : cmpByPhase;\n    });\n  }\n\n  /**\n   * Adds a Path to be used as a criterion against a TreeChanges path\n   *\n   * For example: the `exiting` path in [[HookMatchCriteria]] is a STATE scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('exiting', TransitionHookScope.STATE)`\n   * Each state in the exiting path is checked against the criteria and returned as part of the match.\n   *\n   * Another example: the `to` path in [[HookMatchCriteria]] is a TRANSITION scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('to', TransitionHookScope.TRANSITION)`\n   * Only the tail of the `to` path is checked against the criteria and returned as part of the match.\n   *\n   * @internal\n   */\n  private _definePathType(name: string, hookScope: TransitionHookScope) {\n    this._criteriaPaths[name] = { name, scope: hookScope };\n  }\n\n  /** @internal */\n  // tslint:disable-next-line\n  private _getPathTypes(): PathTypes {\n    return this._criteriaPaths;\n  }\n\n  /** @internal */\n  public getHooks(hookName: string): RegisteredHook[] {\n    return this._registeredHooks[hookName];\n  }\n\n  /** @internal */\n  private _registerCoreTransitionHooks() {\n    const fns = this._deregisterHookFns;\n\n    fns.addCoreResolves = registerAddCoreResolvables(this);\n    fns.ignored = registerIgnoredTransitionHook(this);\n    fns.invalid = registerInvalidTransitionHook(this);\n\n    // Wire up redirectTo hook\n    fns.redirectTo = registerRedirectToHook(this);\n\n    // Wire up onExit/Retain/Enter state hooks\n    fns.onExit = registerOnExitHook(this);\n    fns.onRetain = registerOnRetainHook(this);\n    fns.onEnter = registerOnEnterHook(this);\n\n    // Wire up Resolve hooks\n    fns.eagerResolve = registerEagerResolvePath(this);\n    fns.lazyResolve = registerLazyResolveState(this);\n    fns.resolveAll = registerResolveRemaining(this);\n\n    // Wire up the View management hooks\n    fns.loadViews = registerLoadEnteringViews(this);\n    fns.activateViews = registerActivateViews(this);\n\n    // Updates global state after a transition\n    fns.updateGlobals = registerUpdateGlobalState(this);\n\n    // After globals.current is updated at priority: 10000\n    fns.updateUrl = registerUpdateUrl(this);\n\n    // Lazy load state trees\n    fns.lazyLoad = registerLazyLoadHook(this);\n  }\n}\n",
    "import {\n  createProxyFunctions,\n  defaults,\n  extend,\n  inArray,\n  noop,\n  removeFrom,\n  silenceUncaughtInPromise,\n  silentRejection,\n} from '../common/common';\nimport { isDefined, isObject, isString } from '../common/predicates';\nimport { Queue } from '../common/queue';\nimport { services } from '../common/coreservices';\n\nimport { PathUtils } from '../path/pathUtils';\nimport { PathNode } from '../path/pathNode';\n\nimport { HookResult, TransitionOptions } from '../transition/interface';\nimport { defaultTransOpts } from '../transition/transitionService';\nimport { Rejection, RejectType } from '../transition/rejectFactory';\nimport { Transition } from '../transition/transition';\n\nimport { HrefOptions, LazyLoadResult, StateDeclaration, StateOrName, TransitionPromise } from './interface';\nimport { StateObject } from './stateObject';\nimport { TargetState } from './targetState';\n\nimport { RawParams } from '../params/interface';\nimport { Param } from '../params/param';\nimport { Glob } from '../common/glob';\nimport { UIRouter } from '../router';\nimport { UIInjector } from '../interface';\nimport { ResolveContext } from '../resolve/resolveContext';\nimport { lazyLoadState } from '../hooks/lazyLoad';\nimport { not, val } from '../common/hof';\nimport { StateParams } from '../params/stateParams';\n\nexport type OnInvalidCallback = (toState?: TargetState, fromState?: TargetState, injector?: UIInjector) => HookResult;\n\n/**\n * Provides services related to ui-router states.\n *\n * This API is located at `router.stateService` ([[UIRouter.stateService]])\n */\nexport class StateService {\n  /** @internal */\n  invalidCallbacks: OnInvalidCallback[] = [];\n\n  /**\n   * The [[Transition]] currently in progress (or null)\n   *\n   * @deprecated This is a passthrough through to [[UIRouterGlobals.transition]]\n   */\n  get transition() {\n    return this.router.globals.transition;\n  }\n  /**\n   * The latest successful state parameters\n   *\n   * @deprecated This is a passthrough through to [[UIRouterGlobals.params]]\n   */\n  get params(): StateParams {\n    return this.router.globals.params;\n  }\n  /**\n   * The current [[StateDeclaration]]\n   *\n   * @deprecated This is a passthrough through to [[UIRouterGlobals.current]]\n   */\n  get current() {\n    return this.router.globals.current;\n  }\n  /**\n   * The current [[StateObject]] (an internal API)\n   *\n   * @deprecated This is a passthrough through to [[UIRouterGlobals.$current]]\n   */\n  get $current() {\n    return this.router.globals.$current;\n  }\n\n  /** @internal */\n  constructor(/** @internal */ private router: UIRouter) {\n    const getters = ['current', '$current', 'params', 'transition'];\n    const boundFns = Object.keys(StateService.prototype).filter(not(inArray(getters)));\n    createProxyFunctions(val(StateService.prototype), this, val(this), boundFns);\n  }\n\n  /** @internal */\n  dispose() {\n    this.defaultErrorHandler(noop);\n    this.invalidCallbacks = [];\n  }\n\n  /**\n   * Handler for when [[transitionTo]] is called with an invalid state.\n   *\n   * Invokes the [[onInvalid]] callbacks, in natural order.\n   * Each callback's return value is checked in sequence until one of them returns an instance of TargetState.\n   * The results of the callbacks are wrapped in $q.when(), so the callbacks may return promises.\n   *\n   * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and the result returned.\n   *\n   * @internal\n   */\n  private _handleInvalidTargetState(fromPath: PathNode[], toState: TargetState) {\n    const fromState = PathUtils.makeTargetState(this.router.stateRegistry, fromPath);\n    const globals = this.router.globals;\n    const latestThing = () => globals.transitionHistory.peekTail();\n    const latest = latestThing();\n    const callbackQueue = new Queue<OnInvalidCallback>(this.invalidCallbacks.slice());\n    const injector = new ResolveContext(fromPath).injector();\n\n    const checkForRedirect = (result: HookResult) => {\n      if (!(result instanceof TargetState)) {\n        return;\n      }\n\n      let target = <TargetState>result;\n      // Recreate the TargetState, in case the state is now defined.\n      target = this.target(target.identifier(), target.params(), target.options());\n\n      if (!target.valid()) {\n        return Rejection.invalid(target.error()).toPromise();\n      }\n\n      if (latestThing() !== latest) {\n        return Rejection.superseded().toPromise();\n      }\n\n      return this.transitionTo(target.identifier(), target.params(), target.options());\n    };\n\n    function invokeNextCallback() {\n      const nextCallback = callbackQueue.dequeue();\n      if (nextCallback === undefined) return Rejection.invalid(toState.error()).toPromise();\n\n      const callbackResult = services.$q.when(nextCallback(toState, fromState, injector));\n      return callbackResult.then(checkForRedirect).then((result) => result || invokeNextCallback());\n    }\n\n    return invokeNextCallback();\n  }\n\n  /**\n   * Registers an Invalid State handler\n   *\n   * Registers a [[OnInvalidCallback]] function to be invoked when [[StateService.transitionTo]]\n   * has been called with an invalid state reference parameter\n   *\n   * Example:\n   * ```js\n   * stateService.onInvalid(function(to, from, injector) {\n   *   if (to.name() === 'foo') {\n   *     let lazyLoader = injector.get('LazyLoadService');\n   *     return lazyLoader.load('foo')\n   *         .then(() => stateService.target('foo'));\n   *   }\n   * });\n   * ```\n   *\n   * @param {function} callback invoked when the toState is invalid\n   *   This function receives the (invalid) toState, the fromState, and an injector.\n   *   The function may optionally return a [[TargetState]] or a Promise for a TargetState.\n   *   If one is returned, it is treated as a redirect.\n   *\n   * @returns a function which deregisters the callback\n   */\n  onInvalid(callback: OnInvalidCallback): Function {\n    this.invalidCallbacks.push(callback);\n    return function deregisterListener() {\n      removeFrom(this.invalidCallbacks)(callback);\n    }.bind(this);\n  }\n\n  /**\n   * Reloads the current state\n   *\n   * A method that force reloads the current state, or a partial state hierarchy.\n   * All resolves are re-resolved, and components reinstantiated.\n   *\n   * #### Example:\n   * ```js\n   * let app angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.reload = function(){\n   *     $state.reload();\n   *   }\n   * });\n   * ```\n   *\n   * Note: `reload()` is just an alias for:\n   *\n   * ```js\n   * $state.transitionTo($state.current, $state.params, {\n   *   reload: true, inherit: false\n   * });\n   * ```\n   *\n   * @param reloadState A state name or a state object.\n   *    If present, this state and all its children will be reloaded, but ancestors will not reload.\n   *\n   * #### Example:\n   * ```js\n   * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'\n   * //and current state is 'contacts.detail.item'\n   * let app angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.reload = function(){\n   *     //will reload 'contact.detail' and nested 'contact.detail.item' states\n   *     $state.reload('contact.detail');\n   *   }\n   * });\n   * ```\n   *\n   * @returns A promise representing the state of the new transition. See [[StateService.go]]\n   */\n  reload(reloadState?: StateOrName): Promise<StateObject> {\n    return this.transitionTo(this.current, this.params, {\n      reload: isDefined(reloadState) ? reloadState : true,\n      inherit: false,\n      notify: false,\n    });\n  }\n\n  /**\n   * Transition to a different state and/or parameters\n   *\n   * Convenience method for transitioning to a new state.\n   *\n   * `$state.go` calls `$state.transitionTo` internally but automatically sets options to\n   * `{ location: true, inherit: true, relative: router.globals.$current, notify: true }`.\n   * This allows you to use either an absolute or relative `to` argument (because of `relative: router.globals.$current`).\n   * It also allows you to specify * only the parameters you'd like to update, while letting unspecified parameters\n   * inherit from the current parameter values (because of `inherit: true`).\n   *\n   * #### Example:\n   * ```js\n   * let app = angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.changeState = function () {\n   *     $state.go('contact.detail');\n   *   };\n   * });\n   * ```\n   *\n   * @param to Absolute state name, state object, or relative state path (relative to current state).\n   *\n   * Some examples:\n   *\n   * - `$state.go('contact.detail')` - will go to the `contact.detail` state\n   * - `$state.go('^')` - will go to the parent state\n   * - `$state.go('^.sibling')` - if current state is `home.child`, will go to the `home.sibling` state\n   * - `$state.go('.child.grandchild')` - if current state is home, will go to the `home.child.grandchild` state\n   *\n   * @param params A map of the parameters that will be sent to the state, will populate $stateParams.\n   *\n   *    Any parameters that are not specified will be inherited from current parameter values (because of `inherit: true`).\n   *    This allows, for example, going to a sibling state that shares parameters defined by a parent state.\n   *\n   * @param options Transition options\n   *\n   * @returns {promise} A promise representing the state of the new transition.\n   */\n  go(to: StateOrName, params?: RawParams, options?: TransitionOptions): TransitionPromise {\n    const defautGoOpts = { relative: this.$current, inherit: true };\n    const transOpts = defaults(options, defautGoOpts, defaultTransOpts);\n    return this.transitionTo(to, params, transOpts);\n  }\n\n  /**\n   * Creates a [[TargetState]]\n   *\n   * This is a factory method for creating a TargetState\n   *\n   * This may be returned from a Transition Hook to redirect a transition, for example.\n   */\n  target(identifier: StateOrName, params?: RawParams, options: TransitionOptions = {}): TargetState {\n    // If we're reloading, find the state object to reload from\n    if (isObject(options.reload) && !(<any>options.reload).name) throw new Error('Invalid reload state object');\n    const reg = this.router.stateRegistry;\n    options.reloadState =\n      options.reload === true ? reg.root() : reg.matcher.find(<any>options.reload, options.relative);\n\n    if (options.reload && !options.reloadState)\n      throw new Error(\n        `No such reload state '${isString(options.reload) ? options.reload : (<any>options.reload).name}'`\n      );\n\n    return new TargetState(this.router.stateRegistry, identifier, params, options);\n  }\n\n  /** @internal */\n  private getCurrentPath(): PathNode[] {\n    const globals = this.router.globals;\n    const latestSuccess: Transition = globals.successfulTransitions.peekTail();\n    const rootPath = () => [new PathNode(this.router.stateRegistry.root())];\n    return latestSuccess ? latestSuccess.treeChanges().to : rootPath();\n  }\n\n  /**\n   * Low-level method for transitioning to a new state.\n   *\n   * The [[go]] method (which uses `transitionTo` internally) is recommended in most situations.\n   *\n   * #### Example:\n   * ```js\n   * let app = angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.changeState = function () {\n   *     $state.transitionTo('contact.detail');\n   *   };\n   * });\n   * ```\n   *\n   * @param to State name or state object.\n   * @param toParams A map of the parameters that will be sent to the state,\n   *      will populate $stateParams.\n   * @param options Transition options\n   *\n   * @returns A promise representing the state of the new transition. See [[go]]\n   */\n  transitionTo(to: StateOrName, toParams: RawParams = {}, options: TransitionOptions = {}): TransitionPromise {\n    const router = this.router;\n    const globals = router.globals;\n    options = defaults(options, defaultTransOpts);\n    const getCurrent = () => globals.transition;\n    options = extend(options, { current: getCurrent });\n\n    const ref: TargetState = this.target(to, toParams, options);\n    const currentPath = this.getCurrentPath();\n\n    if (!ref.exists()) return this._handleInvalidTargetState(currentPath, ref);\n\n    if (!ref.valid()) return <TransitionPromise>silentRejection(ref.error());\n\n    if (options.supercede === false && getCurrent()) {\n      return <TransitionPromise>(\n        Rejection.ignored(\n          'Another transition is in progress and supercede has been set to false in TransitionOptions for the transition. So the transition was ignored in favour of the existing one in progress.'\n        ).toPromise()\n      );\n    }\n\n    /**\n     * Special handling for Ignored, Aborted, and Redirected transitions\n     *\n     * The semantics for the transition.run() promise and the StateService.transitionTo()\n     * promise differ. For instance, the run() promise may be rejected because it was\n     * IGNORED, but the transitionTo() promise is resolved because from the user perspective\n     * no error occurred.  Likewise, the transition.run() promise may be rejected because of\n     * a Redirect, but the transitionTo() promise is chained to the new Transition's promise.\n     */\n    const rejectedTransitionHandler = (trans: Transition) => (error: any): Promise<any> => {\n      if (error instanceof Rejection) {\n        const isLatest = router.globals.lastStartedTransitionId <= trans.$id;\n\n        if (error.type === RejectType.IGNORED) {\n          isLatest && router.urlRouter.update();\n          // Consider ignored `Transition.run()` as a successful `transitionTo`\n          return services.$q.when(globals.current);\n        }\n\n        const detail: any = error.detail;\n        if (error.type === RejectType.SUPERSEDED && error.redirected && detail instanceof TargetState) {\n          // If `Transition.run()` was redirected, allow the `transitionTo()` promise to resolve successfully\n          // by returning the promise for the new (redirect) `Transition.run()`.\n          const redirect: Transition = trans.redirect(detail);\n          return redirect.run().catch(rejectedTransitionHandler(redirect));\n        }\n\n        if (error.type === RejectType.ABORTED) {\n          isLatest && router.urlRouter.update();\n          return services.$q.reject(error);\n        }\n      }\n\n      const errorHandler = this.defaultErrorHandler();\n      errorHandler(error);\n\n      return services.$q.reject(error);\n    };\n\n    const transition = this.router.transitionService.create(currentPath, ref);\n    const transitionToPromise = transition.run().catch(rejectedTransitionHandler(transition));\n    silenceUncaughtInPromise(transitionToPromise); // issue #2676\n\n    // Return a promise for the transition, which also has the transition object on it.\n    return extend(transitionToPromise, { transition });\n  }\n\n  /**\n   * Checks if the current state *is* the provided state\n   *\n   * Similar to [[includes]] but only checks for the full state name.\n   * If params is supplied then it will be tested for strict equality against the current\n   * active params object, so all params must match with none missing and no extras.\n   *\n   * #### Example:\n   * ```js\n   * $state.$current.name = 'contacts.details.item';\n   *\n   * // absolute name\n   * $state.is('contact.details.item'); // returns true\n   * $state.is(contactDetailItemStateObject); // returns true\n   * ```\n   *\n   * // relative name (. and ^), typically from a template\n   * // E.g. from the 'contacts.details' template\n   * ```html\n   * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\n   * ```\n   *\n   * @param stateOrName The state name (absolute or relative) or state object you'd like to check.\n   * @param params A param object, e.g. `{sectionId: section.id}`, that you'd like\n   * to test against the current active state.\n   * @param options An options object. The options are:\n   *   - `relative`: If `stateOrName` is a relative state name and `options.relative` is set, .is will\n   *     test relative to `options.relative` state (or name).\n   *\n   * @returns Returns true if it is the state.\n   */\n  is(stateOrName: StateOrName, params?: RawParams, options?: { relative?: StateOrName }): boolean {\n    options = defaults(options, { relative: this.$current });\n    const state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n    if (!isDefined(state)) return undefined;\n    if (this.$current !== state) return false;\n    if (!params) return true;\n\n    const schema: Param[] = state.parameters({ inherit: true, matchingKeys: params });\n    return Param.equals(schema, Param.values(schema, params), this.params);\n  }\n\n  /**\n   * Checks if the current state *includes* the provided state\n   *\n   * A method to determine if the current active state is equal to or is the child of the\n   * state stateName. If any params are passed then they will be tested for a match as well.\n   * Not all the parameters need to be passed, just the ones you'd like to test for equality.\n   *\n   * #### Example when `$state.$current.name === 'contacts.details.item'`\n   * ```js\n   * // Using partial names\n   * $state.includes(\"contacts\"); // returns true\n   * $state.includes(\"contacts.details\"); // returns true\n   * $state.includes(\"contacts.details.item\"); // returns true\n   * $state.includes(\"contacts.list\"); // returns false\n   * $state.includes(\"about\"); // returns false\n   * ```\n   *\n   * #### Glob Examples when `* $state.$current.name === 'contacts.details.item.url'`:\n   * ```js\n   * $state.includes(\"*.details.*.*\"); // returns true\n   * $state.includes(\"*.details.**\"); // returns true\n   * $state.includes(\"**.item.**\"); // returns true\n   * $state.includes(\"*.details.item.url\"); // returns true\n   * $state.includes(\"*.details.*.url\"); // returns true\n   * $state.includes(\"*.details.*\"); // returns false\n   * $state.includes(\"item.**\"); // returns false\n   * ```\n   *\n   * @param stateOrName A partial name, relative name, glob pattern,\n   *   or state object to be searched for within the current state name.\n   * @param params A param object, e.g. `{sectionId: section.id}`,\n   *   that you'd like to test against the current active state.\n   * @param options An options object. The options are:\n   *   - `relative`: If `stateOrName` is a relative state name and `options.relative` is set, .is will\n   *     test relative to `options.relative` state (or name).\n   *\n   * @returns {boolean} Returns true if it does include the state\n   */\n  includes(stateOrName: StateOrName, params?: RawParams, options?: TransitionOptions): boolean {\n    options = defaults(options, { relative: this.$current });\n    const glob = isString(stateOrName) && Glob.fromString(<string>stateOrName);\n\n    if (glob) {\n      if (!glob.matches(this.$current.name)) return false;\n      stateOrName = this.$current.name;\n    }\n    const state = this.router.stateRegistry.matcher.find(stateOrName, options.relative),\n      include = this.$current.includes;\n\n    if (!isDefined(state)) return undefined;\n    if (!isDefined(include[state.name])) return false;\n    if (!params) return true;\n\n    const schema: Param[] = state.parameters({ inherit: true, matchingKeys: params });\n    return Param.equals(schema, Param.values(schema, params), this.params);\n  }\n\n  /**\n   * Generates a URL for a state and parameters\n   *\n   * Returns the url for the given state populated with the given params.\n   *\n   * #### Example:\n   * ```js\n   * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\n   * ```\n   *\n   * @param stateOrName The state name or state object you'd like to generate a url from.\n   * @param params An object of parameter values to fill the state's required parameters.\n   * @param options Options object. The options are:\n   *\n   * @returns {string} compiled state url\n   */\n  href(stateOrName: StateOrName, params?: RawParams, options?: HrefOptions): string {\n    const defaultHrefOpts = {\n      lossy: true,\n      inherit: true,\n      absolute: false,\n      relative: this.$current,\n    };\n    options = defaults(options, defaultHrefOpts);\n    params = params || {};\n\n    const state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n\n    if (!isDefined(state)) return null;\n    if (options.inherit) params = <any>this.params.$inherit(params, this.$current, state);\n\n    const nav = state && options.lossy ? state.navigable : state;\n\n    if (!nav || nav.url === undefined || nav.url === null) {\n      return null;\n    }\n\n    return this.router.urlRouter.href(nav.url, params, { absolute: options.absolute });\n  }\n\n  /** @internal */\n  private _defaultErrorHandler: (_error: any) => void = function $defaultErrorHandler($error$) {\n    if ($error$ instanceof Error && $error$.stack) {\n      console.error($error$);\n      console.error($error$.stack);\n    } else if ($error$ instanceof Rejection) {\n      console.error($error$.toString());\n      if ($error$.detail && $error$.detail.stack) console.error($error$.detail.stack);\n    } else {\n      console.error($error$);\n    }\n  };\n\n  /**\n   * Sets or gets the default [[transitionTo]] error handler.\n   *\n   * The error handler is called when a [[Transition]] is rejected or when any error occurred during the Transition.\n   * This includes errors caused by resolves and transition hooks.\n   *\n   * Note:\n   * This handler does not receive certain Transition rejections.\n   * Redirected and Ignored Transitions are not considered to be errors by [[StateService.transitionTo]].\n   *\n   * The built-in default error handler logs the error to the console.\n   *\n   * You can provide your own custom handler.\n   *\n   * #### Example:\n   * ```js\n   * stateService.defaultErrorHandler(function() {\n   *   // Do not log transitionTo errors\n   * });\n   * ```\n   *\n   * @param handler a global error handler function\n   * @returns the current global error handler\n   */\n  defaultErrorHandler(handler?: (error: any) => void): (error: any) => void {\n    return (this._defaultErrorHandler = handler || this._defaultErrorHandler);\n  }\n\n  /**\n   * Gets a registered [[StateDeclaration]] object\n   *\n   * Returns the state declaration object for any specific state, or for all registered states.\n   *\n   * @param stateOrName (absolute or relative) If provided, will only get the declaration object for the requested state.\n   * If not provided, returns an array of ALL states.\n   * @param base When `stateOrName` is a relative state reference (such as `.bar.baz`), the state will be retrieved relative to this state.\n   *\n   * @returns a [[StateDeclaration]] object (or array of all registered [[StateDeclaration]] objects.)\n   * @deprecated use [[StateRegistry.get]]\n   */\n  get(stateOrName: StateOrName, base: StateOrName): StateDeclaration;\n  get(stateOrName: StateOrName): StateDeclaration;\n  get(): StateDeclaration[];\n  get(stateOrName?: StateOrName, base?: StateOrName): any {\n    const reg = this.router.stateRegistry;\n    if (arguments.length === 0) return reg.get();\n    return reg.get(stateOrName, base || this.$current);\n  }\n\n  /**\n   * Lazy loads a state\n   *\n   * Explicitly runs a state's [[StateDeclaration.lazyLoad]] function.\n   *\n   * @param stateOrName the state that should be lazy loaded\n   * @param transition the optional Transition context to use (if the lazyLoad function requires an injector, etc)\n   * Note: If no transition is provided, a noop transition is created using the from the current state to the current state.\n   * This noop transition is not actually run.\n   *\n   * @returns a promise to lazy load\n   */\n  lazyLoad(stateOrName: StateOrName, transition?: Transition): Promise<LazyLoadResult> {\n    const state: StateDeclaration = this.get(stateOrName);\n    if (!state || !state.lazyLoad) throw new Error('Can not lazy load ' + stateOrName);\n\n    const currentPath = this.getCurrentPath();\n    const target = PathUtils.makeTargetState(this.router.stateRegistry, currentPath);\n    transition = transition || this.router.transitionService.create(currentPath, target);\n\n    return lazyLoadState(transition, state);\n  }\n}\n",
    "import { isArray, isObject, $QLike } from '../common/index';\n\n/**\n * An angular1-like promise api\n *\n * This object implements four methods similar to the\n * [angular 1 promise api](https://docs.angularjs.org/api/ng/service/$q)\n *\n * UI-Router evolved from an angular 1 library to a framework agnostic library.\n * However, some of the `@uirouter/core` code uses these ng1 style APIs to support ng1 style dependency injection.\n *\n * This API provides native ES6 promise support wrapped as a $q-like API.\n * Internally, UI-Router uses this $q object to perform promise operations.\n * The `angular-ui-router` (ui-router for angular 1) uses the $q API provided by angular.\n *\n * $q-like promise api\n */\nexport const $q = {\n  /** Normalizes a value as a promise */\n  when: (val) => new Promise((resolve, reject) => resolve(val)),\n\n  /** Normalizes a value as a promise rejection */\n  reject: (val) =>\n    new Promise((resolve, reject) => {\n      reject(val);\n    }),\n\n  /** @returns a deferred object, which has `resolve` and `reject` functions */\n  defer: () => {\n    const deferred: any = {};\n    deferred.promise = new Promise((resolve, reject) => {\n      deferred.resolve = resolve;\n      deferred.reject = reject;\n    });\n    return deferred;\n  },\n\n  /** Like Promise.all(), but also supports object key/promise notation like $q */\n  all: (promises: { [key: string]: Promise<any> } | Promise<any>[]) => {\n    if (isArray(promises)) {\n      return Promise.all(promises);\n    }\n\n    if (isObject(promises)) {\n      // Convert promises map to promises array.\n      // When each promise resolves, map it to a tuple { key: key, val: val }\n      const chain = Object.keys(promises).map((key) => promises[key].then((val) => ({ key, val })));\n\n      // Then wait for all promises to resolve, and convert them back to an object\n      return $q.all(chain).then((values) =>\n        values.reduce((acc, tuple) => {\n          acc[tuple.key] = tuple.val;\n          return acc;\n        }, {})\n      );\n    }\n  },\n} as $QLike;\n",
    "import {\n  extend,\n  assertPredicate,\n  isFunction,\n  isArray,\n  isInjectable,\n  $InjectorLike,\n  IInjectable,\n} from '../common/index';\n\n// globally available injectables\nconst globals = {};\nconst STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/gm;\nconst ARGUMENT_NAMES = /([^\\s,]+)/g;\n\n/**\n * A basic angular1-like injector api\n *\n * This object implements four methods similar to the\n * [angular 1 dependency injector](https://docs.angularjs.org/api/auto/service/$injector)\n *\n * UI-Router evolved from an angular 1 library to a framework agnostic library.\n * However, some of the `@uirouter/core` code uses these ng1 style APIs to support ng1 style dependency injection.\n *\n * This object provides a naive implementation of a globally scoped dependency injection system.\n * It supports the following DI approaches:\n *\n * ### Function parameter names\n *\n * A function's `.toString()` is called, and the parameter names are parsed.\n * This only works when the parameter names aren't \"mangled\" by a minifier such as UglifyJS.\n *\n * ```js\n * function injectedFunction(FooService, BarService) {\n *   // FooService and BarService are injected\n * }\n * ```\n *\n * ### Function annotation\n *\n * A function may be annotated with an array of dependency names as the `$inject` property.\n *\n * ```js\n * injectedFunction.$inject = [ 'FooService', 'BarService' ];\n * function injectedFunction(fs, bs) {\n *   // FooService and BarService are injected as fs and bs parameters\n * }\n * ```\n *\n * ### Array notation\n *\n * An array provides the names of the dependencies to inject (as strings).\n * The function is the last element of the array.\n *\n * ```js\n * [ 'FooService', 'BarService', function (fs, bs) {\n *   // FooService and BarService are injected as fs and bs parameters\n * }]\n * ```\n *\n * @type {$InjectorLike}\n */\nexport const $injector = {\n  /** Gets an object from DI based on a string token */\n  get: (name) => globals[name],\n\n  /** Returns true if an object named `name` exists in global DI */\n  has: (name) => $injector.get(name) != null,\n\n  /**\n   * Injects a function\n   *\n   * @param fn the function to inject\n   * @param context the function's `this` binding\n   * @param locals An object with additional DI tokens and values, such as `{ someToken: { foo: 1 } }`\n   */\n  invoke: (fn: IInjectable, context?, locals?) => {\n    const all = extend({}, globals, locals || {});\n    const params = $injector.annotate(fn);\n    const ensureExist = assertPredicate(\n      (key: string) => all.hasOwnProperty(key),\n      (key) => `DI can't find injectable: '${key}'`\n    );\n    const args = params.filter(ensureExist).map((x) => all[x]);\n    if (isFunction(fn)) return fn.apply(context, args);\n    else return (fn as any[]).slice(-1)[0].apply(context, args);\n  },\n\n  /**\n   * Returns a function's dependencies\n   *\n   * Analyzes a function (or array) and returns an array of DI tokens that the function requires.\n   * @return an array of `string`s\n   */\n  annotate: (fn: IInjectable): any[] => {\n    if (!isInjectable(fn)) throw new Error(`Not an injectable function: ${fn}`);\n    if (fn && (fn as any).$inject) return (fn as any).$inject;\n    if (isArray(fn)) return fn.slice(0, -1);\n    const fnStr = fn.toString().replace(STRIP_COMMENTS, '');\n    const result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n    return result || [];\n  },\n} as $InjectorLike;\n",
    "import {\n  LocationConfig,\n  LocationServices,\n  identity,\n  unnestR,\n  isArray,\n  splitEqual,\n  splitHash,\n  splitQuery,\n} from '../common';\nimport { UIRouter } from '../router';\n\nexport const keyValsToObjectR = (accum, [key, val]) => {\n  if (!accum.hasOwnProperty(key)) {\n    accum[key] = val;\n  } else if (isArray(accum[key])) {\n    accum[key].push(val);\n  } else {\n    accum[key] = [accum[key], val];\n  }\n  return accum;\n};\n\nexport const getParams = (queryString: string): any =>\n  queryString.split('&').filter(identity).map(splitEqual).reduce(keyValsToObjectR, {});\n\nexport function parseUrl(url: string) {\n  const orEmptyString = (x) => x || '';\n  const [beforehash, hash] = splitHash(url).map(orEmptyString);\n  const [path, search] = splitQuery(beforehash).map(orEmptyString);\n\n  return { path, search, hash, url };\n}\n\nexport const buildUrl = (loc: LocationServices) => {\n  const path = loc.path();\n  const searchObject = loc.search();\n  const hash = loc.hash();\n\n  const search = Object.keys(searchObject)\n    .map((key) => {\n      const param = searchObject[key];\n      const vals = isArray(param) ? param : [param];\n      return vals.map((val) => key + '=' + val);\n    })\n    .reduce(unnestR, [])\n    .join('&');\n\n  return path + (search ? '?' + search : '') + (hash ? '#' + hash : '');\n};\n\nexport function locationPluginFactory(\n  name: string,\n  isHtml5: boolean,\n  serviceClass: { new (uiRouter?: UIRouter): LocationServices },\n  configurationClass: { new (uiRouter?: UIRouter, isHtml5?: boolean): LocationConfig }\n) {\n  return function (uiRouter: UIRouter) {\n    const service = (uiRouter.locationService = new serviceClass(uiRouter));\n    const configuration = (uiRouter.locationConfig = new configurationClass(uiRouter, isHtml5));\n\n    function dispose(router: UIRouter) {\n      router.dispose(service);\n      router.dispose(configuration);\n    }\n\n    return { name, service, configuration, dispose };\n  };\n}\n",
    "import { deregAll, isDefined, LocationServices, removeFrom, root } from '../common';\nimport { Disposable } from '../interface';\nimport { UIRouter } from '../router';\nimport { HistoryLike, LocationLike } from './interface';\nimport { buildUrl, getParams, parseUrl } from './utils';\n\n/** A base `LocationServices` */\nexport abstract class BaseLocationServices implements LocationServices, Disposable {\n  private _listeners: Function[] = [];\n  _location: LocationLike;\n  _history: HistoryLike;\n\n  _listener = (evt) => this._listeners.forEach((cb) => cb(evt));\n\n  constructor(router: UIRouter, public fireAfterUpdate: boolean) {\n    this._location = root.location;\n    this._history = root.history;\n  }\n\n  /**\n   * This should return the current internal URL representation.\n   *\n   * The internal URL includes only the portion that UI-Router matches.\n   * It does not include:\n   * - protocol\n   * - server\n   * - port\n   * - base href or hash\n   */\n  protected abstract _get(): string;\n\n  /**\n   * This should set the current URL.\n   *\n   * The `url` param should include only the portion that UI-Router matches on.\n   * It should not include:\n   * - protocol\n   * - server\n   * - port\n   * - base href or hash\n   *\n   * However, after this function completes, the browser URL should reflect the entire (fully qualified)\n   * HREF including those data.\n   */\n  protected abstract _set(state: any, title: string, url: string, replace: boolean);\n\n  hash = () => parseUrl(this._get()).hash;\n  path = () => parseUrl(this._get()).path;\n  search = () => getParams(parseUrl(this._get()).search);\n\n  url(url?: string, replace = true): string {\n    if (isDefined(url) && url !== this._get()) {\n      this._set(null, null, url, replace);\n\n      if (this.fireAfterUpdate) {\n        this._listeners.forEach((cb) => cb({ url }));\n      }\n    }\n\n    return buildUrl(this);\n  }\n\n  onChange(cb: EventListener) {\n    this._listeners.push(cb);\n    return () => removeFrom(this._listeners, cb);\n  }\n\n  dispose(router: UIRouter) {\n    deregAll(this._listeners);\n  }\n}\n",
    "import { root, trimHashVal } from '../common';\nimport { UIRouter } from '../router';\nimport { BaseLocationServices } from './baseLocationService';\n\n/** A `LocationServices` that uses the browser hash \"#\" to get/set the current location */\nexport class HashLocationService extends BaseLocationServices {\n  constructor(router: UIRouter) {\n    super(router, false);\n    root.addEventListener('hashchange', this._listener, false);\n  }\n\n  _get() {\n    return trimHashVal(this._location.hash);\n  }\n  _set(state: any, title: string, url: string, replace: boolean) {\n    this._location.hash = url;\n  }\n\n  dispose(router: UIRouter) {\n    super.dispose(router);\n    root.removeEventListener('hashchange', this._listener);\n  }\n}\n",
    "import { BaseLocationServices } from './baseLocationService';\nimport { UIRouter } from '../router';\n\n/** A `LocationServices` that gets/sets the current location from an in-memory object */\nexport class MemoryLocationService extends BaseLocationServices {\n  _url: string;\n\n  constructor(router: UIRouter) {\n    super(router, true);\n  }\n\n  _get() {\n    return this._url;\n  }\n\n  _set(state: any, title: string, url: string, replace: boolean) {\n    this._url = url;\n  }\n}\n",
    "import { UIRouter } from '../router';\nimport { BaseLocationServices } from './baseLocationService';\nimport { LocationConfig, root, splitHash, splitQuery, stripLastPathElement } from '../common';\n\n/**\n * A `LocationServices` that gets/sets the current location using the browser's `location` and `history` apis\n *\n * Uses `history.pushState` and `history.replaceState`\n */\nexport class PushStateLocationService extends BaseLocationServices {\n  _config: LocationConfig;\n\n  constructor(router: UIRouter) {\n    super(router, true);\n    this._config = router.urlService.config;\n    root.addEventListener('popstate', this._listener, false);\n  }\n\n  /**\n   * Gets the base prefix without:\n   * - trailing slash\n   * - trailing filename\n   * - protocol and hostname\n   *\n   * If <base href='/base/'>, this returns '/base'.\n   * If <base href='/foo/base/'>, this returns '/foo/base'.\n   * If <base href='/base/index.html'>, this returns '/base'.\n   * If <base href='http://localhost:8080/base/index.html'>, this returns '/base'.\n   * If <base href='/base'>, this returns ''.\n   * If <base href='http://localhost:8080'>, this returns ''.\n   * If <base href='http://localhost:8080/'>, this returns ''.\n   *\n   * See: https://html.spec.whatwg.org/dev/semantics.html#the-base-element\n   */\n  private _getBasePrefix() {\n    return stripLastPathElement(this._config.baseHref());\n  }\n\n  protected _get() {\n    let { pathname, hash, search } = this._location;\n    search = splitQuery(search)[1]; // strip ? if found\n    hash = splitHash(hash)[1]; // strip # if found\n\n    const basePrefix = this._getBasePrefix();\n    const exactBaseHrefMatch = pathname === this._config.baseHref();\n    const startsWithBase = pathname.substr(0, basePrefix.length) === basePrefix;\n    pathname = exactBaseHrefMatch ? '/' : startsWithBase ? pathname.substring(basePrefix.length) : pathname;\n\n    return pathname + (search ? '?' + search : '') + (hash ? '#' + hash : '');\n  }\n\n  protected _set(state: any, title: string, url: string, replace: boolean) {\n    const basePrefix = this._getBasePrefix();\n    const slash = url && url[0] !== '/' ? '/' : '';\n    const fullUrl = url === '' || url === '/' ? this._config.baseHref() : basePrefix + slash + url;\n\n    if (replace) {\n      this._history.replaceState(state, title, fullUrl);\n    } else {\n      this._history.pushState(state, title, fullUrl);\n    }\n  }\n\n  public dispose(router: UIRouter) {\n    super.dispose(router);\n    root.removeEventListener('popstate', this._listener);\n  }\n}\n",
    "import { LocationConfig } from '../common/coreservices';\nimport { isDefined } from '../common/predicates';\nimport { noop } from '../common/common';\n\n/** A `LocationConfig` mock that gets/sets all config from an in-memory object */\nexport class MemoryLocationConfig implements LocationConfig {\n  dispose = noop;\n\n  _baseHref = '';\n  _port = 80;\n  _protocol = 'http';\n  _host = 'localhost';\n  _hashPrefix = '';\n\n  port = () => this._port;\n  protocol = () => this._protocol;\n  host = () => this._host;\n  baseHref = () => this._baseHref;\n  html5Mode = () => false;\n  hashPrefix = (newval?) => (isDefined(newval) ? (this._hashPrefix = newval) : this._hashPrefix);\n}\n",
    "import { isDefined, isUndefined } from '../common/predicates';\nimport { LocationConfig } from '../common/coreservices';\n\n/** A `LocationConfig` that delegates to the browser's `location` object */\nexport class BrowserLocationConfig implements LocationConfig {\n  private _baseHref = undefined;\n  private _hashPrefix = '';\n\n  constructor(router?, private _isHtml5 = false) {}\n\n  port(): number {\n    if (location.port) {\n      return Number(location.port);\n    }\n\n    return this.protocol() === 'https' ? 443 : 80;\n  }\n\n  protocol(): string {\n    return location.protocol.replace(/:/g, '');\n  }\n\n  host(): string {\n    return location.hostname;\n  }\n\n  html5Mode(): boolean {\n    return this._isHtml5;\n  }\n\n  hashPrefix(): string;\n  hashPrefix(newprefix?: string): string {\n    return isDefined(newprefix) ? (this._hashPrefix = newprefix) : this._hashPrefix;\n  }\n\n  baseHref(href?: string): string {\n    if (isDefined(href)) this._baseHref = href;\n    if (isUndefined(this._baseHref)) this._baseHref = this.getBaseHref();\n    return this._baseHref;\n  }\n\n  private getBaseHref() {\n    const baseTag: HTMLBaseElement = document.getElementsByTagName('base')[0];\n    if (baseTag && baseTag.href) {\n      return baseTag.href.replace(/^([^/:]*:)?\\/\\/[^/]*/, '');\n    }\n\n    return this._isHtml5 ? '/' : location.pathname || '/';\n  }\n\n  dispose() {}\n}\n",
    "import { BrowserLocationConfig } from './browserLocationConfig';\nimport { HashLocationService } from './hashLocationService';\nimport { locationPluginFactory } from './utils';\nimport { LocationPlugin, ServicesPlugin } from './interface';\nimport { UIRouter } from '../router';\nimport { PushStateLocationService } from './pushStateLocationService';\nimport { MemoryLocationService } from './memoryLocationService';\nimport { MemoryLocationConfig } from './memoryLocationConfig';\nimport { $injector } from './injector';\nimport { $q } from './q';\nimport { services } from '../common/coreservices';\n\nexport function servicesPlugin(router: UIRouter): ServicesPlugin {\n  services.$injector = $injector;\n  services.$q = $q;\n\n  return { name: 'vanilla.services', $q, $injector, dispose: () => null };\n}\n\n/** A `UIRouterPlugin` uses the browser hash to get/set the current location */\nexport const hashLocationPlugin: (router: UIRouter) => LocationPlugin = locationPluginFactory(\n  'vanilla.hashBangLocation',\n  false,\n  HashLocationService,\n  BrowserLocationConfig\n);\n\n/** A `UIRouterPlugin` that gets/sets the current location using the browser's `location` and `history` apis */\nexport const pushStateLocationPlugin: (router: UIRouter) => LocationPlugin = locationPluginFactory(\n  'vanilla.pushStateLocation',\n  true,\n  PushStateLocationService,\n  BrowserLocationConfig\n);\n\n/** A `UIRouterPlugin` that gets/sets the current location from an in-memory object */\nexport const memoryLocationPlugin: (router: UIRouter) => LocationPlugin = locationPluginFactory(\n  'vanilla.memoryLocation',\n  false,\n  MemoryLocationService,\n  MemoryLocationConfig\n);\n",
    "/**\n * # Core classes and interfaces\n *\n * The classes and interfaces that are core to ui-router and do not belong\n * to a more specific subsystem (such as resolve).\n *\n * @packageDocumentation\n */\n// Need to import or export at least one concrete something\nimport { noop } from './common/common';\nimport { UIRouter } from './router';\n\n/**\n * An interface for getting values from dependency injection.\n *\n * This is primarily used to get resolve values for a given token.\n * An instance of the `UIInjector` can be retrieved from the current transition using [[Transition.injector]].\n *\n * ---\n *\n * If no resolve is found for a token, then it will delegate to the native injector.\n * The native injector may be Angular 1 `$injector`, Angular 2 `Injector`, or a simple polyfill.\n *\n * In Angular 2, the native injector might be the root Injector,\n * or it might be a lazy loaded `NgModule` injector scoped to a lazy load state tree.\n */\nexport interface UIInjector {\n  /**\n   * Gets a value from the injector.\n   *\n   * For a given token, returns the value from the injector that matches the token.\n   * If the token is for a resolve that has not yet been fetched, this throws an error.\n   *\n   * #### Example:\n   * ```js\n   * var myResolve = injector.get('myResolve');\n   * ```\n   *\n   * #### ng1 Example:\n   * ```js\n   * // Fetch StateService\n   * injector.get('$state').go('home');\n   * ```\n   *\n   * #### ng2 Example:\n   * ```js\n   * import {StateService} from \"ui-router-ng2\";\n   * // Fetch StateService\n   * injector.get(StateService).go('home');\n   * ```\n   *\n   * #### Typescript Example:\n   * ```js\n   * var stringArray = injector.get<string[]>('myStringArray');\n   * ```\n   *\n   * ### `NOWAIT` policy\n   *\n   * When using [[ResolvePolicy.async]] === `NOWAIT`, the value returned from `get()` is a promise for the result.\n   * The promise is not automatically unwrapped.\n   *\n   * @param token the key for the value to get.  May be a string, a class, or any arbitrary object.\n   * @return the Dependency Injection value that matches the token\n   */\n  get(token: any): any;\n  /** Gets a value as type `T` (generics parameter) */\n  get<T>(token: any): T;\n\n  /**\n   * Asynchronously gets a value from the injector\n   *\n   * For a given token, returns a promise for the value from the injector that matches the token.\n   * If the token is for a resolve that has not yet been fetched, this triggers the resolve to load.\n   *\n   * #### Example:\n   * ```js\n   * return injector.getAsync('myResolve').then(value => {\n   *   if (value === 'declined') return false;\n   * });\n   * ```\n   *\n   * @param token the key for the value to get.  May be a string or arbitrary object.\n   * @return a Promise for the Dependency Injection value that matches the token\n   */\n  getAsync(token: any): Promise<any>;\n  /** Asynchronously gets a value as type `T` (generics parameter) */\n  getAsync<T>(token: any): Promise<T>;\n\n  /**\n   * Gets a value from the native injector\n   *\n   * Returns a value from the native injector, bypassing anything in the [[ResolveContext]].\n   *\n   * Example:\n   * ```js\n   * let someThing = injector.getNative(SomeToken);\n   * ```\n   *\n   * @param token the key for the value to get.  May be a string or arbitrary object.\n   * @return the Dependency Injection value that matches the token\n   */\n  getNative(token: any): any;\n  getNative<T>(token: any): T;\n}\n\nexport interface UIRouterPlugin extends Disposable {\n  name: string;\n}\n\nexport abstract class UIRouterPluginBase implements UIRouterPlugin, Disposable {\n  abstract name: string;\n  dispose(router: UIRouter) {}\n}\n\nexport interface Disposable {\n  /** Instructs the Disposable to clean up any resources */\n  dispose(router?: UIRouter);\n}\n"
  ],
  "names": [
    "curry",
    "fn",
    "curried",
    "arguments",
    "length",
    "apply",
    "this",
    "args",
    "Array",
    "prototype",
    "slice",
    "call",
    "bind",
    "compose",
    "start",
    "i",
    "result",
    "pipe",
    "_i",
    "funcs",
    "reverse",
    "prop",
    "name",
    "obj",
    "propEq",
    "_val",
    "parse",
    "split",
    "map",
    "not",
    "and",
    "fn1",
    "fn2",
    "or",
    "all",
    "arr",
    "reduce",
    "b",
    "x",
    "any",
    "is",
    "ctor",
    "constructor",
    "val",
    "v",
    "pattern",
    "struct",
    "toStr",
    "Object",
    "toString",
    "tis",
    "t",
    "isUndefined",
    "isDefined",
    "isNull",
    "o",
    "isNullOrUndefined",
    "isFunction",
    "isNumber",
    "isString",
    "isObject",
    "isArray",
    "isDate",
    "isRegExp",
    "isInjectable",
    "head",
    "tail",
    "filter",
    "isPromise",
    "makeStub",
    "service",
    "methods",
    "acc",
    "key",
    "fnname",
    "Error",
    "services",
    "$q",
    "undefined",
    "$injector",
    "root",
    "self",
    "global",
    "angular",
    "fromJson",
    "JSON",
    "toJson",
    "stringify",
    "forEach",
    "cb",
    "_this",
    "keys",
    "extend",
    "assign",
    "_extend",
    "equals",
    "_equals",
    "identity",
    "noop",
    "createProxyFunctions",
    "source",
    "target",
    "fnNames",
    "latebind",
    "bindFunction",
    "fnName",
    "inherit",
    "parent",
    "extra",
    "create",
    "inArray",
    "_inArray",
    "array",
    "indexOf",
    "removeFrom",
    "_removeFrom",
    "idx",
    "splice",
    "pushTo",
    "_pushTo",
    "push",
    "deregAll",
    "functions",
    "defaults",
    "opts",
    "defaultsList",
    "defaultVals",
    "pick",
    "mergeR",
    "memo",
    "item",
    "ancestors",
    "first",
    "second",
    "path",
    "n",
    "propNames",
    "objCopy",
    "_prop",
    "omit",
    "collection",
    "callback",
    "accept",
    "find",
    "mapObj",
    "values",
    "allTrueR",
    "elem",
    "anyTrueR",
    "unnestR",
    "concat",
    "flattenR",
    "pushR",
    "uniqR",
    "token",
    "unnest",
    "assertPredicate",
    "assertFn",
    "assertMap",
    "predicateOrMap",
    "errMsg",
    "arrayTuples",
    "maxArrayLen",
    "min",
    "Math",
    "applyPairs",
    "keyValTuple",
    "value",
    "copy",
    "src",
    "dest",
    "toObj",
    "j",
    "o1",
    "o2",
    "t1",
    "a1",
    "a2",
    "tup",
    "getTime",
    "RejectType",
    "silenceUncaughtInPromise",
    "promise",
    "catch",
    "e",
    "silentRejection",
    "error",
    "reject",
    "text",
    "glob",
    "regexpString",
    "seg",
    "join",
    "regexp",
    "RegExp",
    "Glob",
    "exec",
    "test",
    "_items",
    "_limit",
    "_evictListeners",
    "Queue",
    "items",
    "evict",
    "shift",
    "size",
    "current",
    "id",
    "type",
    "message",
    "detail",
    "Rejection",
    "then",
    "_transitionRejection",
    "options",
    "rejection",
    "SUPERSEDED",
    "redirected",
    "superseded",
    "INVALID",
    "IGNORED",
    "ABORTED",
    "ERROR",
    "errored",
    "d",
    "maxLength",
    "max",
    "str",
    "substr",
    "padString",
    "functionToString",
    "fnStr",
    "fnToString",
    "namedFunctionMatch",
    "match",
    "_fn",
    "isRejection",
    "isRejectionPromise",
    "stringifyPattern",
    "seen",
    "format",
    "replace",
    "beforeAfterSubstr",
    "char",
    "hostRegex",
    "stripLastPathElement",
    "splitHash",
    "splitQuery",
    "splitEqual",
    "trimHashVal",
    "splitOnDelim",
    "delim",
    "re",
    "joinNeighborsR",
    "noopConsoleStub",
    "log",
    "table",
    "console",
    "bound",
    "safeConsole",
    "document",
    "documentMode",
    "window",
    "Function",
    "uiViewString",
    "uiview",
    "state",
    "creationContext",
    "$type",
    "fqn",
    "Category",
    "normalizedCat",
    "input",
    "_tid",
    "_rid",
    "transLbl",
    "trans",
    "approximateDigests",
    "Trace",
    "enabled",
    "categories",
    "k",
    "parseInt",
    "isNaN",
    "category",
    "_enabled",
    "_set",
    "TRANSITION",
    "step",
    "HOOK",
    "event",
    "context",
    "registeredHook",
    "hookResult",
    "transitionOptions",
    "when",
    "RESOLVE",
    "resolvable",
    "data",
    "reason",
    "finalState",
    "viewData",
    "UIVIEW",
    "traceUIViewEvent",
    "html",
    "pairs",
    "VIEWCONFIG",
    "uivheader",
    "mapping",
    "_a",
    "uiView",
    "viewConfig",
    "uiv",
    "cfg",
    "viewDecl",
    "$context",
    "$name",
    "_b",
    "sort",
    "a",
    "localeCompare",
    "view",
    "$id",
    "$uiViewName",
    "$uiViewContextAnchor",
    "trace",
    "def",
    "ParamType",
    "sub",
    "decode",
    "mode",
    "isSearch",
    "ArrayType",
    "arrayWrap",
    "arrayHandler",
    "allTruthyMode",
    "arrayUnwrap",
    "arrayEqualsHandler",
    "val1",
    "val2",
    "left",
    "right",
    "paramTypeFn",
    "wrapperFn",
    "dynamic",
    "raw",
    "$arrayMode",
    "DefType",
    "hasOwn",
    "hasOwnProperty",
    "isShorthand",
    "getParamDeclaration",
    "paramName",
    "location",
    "noReloadOnSearch",
    "reloadOnSearch",
    "SEARCH",
    "defaultConfig",
    "paramConfig",
    "getStaticDefaultValue",
    "$$fn",
    "unwrapShorthand",
    "params",
    "makeDefaultType",
    "urlConfig",
    "config",
    "urlType",
    "paramTypes",
    "CONFIG",
    "PATH",
    "getType",
    "arrayDefaults",
    "arrayParamNomenclature",
    "arrayMode",
    "$asArray",
    "isOptional",
    "squash",
    "defaultPolicy",
    "getSquashPolicy",
    "defaultSquashPolicy",
    "from",
    "to",
    "configuredKeys",
    "getReplace",
    "Param",
    "paramValues",
    "params_1",
    "param",
    "values1",
    "values2",
    "changed",
    "validates",
    "tuple",
    "replaceSpecialValues",
    "_defaultValueCache",
    "defaultValue",
    "invoke",
    "getDefaultValue",
    "$normalize",
    "normalized",
    "encoded",
    "encode",
    "ParamTypes",
    "types",
    "defaultTypes",
    "definition",
    "definitionFn",
    "typeQueue",
    "enqueue",
    "_flushTypeQueue",
    "valToString",
    "defaultTypeBase",
    "String",
    "string",
    "query",
    "hash",
    "int",
    "bool",
    "Boolean",
    "date",
    "getFullYear",
    "getMonth",
    "getDate",
    "capture",
    "Date",
    "valueOf",
    "l",
    "r",
    "json",
    "StateParams",
    "newParams",
    "$current",
    "$to",
    "parentParams",
    "parents",
    "inherited",
    "inheritList",
    "stateOrNode",
    "PathNode",
    "node",
    "paramSchema",
    "resolvables",
    "views",
    "parameters",
    "res",
    "clone",
    "pDef",
    "paramDef",
    "paramsFn",
    "diff",
    "_stateRegistry",
    "_identifier",
    "_params",
    "_options",
    "_definition",
    "matcher",
    "relative",
    "TargetState",
    "base",
    "stateName",
    "newOpts",
    "PathUtils",
    "registry",
    "targetState",
    "toParams",
    "$state",
    "applyRawParams",
    "fromPath",
    "toPath",
    "buildPath",
    "inheritParams",
    "$view",
    "states",
    "viewDecls",
    "subPath",
    "viewConfigs",
    "createViewConfig",
    "toKeys",
    "noInherit",
    "toNode",
    "toParamVals",
    "incomingParamVals",
    "fromParamVals",
    "ownParamVals",
    "reloadState",
    "node1",
    "node2",
    "retained",
    "exiting",
    "entering",
    "keep",
    "nonDynamicParams",
    "retainedWithToParams",
    "retainedNode",
    "cloned",
    "pathA",
    "pathB",
    "done",
    "matching",
    "nodeA",
    "nodeB",
    "predicate",
    "elementIdx",
    "resolvePolicies",
    "LAZY",
    "EAGER",
    "async",
    "WAIT",
    "NOWAIT",
    "defaultResolvePolicy",
    "arg1",
    "resolveFn",
    "deps",
    "policy",
    "Resolvable",
    "resolved",
    "literal",
    "thisPolicy",
    "statePolicy",
    "resolvePolicy",
    "resolveContext",
    "findNode",
    "asyncPolicy",
    "getPolicy",
    "customAsyncPolicy",
    "getDependencies",
    "get",
    "resolvedDeps",
    "resolvedValue",
    "traceResolvableResolved",
    "resolve",
    "whens",
    "ALL_WHENS",
    "EAGER_WHENS",
    "NATIVE_INJECTOR_TOKEN",
    "_path",
    "ResolveContext",
    "newResolvables",
    "matchedWhens",
    "traceResolvePath",
    "matchesPolicy",
    "acceptedVals",
    "whenOrAsync",
    "promises",
    "nodeResolvables",
    "nowait",
    "wait",
    "subContext",
    "getResult",
    "_injector",
    "UIInjectorImpl",
    "availableResolvables",
    "_node",
    "fromInjector",
    "injector",
    "getNative",
    "native",
    "getResolvable",
    "nameBuilder",
    "selfBuilder",
    "$$state",
    "dataBuilder",
    "getUrlBuilder",
    "$urlMatcherFactoryProvider",
    "stateObject",
    "stateDec",
    "url",
    "newStateDec",
    "parsed",
    "charAt",
    "substring",
    "parseUrl",
    "compile",
    "isMatcher",
    "navigable",
    "append",
    "pathBuilder",
    "includesBuilder",
    "includes",
    "resolvablesBuilder",
    "resolveObj",
    "getToken",
    "p",
    "provide",
    "literal2Resolvable",
    "useFactory",
    "dependencies",
    "useClass",
    "useValue",
    "useExisting",
    "tuple2Resolvable",
    "annotate",
    "strictDi",
    "item2Resolvable",
    "decl",
    "TransitionHookPhase",
    "TransitionHookScope",
    "urlMatcherFactory",
    "paramFactory",
    "isRoot",
    "builders",
    "parentName",
    "urlParams",
    "nonUrlParams",
    "fromConfig",
    "StateBuilder",
    "chain",
    "parentFn",
    "_state",
    "segments",
    "pop",
    "StateObject",
    "stateDecl",
    "isStateClass",
    "__stateObjectCache",
    "nameGlob",
    "fromString",
    "ref",
    "matchingKeys",
    "parameter",
    "_states",
    "StateMatcher",
    "stateOrName",
    "matchGlob",
    "isStr",
    "isRelative",
    "resolvePath",
    "matches",
    "baseState",
    "splitName",
    "pathLength",
    "relName",
    "router",
    "builder",
    "listeners",
    "StateQueueManager",
    "queue",
    "flush",
    "registered",
    "orphans",
    "previousQueueLength",
    "getState",
    "notifyListeners",
    "listener",
    "s",
    "name_1",
    "build",
    "orphanIdx",
    "existingState",
    "existingFutureState",
    "stateRegistry",
    "deregister",
    "attachRoute",
    "prev",
    "abstract",
    "rulesApi",
    "urlService",
    "rules",
    "rule",
    "urlRuleFactory",
    "stateQueue",
    "_registerRoot",
    "StateRegistry",
    "_root",
    "register",
    "#",
    "dispose",
    "stateDefinition",
    "getChildren",
    "_children",
    "children",
    "deregistered",
    "removeRule",
    "deregisteredStates",
    "_deregisterTree",
    "found",
    "property",
    "builderFunction",
    "defaultOptions",
    "transition",
    "traceData",
    "stateContext",
    "hookPhase",
    "RUN",
    "isActive",
    "eventType",
    "TransitionHook",
    "hooks",
    "waitFor",
    "nextHook",
    "invokeHook",
    "doneCallback",
    "remainingHooks",
    "hook",
    "err",
    "stateService",
    "defaultErrorHandler",
    "_deregistered",
    "notCurrent",
    "getNotCurrentRejection",
    "traceHookInvocation",
    "handleError",
    "getErrorHandler",
    "handleResult",
    "getResultHandler",
    "synchronous",
    "normalize",
    "toPromise",
    "invokeLimit",
    "invokeCount",
    "handleHookResult",
    "traceHookResult",
    "aborted",
    "isTargetState",
    "_disposed",
    "_aborted",
    "isSuperseded",
    "logError",
    "matchState",
    "criterion",
    "toMatch",
    "globStrings",
    "tranSvc",
    "matchCriteria",
    "removeHookFromRegistry",
    "priority",
    "RegisteredHook",
    "nodes",
    "_pluginapi",
    "_getPathTypes",
    "treeChanges",
    "criteria",
    "_getDefaultMatchCriteria",
    "mn",
    "pathtype",
    "isStateHook",
    "scope",
    "STATE",
    "_matchingNodes",
    "_getMatchingNodes",
    "every",
    "makeEvent",
    "transitionService",
    "_registeredHooks",
    "removeHookFn",
    "hookRegistrationFn",
    "matchObject",
    "HookBuilder",
    "phase",
    "_getEvents",
    "buildHooks",
    "hookType",
    "matchingHooks",
    "getMatchingHooks",
    "baseHookOptions",
    "criteriaMatchPath",
    "transitionHook",
    "reverseDepthSort",
    "factor",
    "depthDelta",
    "tupleSort",
    "reverseSort",
    "isCreate",
    "CREATE",
    "$transitions",
    "reg",
    "getHooks",
    "stateSelf",
    "defer",
    "_deferred",
    "globals",
    "_targetState",
    "valid",
    "_transitionCount",
    "buildToPath",
    "_treeChanges",
    "createTransitionHookRegFns",
    "onCreateHooks",
    "_hookBuilder",
    "buildHooksForPhase",
    "invokeHooks",
    "applyViewConfigs",
    "Transition",
    "hookName",
    "enteringStates",
    "$from",
    "compare",
    "pathname",
    "freeze",
    "fromParams",
    "allParamDescriptors",
    "pathNode",
    "changedValues",
    "descriptor",
    "pathName",
    "getTokens",
    "topath",
    "targetNode",
    "addResolvables",
    "redirectedFrom",
    "rf",
    "originalTransition",
    "redirects",
    "redirectOpts",
    "newOptions",
    "withOptions",
    "newTransition",
    "originalEnteringNodes",
    "redirectEnteringNodes",
    "tc",
    "reload",
    "nodeSchemas",
    "schema",
    "toVals",
    "fromVals",
    "changes",
    "_changedParams",
    "_ignoredReason",
    "pending",
    "same",
    "newTC",
    "pendTC",
    "runAllHooks",
    "getHooksFor",
    "allBeforeHooks",
    "BEFORE",
    "lastStartedTransitionId",
    "transitionHistory",
    "traceTransitionStart",
    "allRunHooks",
    "traceSuccess",
    "success",
    "SUCCESS",
    "traceError",
    "_error",
    "invalid",
    "paramDefs",
    "invalidParams",
    "invalidValues",
    "fromStateOrName",
    "toStateOrName",
    "avoidEmptyHash",
    "quoteRegExp",
    "surroundPattern",
    "splitOnSlash",
    "strict",
    "caseInsensitive",
    "decodeParams",
    "matchArray",
    "details",
    "segment",
    "placeholder",
    "searchPlaceholder",
    "patterns",
    "last",
    "checkParamErrors",
    "UrlMatcher",
    "nameValidator",
    "matchDetails",
    "m",
    "index",
    "_segments",
    "lastIndex",
    "search",
    "fromSearch",
    "_compiled",
    "_pattern",
    "encodeURIComponent",
    "c",
    "charCodeAt",
    "toUpperCase",
    "weights",
    "_cache",
    "pathSegmentsAndParams",
    "weightsA",
    "weightsB",
    "padVal",
    "len",
    "padArrays",
    "cmp",
    "_pairs",
    "paramValue",
    "decodeURIComponent",
    "reverseString",
    "allParams",
    "pathParams",
    "searchParams",
    "nPathSegments",
    "urlm",
    "_getDecodedParamValue",
    "findParam",
    "urlMatchers",
    "getDetails",
    "queryParams",
    "isValid",
    "isDefaultValue",
    "pathString",
    "encodeDashes",
    "queryString",
    "paramDetails",
    "ParamFactory",
    "strictMode",
    "UrlMatcherFactory",
    "globalConfig",
    "_isStrictMode",
    "_isCaseInsensitive",
    "_decodeParams",
    "object",
    "UrlRuleFactory",
    "what",
    "handler",
    "isState",
    "isStateDeclaration",
    "makeRule",
    "_what",
    "fromUrlMatcher",
    "fromState",
    "fromRegExp",
    "BaseUrlRule",
    "urlMatcher",
    "_handler",
    "matchPriority",
    "optional",
    "stateOrDecl",
    "href",
    "transitionTo",
    "sticky",
    "Number",
    "defaultRuleSortFn",
    "evt",
    "sync",
    "listen",
    "deferIntercept",
    "urlParts",
    "initial",
    "otherwise",
    "compareFn",
    "UrlRouter",
    "read",
    "$url",
    "locationService",
    "absolute",
    "isHtml5",
    "baseHref",
    "html5Mode",
    "hashPrefix",
    "slash",
    "cfgPort",
    "port",
    "protocol",
    "host",
    "interceptDeferred",
    "_rootViewContext",
    "_viewConfigFactory",
    "_registeredUIView",
    "_uiViews",
    "_registeredUIViews",
    "_activeViewConfigs",
    "_viewConfigs",
    "_onSync",
    "_listeners",
    "ViewService",
    "rawViewName",
    "viewAtContext",
    "uiViewName",
    "uiViewContextAnchor",
    "relativeViewNameSugar",
    "anchor",
    "_rootContext",
    "viewType",
    "factory",
    "_viewConfigFactories",
    "cfgFactory",
    "cfgs",
    "traceViewServiceEvent",
    "uiViewsByFqn",
    "viewConfigDepth",
    "count",
    "depthCompare",
    "depthFn",
    "posNeg",
    "uiViewTuples",
    "stateDepth",
    "matchingConfigs",
    "matchedViewConfigs",
    "unmatchedConfigTuples",
    "configUpdated",
    "allTuples",
    "traceViewSync",
    "traceViewServiceUIViewEvent",
    "uiViews",
    "vc",
    "vcSegments",
    "uivSegments",
    "negOffset",
    "fqnToFirstSegment",
    "uiViewContext",
    "UIRouterGlobals",
    "clear",
    "successfulTransitions",
    "getHandlerFn",
    "isDef",
    "useMatchPriority",
    "URLMATCHER",
    "REGEXP",
    "RAW",
    "OTHER",
    "UrlRules",
    "_rules",
    "_otherwiseFn",
    "handlerFn",
    "_sorted",
    "isUrlRule",
    "_id",
    "ensureSorted",
    "sorted",
    "stableSort",
    "_sortFn",
    "group",
    "_group",
    "arrOfWrapper",
    "wrapperA",
    "wrapperB",
    "cmpDiff",
    "wrapper",
    "locationConfig",
    "newprefix",
    "UrlConfig",
    "_defaultSquashPolicy",
    "newurl",
    "onChange",
    "UrlService",
    "defaultPrevented",
    "best",
    "go",
    "applyResult",
    "_stopListeningFn",
    "weight",
    "_routerInstance",
    "locationServiceStub",
    "locationConfigStub",
    "TransitionService",
    "StateService",
    "viewService",
    "disposable",
    "UIRouter",
    "_disposables",
    "ignored",
    "plugin",
    "pluginInstance",
    "_plugins",
    "pluginName",
    "addCoreResolvables",
    "addResolvable",
    "fromData",
    "isTransition",
    "treeChangesCleanup",
    "replaceTransitionWithNull",
    "redirectToHook",
    "redirect",
    "redirectTo",
    "makeEnterExitRetainHook",
    "hookFn",
    "onExitHook",
    "onRetainHook",
    "onEnterHook",
    "eagerResolvePath",
    "lazyResolveState",
    "resolveRemaining",
    "loadEnteringViews",
    "enteringViews",
    "load",
    "activateViews",
    "exitingViews",
    "deactivateViewConfig",
    "activateViewConfig",
    "updateGlobalState",
    "clearCurrentTransition",
    "onSuccess",
    "updateUrl",
    "$urlRouter",
    "urlRouter",
    "urlOptions",
    "update",
    "lazyLoadHook",
    "lazyLoad",
    "lazyLoadState",
    "orig",
    "identifier",
    "parts",
    "lazyLoadFn",
    "hookOrder",
    "HANDLE_RESULT",
    "REJECT_ERROR",
    "ignoredHook",
    "ignoredReason",
    "traceTransitionIgnored",
    "abort",
    "invalidTransitionHook",
    "defaultTransOpts",
    "notify",
    "supercede",
    "custom",
    "_router",
    "_deregisterHookFns",
    "_defineCorePaths",
    "_defineCoreEvents",
    "_registerCoreTransitionHooks",
    "onEvict",
    "hooksArray",
    "Phase",
    "TH",
    "paths",
    "_criteriaPaths",
    "_defineEvent",
    "LOG_REJECTED_RESULT",
    "THROW_ERROR",
    "LOG_ERROR",
    "_definePathType",
    "TransitionEventType",
    "_eventTypes",
    "cmpByPhase",
    "hookScope",
    "fns",
    "addCoreResolves",
    "onCreate",
    "onBefore",
    "onStart",
    "onExit",
    "onRetain",
    "onEnter",
    "eagerResolve",
    "lazyResolve",
    "resolveAll",
    "onFinish",
    "loadViews",
    "updateGlobals",
    "$error$",
    "stack",
    "boundFns",
    "invalidCallbacks",
    "toState",
    "makeTargetState",
    "latestThing",
    "peekTail",
    "latest",
    "callbackQueue",
    "checkForRedirect",
    "invokeNextCallback",
    "nextCallback",
    "dequeue",
    "transOpts",
    "latestSuccess",
    "getCurrent",
    "currentPath",
    "getCurrentPath",
    "exists",
    "_handleInvalidTargetState",
    "rejectedTransitionHandler",
    "isLatest",
    "run",
    "errorHandler",
    "transitionToPromise",
    "include",
    "lossy",
    "$inherit",
    "nav",
    "_defaultErrorHandler",
    "Promise",
    "deferred",
    "STRIP_COMMENTS",
    "ARGUMENT_NAMES",
    "has",
    "locals",
    "ensureExist",
    "$inject",
    "keyValsToObjectR",
    "accum",
    "getParams",
    "orEmptyString",
    "beforehash",
    "buildUrl",
    "loc",
    "searchObject",
    "locationPluginFactory",
    "serviceClass",
    "configurationClass",
    "uiRouter",
    "configuration",
    "fireAfterUpdate",
    "_get",
    "_location",
    "_history",
    "history",
    "BaseLocationServices",
    "_super",
    "addEventListener",
    "_listener",
    "__extends",
    "HashLocationService",
    "title",
    "removeEventListener",
    "MemoryLocationService",
    "_url",
    "_config",
    "PushStateLocationService",
    "basePrefix",
    "_getBasePrefix",
    "exactBaseHrefMatch",
    "startsWithBase",
    "fullUrl",
    "replaceState",
    "pushState",
    "_port",
    "_protocol",
    "_host",
    "_baseHref",
    "newval",
    "_hashPrefix",
    "_isHtml5",
    "BrowserLocationConfig",
    "hostname",
    "getBaseHref",
    "baseTag",
    "getElementsByTagName",
    "hashLocationPlugin",
    "pushStateLocationPlugin",
    "memoryLocationPlugin",
    "MemoryLocationConfig",
    "UIRouterPluginBase",
    "other",
    "camelCase",
    "$1",
    "toLowerCase",
    "propName"
  ],
  "mappings": "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"
}