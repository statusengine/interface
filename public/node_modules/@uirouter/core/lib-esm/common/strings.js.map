{
  "version": 3,
  "file": "strings.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/core/common/strings.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "/**\n * Functions that manipulate strings\n *\n * Although these functions are exported, they are subject to change without notice.\n *\n * @packageDocumentation\n */\n\nimport { isArray, isFunction, isInjectable, isNull, isObject, isPromise, isString, isUndefined } from './predicates';\nimport { Rejection } from '../transition/rejectFactory';\nimport { identity, IInjectable, pushR, tail } from './common';\nimport { pattern, val } from './hof';\n\n/**\n * Returns a string shortened to a maximum length\n *\n * If the string is already less than the `max` length, return the string.\n * Else return the string, shortened to `max - 3` and append three dots (\"...\").\n *\n * @param max the maximum length of the string to return\n * @param str the input string\n */\nexport function maxLength(max: number, str: string) {\n  if (str.length <= max) return str;\n  return str.substr(0, max - 3) + '...';\n}\n\n/**\n * Returns a string, with spaces added to the end, up to a desired str length\n *\n * If the string is already longer than the desired length, return the string.\n * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\n *\n * @param length the desired length of the string to return\n * @param str the input string\n */\nexport function padString(length: number, str: string) {\n  while (str.length < length) str += ' ';\n  return str;\n}\n\nexport function kebobString(camelCase: string) {\n  return camelCase\n    .replace(/^([A-Z])/, ($1) => $1.toLowerCase()) // replace first char\n    .replace(/([A-Z])/g, ($1) => '-' + $1.toLowerCase()); // replace rest\n}\n\nexport function functionToString(fn: Function) {\n  const fnStr = fnToString(fn);\n  const namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\n  const toStr = namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\n\n  const fnName = fn['name'] || '';\n  if (fnName && toStr.match(/function \\(/)) {\n    return 'function ' + fnName + toStr.substr(9);\n  }\n  return toStr;\n}\n\nexport function fnToString(fn: IInjectable) {\n  const _fn = isArray(fn) ? fn.slice(-1)[0] : fn;\n  return (_fn && _fn.toString()) || 'undefined';\n}\n\nexport function stringify(o: any) {\n  const seen: any[] = [];\n\n  const isRejection = Rejection.isRejectionPromise;\n  const hasToString = (obj: any) =>\n    isObject(obj) && !isArray(obj) && obj.constructor !== Object && isFunction(obj.toString);\n\n  const stringifyPattern = pattern([\n    [isUndefined, val('undefined')],\n    [isNull, val('null')],\n    [isPromise, val('[Promise]')],\n    [isRejection, (x: any) => x._transitionRejection.toString()],\n    [hasToString, (x: object) => x.toString()],\n    [isInjectable, functionToString],\n    [val(true), identity],\n  ]) as (val: any) => string;\n\n  function format(value: any) {\n    if (isObject(value)) {\n      if (seen.indexOf(value) !== -1) return '[circular ref]';\n      seen.push(value);\n    }\n    return stringifyPattern(value);\n  }\n\n  if (isUndefined(o)) {\n    // Workaround for IE & Edge Spec incompatibility where replacer function would not be called when JSON.stringify\n    // is given `undefined` as value. To work around that, we simply detect `undefined` and bail out early by\n    // manually stringifying it.\n    return format(o);\n  }\n\n  return JSON.stringify(o, (key, value) => format(value)).replace(/\\\\\"/g, '\"');\n}\n\n/** Returns a function that splits a string on a character or substring */\nexport const beforeAfterSubstr =\n  (char: string) =>\n  (str: string): string[] => {\n    if (!str) return ['', ''];\n    const idx = str.indexOf(char);\n    if (idx === -1) return [str, ''];\n    return [str.substr(0, idx), str.substr(idx + 1)];\n  };\n\nexport const hostRegex = new RegExp('^(?:[a-z]+:)?//[^/]+/');\nexport const stripLastPathElement = (str: string) => str.replace(/\\/[^/]*$/, '');\nexport const splitHash = beforeAfterSubstr('#');\nexport const splitQuery = beforeAfterSubstr('?');\nexport const splitEqual = beforeAfterSubstr('=');\nexport const trimHashVal = (str: string) => (str ? str.replace(/^#/, '') : '');\n\n/**\n * Splits on a delimiter, but returns the delimiters in the array\n *\n * #### Example:\n * ```js\n * var splitOnSlashes = splitOnDelim('/');\n * splitOnSlashes(\"/foo\"); // [\"/\", \"foo\"]\n * splitOnSlashes(\"/foo/\"); // [\"/\", \"foo\", \"/\"]\n * ```\n */\nexport function splitOnDelim(delim: string) {\n  const re = new RegExp('(' + delim + ')', 'g');\n  return (str: string) => str.split(re).filter(identity);\n}\n\n/**\n * Reduce fn that joins neighboring strings\n *\n * Given an array of strings, returns a new array\n * where all neighboring strings have been joined.\n *\n * #### Example:\n * ```js\n * let arr = [\"foo\", \"bar\", 1, \"baz\", \"\", \"qux\" ];\n * arr.reduce(joinNeighborsR, []) // [\"foobar\", 1, \"bazqux\" ]\n * ```\n */\nexport function joinNeighborsR(acc: any[], x: any) {\n  if (isString(tail(acc)) && isString(x)) return acc.slice(0, -1).concat(tail(acc) + x);\n  return pushR(acc, x);\n}\n"
  ]
}