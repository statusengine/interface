{
  "version": 3,
  "file": "transitionService.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/core/transition/transitionService.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import {\n  IHookRegistry,\n  TransitionOptions,\n  TransitionHookScope,\n  TransitionHookPhase,\n  TransitionCreateHookFn,\n  HookMatchCriteria,\n  HookRegOptions,\n  PathTypes,\n  PathType,\n  RegisteredHooks,\n  TransitionHookFn,\n  TransitionStateHookFn,\n} from './interface';\nimport { Transition } from './transition';\nimport { makeEvent, RegisteredHook } from './hookRegistry';\nimport { TargetState } from '../state/targetState';\nimport { PathNode } from '../path/pathNode';\nimport { ViewService } from '../view/view';\nimport { UIRouter } from '../router';\nimport { registerAddCoreResolvables, treeChangesCleanup } from '../hooks/coreResolvables';\nimport { registerRedirectToHook } from '../hooks/redirectTo';\nimport { registerOnExitHook, registerOnRetainHook, registerOnEnterHook } from '../hooks/onEnterExitRetain';\nimport { registerEagerResolvePath, registerLazyResolveState, registerResolveRemaining } from '../hooks/resolve';\nimport { registerLoadEnteringViews, registerActivateViews } from '../hooks/views';\nimport { registerUpdateGlobalState } from '../hooks/updateGlobals';\nimport { registerUpdateUrl } from '../hooks/url';\nimport { registerLazyLoadHook } from '../hooks/lazyLoad';\nimport { TransitionEventType } from './transitionEventType';\nimport { TransitionHook, GetResultHandler, GetErrorHandler } from './transitionHook';\nimport { isDefined } from '../common/predicates';\nimport { removeFrom, values, createProxyFunctions } from '../common/common';\nimport { Disposable } from '../interface'; // has or is using\nimport { val } from '../common/hof';\nimport { registerIgnoredTransitionHook } from '../hooks/ignoredTransition';\nimport { registerInvalidTransitionHook } from '../hooks/invalidTransition';\n\n/**\n * The default [[Transition]] options.\n *\n * Include this object when applying custom defaults:\n * let reloadOpts = { reload: true, notify: true }\n * let options = defaults(theirOpts, customDefaults, defaultOptions);\n */\nexport let defaultTransOpts: TransitionOptions = {\n  location: true,\n  relative: null,\n  inherit: false,\n  notify: true,\n  reload: false,\n  supercede: true,\n  custom: {},\n  current: () => null,\n  source: 'unknown',\n};\n\n/**\n * Plugin API for Transition Service\n */\nexport interface TransitionServicePluginAPI {\n  /**\n   * Adds a Path to be used as a criterion against a TreeChanges path\n   *\n   * For example: the `exiting` path in [[HookMatchCriteria]] is a STATE scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('exiting', TransitionHookScope.STATE)`\n   * Each state in the exiting path is checked against the criteria and returned as part of the match.\n   *\n   * Another example: the `to` path in [[HookMatchCriteria]] is a TRANSITION scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('to', TransitionHookScope.TRANSITION)`\n   * Only the tail of the `to` path is checked against the criteria and returned as part of the match.\n   */\n  _definePathType(name: string, hookScope: TransitionHookScope);\n\n  /**\n   * Gets a Path definition used as a criterion against a TreeChanges path\n   */\n  _getPathTypes(): PathTypes;\n\n  /**\n   * Defines a transition hook type and returns a transition hook registration\n   * function (which can then be used to register hooks of this type).\n   */\n  _defineEvent(\n    name: string,\n    hookPhase: TransitionHookPhase,\n    hookOrder: number,\n    criteriaMatchPath: PathType,\n    reverseSort?: boolean,\n    getResultHandler?: GetResultHandler,\n    getErrorHandler?: GetErrorHandler,\n    rejectIfSuperseded?: boolean\n  );\n\n  /**\n   * Returns the known event types, such as `onBefore`\n   * If a phase argument is provided, returns only events for the given phase.\n   */\n  _getEvents(phase?: TransitionHookPhase): TransitionEventType[];\n\n  /** Returns the hooks registered for the given hook name */\n  getHooks(hookName: string): RegisteredHook[];\n}\n\n/**\n * This class provides services related to Transitions.\n *\n * - Most importantly, it allows global Transition Hooks to be registered.\n * - It allows the default transition error handler to be set.\n * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).\n *\n * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.\n *\n * This API is located at `router.transitionService` ([[UIRouter.transitionService]])\n */\nexport class TransitionService implements IHookRegistry, Disposable {\n  /** @internal */\n  _transitionCount = 0;\n\n  /** @internal */\n  public $view: ViewService;\n\n  /** The transition hook types, such as `onEnter`, `onStart`, etc */\n  private _eventTypes: TransitionEventType[] = [];\n  /** @internal The registered transition hooks */\n  _registeredHooks = {} as RegisteredHooks;\n  /** The  paths on a criteria object */\n  private _criteriaPaths = {} as PathTypes;\n  private _router: UIRouter;\n\n  /** @internal */\n  _pluginapi: TransitionServicePluginAPI;\n\n  /**\n   * This object has hook de-registration functions for the built-in hooks.\n   * This can be used by third parties libraries that wish to customize the behaviors\n   *\n   * @internal\n   */\n  _deregisterHookFns: {\n    addCoreResolves: Function;\n    ignored: Function;\n    invalid: Function;\n    redirectTo: Function;\n    onExit: Function;\n    onRetain: Function;\n    onEnter: Function;\n    eagerResolve: Function;\n    lazyResolve: Function;\n    resolveAll: Function;\n    loadViews: Function;\n    activateViews: Function;\n    updateGlobals: Function;\n    updateUrl: Function;\n    lazyLoad: Function;\n  };\n\n  /** @internal */\n  constructor(_router: UIRouter) {\n    this._router = _router;\n    this.$view = _router.viewService;\n    this._deregisterHookFns = <any>{};\n    this._pluginapi = <TransitionServicePluginAPI>(\n      createProxyFunctions(val(this), {}, val(this), [\n        '_definePathType',\n        '_defineEvent',\n        '_getPathTypes',\n        '_getEvents',\n        'getHooks',\n      ])\n    );\n\n    this._defineCorePaths();\n    this._defineCoreEvents();\n    this._registerCoreTransitionHooks();\n    _router.globals.successfulTransitions.onEvict(treeChangesCleanup);\n  }\n\n  /**\n   * Registers a [[TransitionHookFn]], called *while a transition is being constructed*.\n   *\n   * Registers a transition lifecycle hook, which is invoked during transition construction.\n   *\n   * This low level hook should only be used by plugins.\n   * This can be a useful time for plugins to add resolves or mutate the transition as needed.\n   * The Sticky States plugin uses this hook to modify the treechanges.\n   *\n   * ### Lifecycle\n   *\n   * `onCreate` hooks are invoked *while a transition is being constructed*.\n   *\n   * ### Return value\n   *\n   * The hook's return value is ignored\n   *\n   * @internal\n   * @param criteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be invoked.\n   * @param options the registration options\n   * @returns a function which deregisters the hook.\n   */\n  onCreate(criteria: HookMatchCriteria, callback: TransitionCreateHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onBefore(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onStart(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onExit(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onRetain(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onEnter(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onFinish(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onSuccess(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onError(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n\n  /**\n   * dispose\n   * @internal\n   */\n  dispose(router: UIRouter) {\n    values(this._registeredHooks).forEach((hooksArray: RegisteredHook[]) =>\n      hooksArray.forEach((hook) => {\n        hook._deregistered = true;\n        removeFrom(hooksArray, hook);\n      })\n    );\n  }\n\n  /**\n   * Creates a new [[Transition]] object\n   *\n   * This is a factory function for creating new Transition objects.\n   * It is used internally by the [[StateService]] and should generally not be called by application code.\n   *\n   * @internal\n   * @param fromPath the path to the current state (the from state)\n   * @param targetState the target state (destination)\n   * @returns a Transition\n   */\n  create(fromPath: PathNode[], targetState: TargetState): Transition {\n    return new Transition(fromPath, targetState, this._router);\n  }\n\n  /** @internal */\n  private _defineCoreEvents() {\n    const Phase = TransitionHookPhase;\n    const TH = TransitionHook;\n    const paths = this._criteriaPaths;\n    const NORMAL_SORT = false,\n      REVERSE_SORT = true;\n    const SYNCHRONOUS = true;\n\n    this._defineEvent(\n      'onCreate',\n      Phase.CREATE,\n      0,\n      paths.to,\n      NORMAL_SORT,\n      TH.LOG_REJECTED_RESULT,\n      TH.THROW_ERROR,\n      SYNCHRONOUS\n    );\n\n    this._defineEvent('onBefore', Phase.BEFORE, 0, paths.to);\n\n    this._defineEvent('onStart', Phase.RUN, 0, paths.to);\n    this._defineEvent('onExit', Phase.RUN, 100, paths.exiting, REVERSE_SORT);\n    this._defineEvent('onRetain', Phase.RUN, 200, paths.retained);\n    this._defineEvent('onEnter', Phase.RUN, 300, paths.entering);\n    this._defineEvent('onFinish', Phase.RUN, 400, paths.to);\n\n    this._defineEvent(\n      'onSuccess',\n      Phase.SUCCESS,\n      0,\n      paths.to,\n      NORMAL_SORT,\n      TH.LOG_REJECTED_RESULT,\n      TH.LOG_ERROR,\n      SYNCHRONOUS\n    );\n    this._defineEvent(\n      'onError',\n      Phase.ERROR,\n      0,\n      paths.to,\n      NORMAL_SORT,\n      TH.LOG_REJECTED_RESULT,\n      TH.LOG_ERROR,\n      SYNCHRONOUS\n    );\n  }\n\n  /** @internal */\n  private _defineCorePaths() {\n    const { STATE, TRANSITION } = TransitionHookScope;\n\n    this._definePathType('to', TRANSITION);\n    this._definePathType('from', TRANSITION);\n    this._definePathType('exiting', STATE);\n    this._definePathType('retained', STATE);\n    this._definePathType('entering', STATE);\n  }\n\n  /** @internal */\n  _defineEvent(\n    name: string,\n    hookPhase: TransitionHookPhase,\n    hookOrder: number,\n    criteriaMatchPath: PathType,\n    reverseSort = false,\n    getResultHandler: GetResultHandler = TransitionHook.HANDLE_RESULT,\n    getErrorHandler: GetErrorHandler = TransitionHook.REJECT_ERROR,\n    synchronous = false\n  ) {\n    const eventType = new TransitionEventType(\n      name,\n      hookPhase,\n      hookOrder,\n      criteriaMatchPath,\n      reverseSort,\n      getResultHandler,\n      getErrorHandler,\n      synchronous\n    );\n\n    this._eventTypes.push(eventType);\n    makeEvent(this, this, eventType);\n  }\n\n  /** @internal */\n  private _getEvents(phase?: TransitionHookPhase): TransitionEventType[] {\n    const transitionHookTypes = isDefined(phase)\n      ? this._eventTypes.filter((type) => type.hookPhase === phase)\n      : this._eventTypes.slice();\n\n    return transitionHookTypes.sort((l, r) => {\n      const cmpByPhase = l.hookPhase - r.hookPhase;\n      return cmpByPhase === 0 ? l.hookOrder - r.hookOrder : cmpByPhase;\n    });\n  }\n\n  /**\n   * Adds a Path to be used as a criterion against a TreeChanges path\n   *\n   * For example: the `exiting` path in [[HookMatchCriteria]] is a STATE scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('exiting', TransitionHookScope.STATE)`\n   * Each state in the exiting path is checked against the criteria and returned as part of the match.\n   *\n   * Another example: the `to` path in [[HookMatchCriteria]] is a TRANSITION scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('to', TransitionHookScope.TRANSITION)`\n   * Only the tail of the `to` path is checked against the criteria and returned as part of the match.\n   *\n   * @internal\n   */\n  private _definePathType(name: string, hookScope: TransitionHookScope) {\n    this._criteriaPaths[name] = { name, scope: hookScope };\n  }\n\n  /** @internal */\n  // tslint:disable-next-line\n  private _getPathTypes(): PathTypes {\n    return this._criteriaPaths;\n  }\n\n  /** @internal */\n  public getHooks(hookName: string): RegisteredHook[] {\n    return this._registeredHooks[hookName];\n  }\n\n  /** @internal */\n  private _registerCoreTransitionHooks() {\n    const fns = this._deregisterHookFns;\n\n    fns.addCoreResolves = registerAddCoreResolvables(this);\n    fns.ignored = registerIgnoredTransitionHook(this);\n    fns.invalid = registerInvalidTransitionHook(this);\n\n    // Wire up redirectTo hook\n    fns.redirectTo = registerRedirectToHook(this);\n\n    // Wire up onExit/Retain/Enter state hooks\n    fns.onExit = registerOnExitHook(this);\n    fns.onRetain = registerOnRetainHook(this);\n    fns.onEnter = registerOnEnterHook(this);\n\n    // Wire up Resolve hooks\n    fns.eagerResolve = registerEagerResolvePath(this);\n    fns.lazyResolve = registerLazyResolveState(this);\n    fns.resolveAll = registerResolveRemaining(this);\n\n    // Wire up the View management hooks\n    fns.loadViews = registerLoadEnteringViews(this);\n    fns.activateViews = registerActivateViews(this);\n\n    // Updates global state after a transition\n    fns.updateGlobals = registerUpdateGlobalState(this);\n\n    // After globals.current is updated at priority: 10000\n    fns.updateUrl = registerUpdateUrl(this);\n\n    // Lazy load state trees\n    fns.lazyLoad = registerLazyLoadHook(this);\n  }\n}\n"
  ]
}