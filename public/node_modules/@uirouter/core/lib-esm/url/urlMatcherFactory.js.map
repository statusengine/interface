{
  "version": 3,
  "file": "urlMatcherFactory.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/core/url/urlMatcherFactory.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { extend, forEach, isDefined, isFunction, isObject } from '../common';\nimport { UrlMatcher } from './urlMatcher';\nimport { DefType, Param, ParamType, ParamTypeDefinition } from '../params';\nimport { UrlMatcherCompileConfig } from './interface';\nimport { StateDeclaration } from '../state';\nimport { UIRouter } from '../router';\n\nexport class ParamFactory {\n  fromConfig(id: string, type: ParamType, state: StateDeclaration) {\n    return new Param(id, type, DefType.CONFIG, this.router.urlService.config, state);\n  }\n\n  fromPath(id: string, type: ParamType, state: StateDeclaration) {\n    return new Param(id, type, DefType.PATH, this.router.urlService.config, state);\n  }\n\n  fromSearch(id: string, type: ParamType, state: StateDeclaration) {\n    return new Param(id, type, DefType.SEARCH, this.router.urlService.config, state);\n  }\n\n  constructor(private router: UIRouter) {}\n}\n\n/**\n * Factory for [[UrlMatcher]] instances.\n *\n * The factory is available to ng1 services as\n * `$urlMatcherFactory` or ng1 providers as `$urlMatcherFactoryProvider`.\n */\nexport class UrlMatcherFactory {\n  /** Creates a new [[Param]] for a given location (DefType) */\n  paramFactory = new ParamFactory(this.router);\n  // TODO: Check if removal of this will break anything, then remove these\n  UrlMatcher: typeof UrlMatcher = UrlMatcher;\n  Param: typeof Param = Param;\n\n  // TODO: move implementations to UrlConfig (urlService.config)\n  constructor(/** @internal */ private router: UIRouter) {}\n\n  /**\n   * Creates a [[UrlMatcher]] for the specified pattern.\n   *\n   * @param pattern  The URL pattern.\n   * @param config  The config object hash.\n   * @returns The UrlMatcher.\n   */\n  compile(pattern: string, config?: UrlMatcherCompileConfig) {\n    const urlConfig = this.router.urlService.config;\n    // backward-compatible support for config.params -> config.state.params\n    const params = config && !config.state && (config as any).params;\n    config = params ? { state: { params }, ...config } : config;\n    const globalConfig: UrlMatcherCompileConfig = {\n      strict: urlConfig._isStrictMode,\n      caseInsensitive: urlConfig._isCaseInsensitive,\n      decodeParams: urlConfig._decodeParams,\n    };\n    return new UrlMatcher(pattern, urlConfig.paramTypes, this.paramFactory, extend(globalConfig, config));\n  }\n\n  /**\n   * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.\n   *\n   * @param object  The object to perform the type check against.\n   * @returns `true` if the object matches the `UrlMatcher` interface, by\n   *          implementing all the same methods.\n   */\n  isMatcher(object: any): boolean {\n    // TODO: typeof?\n    if (!isObject(object)) return false;\n    let result = true;\n\n    forEach(UrlMatcher.prototype, (val, name) => {\n      if (isFunction(val)) result = result && isDefined(object[name]) && isFunction(object[name]);\n    });\n    return result;\n  }\n\n  /** @internal */\n  $get() {\n    const urlConfig = this.router.urlService.config;\n    urlConfig.paramTypes.enqueue = false;\n    urlConfig.paramTypes._flushTypeQueue();\n    return this;\n  }\n\n  /** @deprecated use [[UrlConfig.caseInsensitive]] */\n  caseInsensitive = (value?: boolean) => this.router.urlService.config.caseInsensitive(value);\n\n  /** @deprecated use [[UrlConfig.defaultSquashPolicy]] */\n  defaultSquashPolicy = (value?: boolean | string) => this.router.urlService.config.defaultSquashPolicy(value);\n\n  /** @deprecated use [[UrlConfig.strictMode]] */\n  strictMode = (value?: boolean) => this.router.urlService.config.strictMode(value);\n\n  /** @deprecated use [[UrlConfig.type]] */\n  type = (name: string, definition?: ParamTypeDefinition, definitionFn?: () => ParamTypeDefinition) => {\n    return this.router.urlService.config.type(name, definition, definitionFn) || this;\n  };\n}\n"
  ]
}