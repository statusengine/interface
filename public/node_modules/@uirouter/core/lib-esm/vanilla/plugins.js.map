{
  "version": 3,
  "file": "plugins.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/core/vanilla/plugins.ts"
  ],
  "names": [],
  "mappings": "AAAA,OAAO,EAAE,qBAAqB,EAAE,MAAM,yBAAyB,CAAC;AAChE,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAC5D,OAAO,EAAE,qBAAqB,EAAE,MAAM,SAAS,CAAC;AAGhD,OAAO,EAAE,wBAAwB,EAAE,MAAM,4BAA4B,CAAC;AACtE,OAAO,EAAE,qBAAqB,EAAE,MAAM,yBAAyB,CAAC;AAChE,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAC9D,OAAO,EAAE,SAAS,EAAE,MAAM,YAAY,CAAC;AACvC,OAAO,EAAE,EAAE,EAAE,MAAM,KAAK,CAAC;AACzB,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAElD,MAAM,UAAU,cAAc,CAAC,MAAgB;IAC7C,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,QAAQ,CAAC,EAAE,GAAG,EAAE,CAAC;IAEjB,OAAO,EAAE,IAAI,EAAE,kBAAkB,EAAE,EAAE,IAAA,EAAE,SAAS,WAAA,EAAE,OAAO,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI,EAAE,CAAC;AAC1E,CAAC;AAED,+EAA+E;AAC/E,MAAM,CAAC,IAAM,kBAAkB,GAAyC,qBAAqB,CAC3F,0BAA0B,EAC1B,KAAK,EACL,mBAAmB,EACnB,qBAAqB,CACtB,CAAC;AAEF,+GAA+G;AAC/G,MAAM,CAAC,IAAM,uBAAuB,GAAyC,qBAAqB,CAChG,2BAA2B,EAC3B,IAAI,EACJ,wBAAwB,EACxB,qBAAqB,CACtB,CAAC;AAEF,sFAAsF;AACtF,MAAM,CAAC,IAAM,oBAAoB,GAAyC,qBAAqB,CAC7F,wBAAwB,EACxB,KAAK,EACL,qBAAqB,EACrB,oBAAoB,CACrB,CAAC",
  "sourcesContent": [
    "import { BrowserLocationConfig } from './browserLocationConfig';\nimport { HashLocationService } from './hashLocationService';\nimport { locationPluginFactory } from './utils';\nimport { LocationPlugin, ServicesPlugin } from './interface';\nimport { UIRouter } from '../router';\nimport { PushStateLocationService } from './pushStateLocationService';\nimport { MemoryLocationService } from './memoryLocationService';\nimport { MemoryLocationConfig } from './memoryLocationConfig';\nimport { $injector } from './injector';\nimport { $q } from './q';\nimport { services } from '../common/coreservices';\n\nexport function servicesPlugin(router: UIRouter): ServicesPlugin {\n  services.$injector = $injector;\n  services.$q = $q;\n\n  return { name: 'vanilla.services', $q, $injector, dispose: () => null };\n}\n\n/** A `UIRouterPlugin` uses the browser hash to get/set the current location */\nexport const hashLocationPlugin: (router: UIRouter) => LocationPlugin = locationPluginFactory(\n  'vanilla.hashBangLocation',\n  false,\n  HashLocationService,\n  BrowserLocationConfig\n);\n\n/** A `UIRouterPlugin` that gets/sets the current location using the browser's `location` and `history` apis */\nexport const pushStateLocationPlugin: (router: UIRouter) => LocationPlugin = locationPluginFactory(\n  'vanilla.pushStateLocation',\n  true,\n  PushStateLocationService,\n  BrowserLocationConfig\n);\n\n/** A `UIRouterPlugin` that gets/sets the current location from an in-memory object */\nexport const memoryLocationPlugin: (router: UIRouter) => LocationPlugin = locationPluginFactory(\n  'vanilla.memoryLocation',\n  false,\n  MemoryLocationService,\n  MemoryLocationConfig\n);\n"
  ]
}