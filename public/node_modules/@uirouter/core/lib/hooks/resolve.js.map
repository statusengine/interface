{
  "version": 3,
  "file": "resolve.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/core/hooks/resolve.ts"
  ],
  "names": [],
  "mappings": ";;;AAAA,2CAAwC;AAExC,4DAA2D;AAG3D,qCAAoC;AAGvB,QAAA,qBAAqB,GAAG,IAAI,CAAC;AAE1C;;;;;;;;GAQG;AACH,IAAM,gBAAgB,GAAqB,UAAC,KAAiB;IAC3D,OAAA,IAAI,+BAAc,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,aAAI,CAAC;AAAjF,CAAiF,CAAC;AAEvE,QAAA,wBAAwB,GAAG,UAAC,iBAAoC;IAC3E,OAAA,iBAAiB,CAAC,OAAO,CAAC,EAAE,EAAE,gBAAgB,EAAE,EAAE,QAAQ,EAAE,6BAAqB,EAAE,CAAC;AAApF,CAAoF,CAAC;AAEvF;;;;;;;;GAQG;AACH,IAAM,gBAAgB,GAA0B,UAAC,KAAiB,EAAE,KAAuB;IACzF,OAAA,IAAI,+BAAc,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,aAAI,CAAC;AAA5G,CAA4G,CAAC;AAElG,QAAA,wBAAwB,GAAG,UAAC,iBAAoC;IAC3E,OAAA,iBAAiB,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,SAAG,CAAC,IAAI,CAAC,EAAE,EAAE,gBAAgB,EAAE,EAAE,QAAQ,EAAE,6BAAqB,EAAE,CAAC;AAAzG,CAAyG,CAAC;AAE5G;;;;;;;;;GASG;AACH,IAAM,gBAAgB,GAAqB,UAAC,KAAiB;IAC3D,OAAA,IAAI,+BAAc,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,aAAI,CAAC;AAAhF,CAAgF,CAAC;AAEtE,QAAA,wBAAwB,GAAG,UAAC,iBAAoC;IAC3E,OAAA,iBAAiB,CAAC,QAAQ,CAAC,EAAE,EAAE,gBAAgB,EAAE,EAAE,QAAQ,EAAE,6BAAqB,EAAE,CAAC;AAArF,CAAqF,CAAC",
  "sourcesContent": [
    "import { noop } from '../common/common';\nimport { Transition } from '../transition/transition';\nimport { ResolveContext } from '../resolve/resolveContext';\nimport { TransitionStateHookFn, TransitionHookFn } from '../transition/interface';\nimport { TransitionService } from '../transition/transitionService';\nimport { val } from '../common/hof';\nimport { StateDeclaration } from '../state/interface';\n\nexport const RESOLVE_HOOK_PRIORITY = 1000;\n\n/**\n * A [[TransitionHookFn]] which resolves all EAGER Resolvables in the To Path\n *\n * Registered using `transitionService.onStart({}, eagerResolvePath, { priority: 1000 });`\n *\n * When a Transition starts, this hook resolves all the EAGER Resolvables, which the transition then waits for.\n *\n * See [[StateDeclaration.resolve]]\n */\nconst eagerResolvePath: TransitionHookFn = (trans: Transition) =>\n  new ResolveContext(trans.treeChanges().to).resolvePath('EAGER', trans).then(noop);\n\nexport const registerEagerResolvePath = (transitionService: TransitionService) =>\n  transitionService.onStart({}, eagerResolvePath, { priority: RESOLVE_HOOK_PRIORITY });\n\n/**\n * A [[TransitionHookFn]] which resolves all LAZY Resolvables for the state (and all its ancestors) in the To Path\n *\n * Registered using `transitionService.onEnter({ entering: () => true }, lazyResolveState, { priority: 1000 });`\n *\n * When a State is being entered, this hook resolves all the Resolvables for this state, which the transition then waits for.\n *\n * See [[StateDeclaration.resolve]]\n */\nconst lazyResolveState: TransitionStateHookFn = (trans: Transition, state: StateDeclaration) =>\n  new ResolveContext(trans.treeChanges().to).subContext(state.$$state()).resolvePath('LAZY', trans).then(noop);\n\nexport const registerLazyResolveState = (transitionService: TransitionService) =>\n  transitionService.onEnter({ entering: val(true) }, lazyResolveState, { priority: RESOLVE_HOOK_PRIORITY });\n\n/**\n * A [[TransitionHookFn]] which resolves any dynamically added (LAZY or EAGER) Resolvables.\n *\n * Registered using `transitionService.onFinish({}, eagerResolvePath, { priority: 1000 });`\n *\n * After all entering states have been entered, this hook resolves any remaining Resolvables.\n * These are typically dynamic resolves which were added by some Transition Hook using [[Transition.addResolvable]].\n *\n * See [[StateDeclaration.resolve]]\n */\nconst resolveRemaining: TransitionHookFn = (trans: Transition) =>\n  new ResolveContext(trans.treeChanges().to).resolvePath('LAZY', trans).then(noop);\n\nexport const registerResolveRemaining = (transitionService: TransitionService) =>\n  transitionService.onFinish({}, resolveRemaining, { priority: RESOLVE_HOOK_PRIORITY });\n"
  ]
}