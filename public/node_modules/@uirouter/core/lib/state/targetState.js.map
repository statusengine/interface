{
  "version": 3,
  "file": "targetState.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/core/state/targetState.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { StateDeclaration, StateOrName, TargetStateDef } from './interface';\nimport { TransitionOptions } from '../transition/interface';\nimport { StateObject } from './stateObject';\nimport { isObject, isString } from '../common/predicates';\nimport { stringify } from '../common/strings';\nimport { extend } from '../common';\nimport { StateRegistry } from './stateRegistry';\nimport { RawParams } from '../params';\n\n/**\n * Encapsulate the target (destination) state/params/options of a [[Transition]].\n *\n * This class is frequently used to redirect a transition to a new destination.\n *\n * See:\n *\n * - [[HookResult]]\n * - [[TransitionHookFn]]\n * - [[TransitionService.onStart]]\n *\n * To create a `TargetState`, use [[StateService.target]].\n *\n * ---\n *\n * This class wraps:\n *\n * 1) an identifier for a state\n * 2) a set of parameters\n * 3) and transition options\n * 4) the registered state object (the [[StateDeclaration]])\n *\n * Many UI-Router APIs such as [[StateService.go]] take a [[StateOrName]] argument which can\n * either be a *state object* (a [[StateDeclaration]] or [[StateObject]]) or a *state name* (a string).\n * The `TargetState` class normalizes those options.\n *\n * A `TargetState` may be valid (the state being targeted exists in the registry)\n * or invalid (the state being targeted is not registered).\n */\nexport class TargetState {\n  private _definition: StateObject;\n  private _params: RawParams;\n  private _options: TransitionOptions;\n\n  /** Returns true if the object has a state property that might be a state or state name */\n  static isDef = (obj): obj is TargetStateDef => {\n    return obj && obj.state && (isString(obj.state) || (isObject(obj.state) && isString(obj.state.name)));\n  };\n\n  /**\n   * The TargetState constructor\n   *\n   * Note: Do not construct a `TargetState` manually.\n   * To create a `TargetState`, use the [[StateService.target]] factory method.\n   *\n   * @param _stateRegistry The StateRegistry to use to look up the _definition\n   * @param _identifier An identifier for a state.\n   *    Either a fully-qualified state name, or the object used to define the state.\n   * @param _params Parameters for the target state\n   * @param _options Transition options.\n   *\n   * @internal\n   */\n  constructor(\n    private _stateRegistry: StateRegistry,\n    private _identifier: StateOrName,\n    _params?: RawParams,\n    _options?: TransitionOptions\n  ) {\n    this._identifier = _identifier;\n    this._params = extend({}, _params || {});\n    this._options = extend({}, _options || {});\n    this._definition = _stateRegistry.matcher.find(_identifier, this._options.relative);\n  }\n\n  /** The name of the state this object targets */\n  name(): string {\n    return (this._definition && this._definition.name) || <string>this._identifier;\n  }\n\n  /** The identifier used when creating this TargetState */\n  identifier(): StateOrName {\n    return this._identifier;\n  }\n\n  /** The target parameter values */\n  params(): RawParams {\n    return this._params;\n  }\n\n  /** The internal state object (if it was found) */\n  $state(): StateObject {\n    return this._definition;\n  }\n\n  /** The internal state declaration (if it was found) */\n  state(): StateDeclaration {\n    return this._definition && this._definition.self;\n  }\n\n  /** The target options */\n  options() {\n    return this._options;\n  }\n\n  /** True if the target state was found */\n  exists(): boolean {\n    return !!(this._definition && this._definition.self);\n  }\n\n  /** True if the object is valid */\n  valid(): boolean {\n    return !this.error();\n  }\n\n  /** If the object is invalid, returns the reason why */\n  error(): string {\n    const base = <any>this.options().relative;\n    if (!this._definition && !!base) {\n      const stateName = base.name ? base.name : base;\n      return `Could not resolve '${this.name()}' from state '${stateName}'`;\n    }\n    if (!this._definition) return `No such state '${this.name()}'`;\n    if (!this._definition.self) return `State '${this.name()}' has an invalid definition`;\n  }\n\n  toString() {\n    return `'${this.name()}'${stringify(this.params())}`;\n  }\n\n  /**\n   * Returns a copy of this TargetState which targets a different state.\n   * The new TargetState has the same parameter values and transition options.\n   *\n   * @param state The new state that should be targeted\n   */\n  withState(state: StateOrName): TargetState {\n    return new TargetState(this._stateRegistry, state, this._params, this._options);\n  }\n\n  /**\n   * Returns a copy of this TargetState, using the specified parameter values.\n   *\n   * @param params the new parameter values to use\n   * @param replace When false (default) the new parameter values will be merged with the current values.\n   *                When true the parameter values will be used instead of the current values.\n   */\n  withParams(params: RawParams, replace = false): TargetState {\n    const newParams: RawParams = replace ? params : extend({}, this._params, params);\n    return new TargetState(this._stateRegistry, this._identifier, newParams, this._options);\n  }\n\n  /**\n   * Returns a copy of this TargetState, using the specified Transition Options.\n   *\n   * @param options the new options to use\n   * @param replace When false (default) the new options will be merged with the current options.\n   *                When true the options will be used instead of the current options.\n   */\n  withOptions(options: TransitionOptions, replace = false): TargetState {\n    const newOpts = replace ? options : extend({}, this._options, options);\n    return new TargetState(this._stateRegistry, this._identifier, this._params, newOpts);\n  }\n}\n"
  ]
}